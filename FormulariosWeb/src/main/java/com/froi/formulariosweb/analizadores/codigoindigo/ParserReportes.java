
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.froi.formulariosweb.analizadores.codigoindigo;

import com.froi.formulariosweb.entidades.Advertencia;
import com.froi.formulariosweb.entidades.Instruccion;
import com.froi.formulariosweb.entidades.InstruccionConsulta;
import com.froi.formulariosweb.entidadesfundamentales.Condicion;
import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserReportes extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserReportesSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserReportes() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserReportes(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserReportes(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\044\000\002\002\004\000\002\002\013\000\002\002" +
    "\013\000\002\002\013\000\002\002\012\000\002\002\010" +
    "\000\002\002\007\000\002\012\002\000\002\002\017\000" +
    "\002\003\003\000\002\003\002\000\002\004\005\000\002" +
    "\004\003\000\002\005\006\000\002\005\002\000\002\005" +
    "\006\000\002\005\005\000\002\005\006\000\002\006\007" +
    "\000\002\006\006\000\002\006\006\000\002\006\005\000" +
    "\002\006\004\000\002\007\007\000\002\007\007\000\002" +
    "\007\010\000\002\007\010\000\002\007\002\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\011\003\000" +
    "\002\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\006\003\004\004\006\001\002\000\014\005" +
    "\116\006\117\022\122\023\121\025\120\001\002\000\004" +
    "\002\115\001\002\000\004\005\007\001\002\000\004\006" +
    "\010\001\002\000\004\007\011\001\002\000\004\025\012" +
    "\001\002\000\004\022\013\001\002\000\010\003\015\023" +
    "\ufff7\025\014\001\002\000\010\003\ufff5\023\ufff5\026\113" +
    "\001\002\000\004\023\111\001\002\000\004\023\020\001" +
    "\002\000\006\003\ufff8\023\ufff8\001\002\000\010\002\ufff3" +
    "\003\023\010\022\001\002\000\004\002\000\001\002\000" +
    "\004\022\106\001\002\000\012\003\026\013\025\022\027" +
    "\025\024\001\002\000\016\014\044\015\041\016\046\017" +
    "\051\020\043\021\047\001\002\000\004\025\077\001\002" +
    "\000\032\003\uffe6\011\035\012\050\014\044\015\041\016" +
    "\046\017\051\020\043\021\047\023\uffe6\027\040\030\037" +
    "\001\002\000\010\003\026\013\025\025\024\001\002\000" +
    "\004\023\031\001\002\000\006\002\ufff1\004\ufff1\001\002" +
    "\000\006\003\033\023\034\001\002\000\006\002\ufff0\004" +
    "\ufff0\001\002\000\006\002\ufff2\004\ufff2\001\002\000\006" +
    "\013\067\025\066\001\002\000\012\003\uffe6\011\035\012" +
    "\050\023\uffe6\001\002\000\012\003\uffde\011\uffde\012\uffde" +
    "\023\uffde\001\002\000\012\003\uffdf\011\uffdf\012\uffdf\023" +
    "\uffdf\001\002\000\006\027\uffe5\030\uffe5\001\002\000\006" +
    "\003\uffeb\023\uffeb\001\002\000\006\027\uffe3\030\uffe3\001" +
    "\002\000\006\027\uffe4\030\uffe4\001\002\000\006\027\040" +
    "\030\037\001\002\000\006\027\uffe0\030\uffe0\001\002\000" +
    "\006\027\uffe1\030\uffe1\001\002\000\006\013\053\025\052" +
    "\001\002\000\006\027\uffe2\030\uffe2\001\002\000\016\014" +
    "\044\015\041\016\046\017\051\020\043\021\047\001\002" +
    "\000\004\025\054\001\002\000\016\014\044\015\041\016" +
    "\046\017\051\020\043\021\047\001\002\000\006\027\040" +
    "\030\037\001\002\000\012\003\uffe6\011\035\012\050\023" +
    "\uffe6\001\002\000\006\003\uffe7\023\uffe7\001\002\000\006" +
    "\027\040\030\037\001\002\000\012\003\uffe6\011\035\012" +
    "\050\023\uffe6\001\002\000\006\003\uffe9\023\uffe9\001\002" +
    "\000\012\003\uffe6\011\035\012\050\023\uffe6\001\002\000" +
    "\006\003\uffed\023\uffed\001\002\000\006\003\uffec\023\uffec" +
    "\001\002\000\016\014\044\015\041\016\046\017\051\020" +
    "\043\021\047\001\002\000\004\025\070\001\002\000\016" +
    "\014\044\015\041\016\046\017\051\020\043\021\047\001" +
    "\002\000\006\027\040\030\037\001\002\000\012\003\uffe6" +
    "\011\035\012\050\023\uffe6\001\002\000\006\003\uffe8\023" +
    "\uffe8\001\002\000\006\027\040\030\037\001\002\000\012" +
    "\003\uffe6\011\035\012\050\023\uffe6\001\002\000\006\003" +
    "\uffea\023\uffea\001\002\000\016\014\044\015\041\016\046" +
    "\017\051\020\043\021\047\001\002\000\006\027\040\030" +
    "\037\001\002\000\012\003\uffe6\011\035\012\050\023\uffe6" +
    "\001\002\000\006\003\uffef\023\uffef\001\002\000\006\027" +
    "\040\030\037\001\002\000\012\003\uffe6\011\035\012\050" +
    "\023\uffe6\001\002\000\006\003\uffee\023\uffee\001\002\000" +
    "\010\003\026\013\025\025\024\001\002\000\004\023\110" +
    "\001\002\000\006\002\ufff4\004\ufff4\001\002\000\010\002" +
    "\ufff3\003\023\010\022\001\002\000\004\002\uffff\001\002" +
    "\000\004\025\014\001\002\000\006\003\ufff6\023\ufff6\001" +
    "\002\000\004\002\001\001\002\000\004\006\153\001\002" +
    "\000\004\007\145\001\002\000\004\022\141\001\002\000" +
    "\010\003\023\004\ufff3\010\022\001\002\000\004\003\123" +
    "\001\002\000\004\023\124\001\002\000\010\002\ufff3\003" +
    "\023\010\022\001\002\000\004\002\ufffb\001\002\000\004" +
    "\004\ufffa\001\002\000\004\004\130\001\002\000\004\005" +
    "\131\001\002\000\004\006\132\001\002\000\004\007\133" +
    "\001\002\000\004\025\134\001\002\000\004\022\135\001" +
    "\002\000\006\003\ufff7\025\014\001\002\000\004\003\137" +
    "\001\002\000\010\002\ufff3\003\023\010\022\001\002\000" +
    "\004\002\ufff9\001\002\000\004\003\142\001\002\000\004" +
    "\023\143\001\002\000\010\002\ufff3\003\023\010\022\001" +
    "\002\000\004\002\ufffc\001\002\000\004\025\146\001\002" +
    "\000\004\022\147\001\002\000\004\003\150\001\002\000" +
    "\004\023\151\001\002\000\010\002\ufff3\003\023\010\022" +
    "\001\002\000\004\002\ufffd\001\002\000\004\007\154\001" +
    "\002\000\004\025\155\001\002\000\004\022\156\001\002" +
    "\000\006\023\ufff7\025\014\001\002\000\004\023\160\001" +
    "\002\000\010\002\ufff3\003\023\010\022\001\002\000\004" +
    "\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\015\004\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\027" +
    "\001\001\000\004\010\102\001\001\000\002\001\001\000" +
    "\010\007\041\010\044\011\035\001\001\000\004\006\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\057\001\001\000\002\001\001\000\004\010" +
    "\054\001\001\000\004\011\055\001\001\000\004\007\056" +
    "\001\001\000\002\001\001\000\004\011\060\001\001\000" +
    "\004\007\061\001\001\000\002\001\001\000\004\007\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\073\001\001\000\002\001\001\000\004\010\070\001\001" +
    "\000\004\011\071\001\001\000\004\007\072\001\001\000" +
    "\002\001\001\000\004\011\074\001\001\000\004\007\075" +
    "\001\001\000\002\001\001\000\004\010\077\001\001\000" +
    "\004\011\100\001\001\000\004\007\101\001\001\000\002" +
    "\001\001\000\004\011\103\001\001\000\004\007\104\001" +
    "\001\000\002\001\001\000\004\006\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\111\001\001\000" +
    "\002\001\001\000\004\004\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\124\001\001\000\002\001" +
    "\001\000\004\012\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\135\004\016\001\001" +
    "\000\002\001\001\000\004\005\137\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\156\004\016\001\001" +
    "\000\002\001\001\000\004\005\160\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserReportes$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserReportes$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserReportes$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    private ArrayList<Advertencia> listaErrores;
    private ArrayList<Instruccion> listaInstrucciones;
    private ArrayList<Condicion> condiciones;
    private ArrayList<String> campos;
    private String identificador;
    private int fila;
    private int columna;
    private int punteroErrores = 0;

    public ParserReportes(ReportesLexer lexer, ArrayList<Advertencia> listaErrores, ArrayList<Instruccion> listaInstrucciones, int fila, int columna) {
        super(lexer);
        System.out.println("Inicio del constructor");
        this.listaErrores = listaErrores;
        this.listaInstrucciones = listaInstrucciones;
        this.condiciones = new ArrayList<>();
        this.campos = new ArrayList<>();
        this.fila = fila;
        this.columna = columna;
        System.out.println("Fin del Constructor");
    }
    public void report_error(String message, Object info) {
        System.out.println("reporterror");
    }
    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal " + info);
    }
    @Override
    public void syntax_error(Symbol s) {
        int line = fila + s.left;
        int column = columna + s.right;
        System.out.println("linea: " + line + "   columna: " + column);
        Advertencia advert = new Advertencia((String)s.value, line, column, "Sintáctico", "error sintáctico");
        listaErrores.add(advert);
        punteroErrores = listaErrores.size()-1;
    }
    protected int error_sync_size() {
        return 1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserReportes$actions {
  private final ParserReportes parser;

  /** Constructor */
  CUP$ParserReportes$actions(ParserReportes parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserReportes$do_action_part00000000(
    int                        CUP$ParserReportes$act_num,
    java_cup.runtime.lr_parser CUP$ParserReportes$parser,
    java.util.Stack            CUP$ParserReportes$stack,
    int                        CUP$ParserReportes$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserReportes$result;

      /* select the action based on the action number */
      switch (CUP$ParserReportes$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).value;
		RESULT = start_val;
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserReportes$parser.done_parsing();
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= SELECT TO FORM FLECHA ALLCHARACTERSNOSPACE CORCHETE_A campos_posibles CORCHETE_C condicion_principal 
            {
              Object RESULT =null;
		int formularioleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-4)).left;
		int formularioright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-4)).right;
		Object formulario = (Object)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-4)).value;
		
                                                                                                                                    identificador = formulario.toString();
                                                                                                                                    System.out.println("\n\n\nCampos");
                                                                                                                                    for(String element: campos) {
                                                                                                                                        System.out.println(element);
                                                                                                                                    }
                                                                                                                                    System.out.println("\n\n\nCondiciones");
                                                                                                                                    for(Condicion element : condiciones) {
                                                                                                                                        System.out.println(element);
                                                                                                                                    }
                                                                                                                                    InstruccionConsulta inst = new InstruccionConsulta();
                                                                                                                                    inst.setIdFormulario(identificador);
                                                                                                                                    inst.setListaCampos(campos);
                                                                                                                                    inst.setListaCondiciones(condiciones);
                                                                                                                                    listaInstrucciones.add(inst);
                                                                                                                                
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-8)), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= SELECT TO FORM FLECHA ALLCHARACTERSNOSPACE CORCHETE_A error CORCHETE_C condicion_principal 
            {
              Object RESULT =null;
		 listaErrores.get(punteroErrores).setDescripcion("Error en los campos a consultar, verifique que no contengan caracteres invalidos"); 
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-8)), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= error TO FORM FLECHA ALLCHARACTERSNOSPACE CORCHETE_A campos_posibles CORCHETE_C condicion_principal 
            {
              Object RESULT =null;
		 listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo '>' en la instruccion"); 
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-8)), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= error FORM FLECHA ALLCHARACTERSNOSPACE CORCHETE_A error CORCHETE_C condicion_principal 
            {
              Object RESULT =null;
		 listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo '>' en la instruccion"); 
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-7)), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inicio ::= error ALLCHARACTERSNOSPACE CORCHETE_A error CORCHETE_C condicion_principal 
            {
              Object RESULT =null;
		 listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo '>' en la instruccion"); 
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-5)), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicio ::= error CORCHETE_A error CORCHETE_C condicion_principal 
            {
              Object RESULT =null;
		 listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo '>' en la instruccion"); 
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-4)), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Object RESULT =null;
 listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo '>' en la instruccion"); 
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("NT$0",8, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inicio ::= error CORCHETE_C condicion_principal NT$0 SELECT TO FORM FLECHA ALLCHARACTERSNOSPACE CORCHETE_A campos_posibles error condicion_principal 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-9)).value;
		 listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo '>' en la instruccion"); 
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-12)), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // campos_posibles ::= campos_posibles_p 
            {
              Object RESULT =null;

              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("campos_posibles",1, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // campos_posibles ::= 
            {
              Object RESULT =null;

              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("campos_posibles",1, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // campos_posibles_p ::= ALLCHARACTERSNOSPACE COMA campos_posibles_p 
            {
              Object RESULT =null;
		int campoleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-2)).left;
		int camporight = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-2)).right;
		Object campo = (Object)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-2)).value;
		 campos.add(campo.toString()); 
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("campos_posibles_p",2, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-2)), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // campos_posibles_p ::= ALLCHARACTERSNOSPACE 
            {
              Object RESULT =null;
		int campoleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).left;
		int camporight = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).right;
		Object campo = (Object)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.peek()).value;
		 campos.add(campo.toString()); 
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("campos_posibles_p",2, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // condicion_principal ::= WHERE CORCHETE_A condicion_interna CORCHETE_C 
            {
              Object RESULT =null;

              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("condicion_principal",3, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // condicion_principal ::= 
            {
              Object RESULT =null;

              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("condicion_principal",3, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // condicion_principal ::= error CORCHETE_A condicion_interna CORCHETE_C 
            {
              Object RESULT =null;
		 listaErrores.get(punteroErrores).setDescripcion("Se esperaba la palabra 'WHERE' en la instruccion"); 
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("condicion_principal",3, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // condicion_principal ::= error condicion_interna CORCHETE_C 
            {
              Object RESULT =null;
		 listaErrores.get(punteroErrores).setDescripcion("Se esperaba la instruccion 'WHERE [' en la instruccion"); 
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("condicion_principal",3, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-2)), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // condicion_principal ::= error CORCHETE_A condicion_interna error 
            {
              Object RESULT =null;
		 listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo ']' para finalizar la isntruccion"); 
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("condicion_principal",3, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // condicion_interna ::= NOT ALLCHARACTERSNOSPACE operador valor_condicion condicion_secundaria 
            {
              Object RESULT =null;
		int nombreCampoleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).left;
		int nombreCamporight = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).right;
		Object nombreCampo = (Object)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).value;
		 condiciones.add(new Condicion(null, true, nombreCampo.toString(), op.toString(), val.toString())); 
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("condicion_interna",4, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-4)), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // condicion_interna ::= ALLCHARACTERSNOSPACE operador valor_condicion condicion_secundaria 
            {
              Object RESULT =null;
		int nombreCampoleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).left;
		int nombreCamporight = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).right;
		Object nombreCampo = (Object)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).value;
		 condiciones.add(new Condicion(null, false, nombreCampo.toString(), op.toString(), val.toString())); 
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("condicion_interna",4, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // condicion_interna ::= error operador valor_condicion condicion_secundaria 
            {
              Object RESULT =null;
		 listaErrores.get(punteroErrores).setDescripcion("Se esperaba un id o campo para realizar la condicion"); 
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("condicion_interna",4, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // condicion_interna ::= error valor_condicion condicion_secundaria 
            {
              Object RESULT =null;
		 listaErrores.get(punteroErrores).setDescripcion("Se esperaba un id o campo seguido de un operador relacional antes del valor consultado"); 
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("condicion_interna",4, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-2)), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // condicion_interna ::= error condicion_secundaria 
            {
              Object RESULT =null;
		 listaErrores.get(punteroErrores).setDescripcion("Hace falta una condicion antes de usar un operador logico"); 
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("condicion_interna",4, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // condicion_secundaria ::= AND ALLCHARACTERSNOSPACE operador valor_condicion condicion_secundaria 
            {
              Object RESULT =null;
		int nombreCampoleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).left;
		int nombreCamporight = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).right;
		Object nombreCampo = (Object)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).value;
		 condiciones.add(new Condicion("AND", false, nombreCampo.toString(), op.toString(), val.toString())); 
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("condicion_secundaria",5, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-4)), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // condicion_secundaria ::= OR ALLCHARACTERSNOSPACE operador valor_condicion condicion_secundaria 
            {
              Object RESULT =null;
		int nombreCampoleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).left;
		int nombreCamporight = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).right;
		Object nombreCampo = (Object)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).value;
		 condiciones.add(new Condicion("OR", false, nombreCampo.toString(), op.toString(), val.toString())); 
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("condicion_secundaria",5, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-4)), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // condicion_secundaria ::= AND NOT ALLCHARACTERSNOSPACE operador valor_condicion condicion_secundaria 
            {
              Object RESULT =null;
		int nombreCampoleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).left;
		int nombreCamporight = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).right;
		Object nombreCampo = (Object)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).value;
		 condiciones.add(new Condicion("AND", true, nombreCampo.toString(), op.toString(), val.toString())); 
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("condicion_secundaria",5, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-5)), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // condicion_secundaria ::= OR NOT ALLCHARACTERSNOSPACE operador valor_condicion condicion_secundaria 
            {
              Object RESULT =null;
		int nombreCampoleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).left;
		int nombreCamporight = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).right;
		Object nombreCampo = (Object)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-1)).value;
		 condiciones.add(new Condicion("OR", true, nombreCampo.toString(), op.toString(), val.toString())); 
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("condicion_secundaria",5, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.elementAt(CUP$ParserReportes$top-5)), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // condicion_secundaria ::= 
            {
              Object RESULT =null;

              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("condicion_secundaria",5, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operador ::= MAYOR_QUE 
            {
              Object RESULT =null;
		int opeleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).left;
		int operight = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).right;
		Object ope = (Object)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.peek()).value;
		 RESULT=ope; 
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("operador",6, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operador ::= MENOR_QUE 
            {
              Object RESULT =null;
		int opeleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).left;
		int operight = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).right;
		Object ope = (Object)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.peek()).value;
		 RESULT=ope; 
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("operador",6, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operador ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		int opeleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).left;
		int operight = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).right;
		Object ope = (Object)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.peek()).value;
		 RESULT=ope; 
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("operador",6, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operador ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		int opeleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).left;
		int operight = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).right;
		Object ope = (Object)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.peek()).value;
		 RESULT=ope; 
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("operador",6, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operador ::= DIFERENTE 
            {
              Object RESULT =null;
		int opeleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).left;
		int operight = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).right;
		Object ope = (Object)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.peek()).value;
		 RESULT=ope; 
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("operador",6, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operador ::= IGUAL 
            {
              Object RESULT =null;
		int opeleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).left;
		int operight = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).right;
		Object ope = (Object)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.peek()).value;
		 RESULT=ope; 
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("operador",6, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // valor_condicion ::= NUMERO_CONSULTA 
            {
              Object RESULT =null;
		int valCondleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).left;
		int valCondright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).right;
		Object valCond = (Object)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.peek()).value;
		 RESULT=valCond; 
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("valor_condicion",7, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // valor_condicion ::= CADENA_CONSULTA 
            {
              Object RESULT =null;
		int valCondleft = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).left;
		int valCondright = ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()).right;
		Object valCond = (Object)((java_cup.runtime.Symbol) CUP$ParserReportes$stack.peek()).value;
		 RESULT=valCond; 
              CUP$ParserReportes$result = parser.getSymbolFactory().newSymbol("valor_condicion",7, ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserReportes$stack.peek()), RESULT);
            }
          return CUP$ParserReportes$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserReportes$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserReportes$do_action(
    int                        CUP$ParserReportes$act_num,
    java_cup.runtime.lr_parser CUP$ParserReportes$parser,
    java.util.Stack            CUP$ParserReportes$stack,
    int                        CUP$ParserReportes$top)
    throws java.lang.Exception
    {
              return CUP$ParserReportes$do_action_part00000000(
                               CUP$ParserReportes$act_num,
                               CUP$ParserReportes$parser,
                               CUP$ParserReportes$stack,
                               CUP$ParserReportes$top);
    }
}

}