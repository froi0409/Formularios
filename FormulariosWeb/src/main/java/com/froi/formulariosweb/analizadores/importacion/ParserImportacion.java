
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.froi.formulariosweb.analizadores.importacion;

import com.froi.formulariosweb.entidades.Advertencia;
import com.froi.formulariosweb.entidadesfundamentales.Componente;
import com.froi.formulariosweb.entidadesfundamentales.Formulario;
import java.util.ArrayList;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserImportacion extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserImportacionSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserImportacion() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserImportacion(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserImportacion(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\002\006\000\002\002" +
    "\006\000\002\002\006\000\002\002\006\000\002\002\006" +
    "\000\002\003\005\000\002\003\003\000\002\004\005\000" +
    "\002\004\005\000\002\005\005\000\002\005\003\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\007\000\002\007\005\000\002\007\003" +
    "\000\002\010\005\000\002\010\005\000\002\011\005\000" +
    "\002\011\003\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\014\003\000\002\014\003" +
    "\000\002\015\003\000\002\015\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\020\003\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\006\003\004\012\005\001\002\000\004\004" +
    "\164\001\002\000\006\003\010\004\011\001\002\000\004" +
    "\002\007\001\002\000\004\002\001\001\002\000\004\006" +
    "\015\001\002\000\006\003\013\006\015\001\002\000\010" +
    "\003\ufffa\005\ufffa\011\160\001\002\000\004\005\157\001" +
    "\002\000\006\003\155\005\156\001\002\000\016\003\021" +
    "\013\023\014\017\015\025\016\016\020\022\001\002\000" +
    "\004\010\153\001\002\000\004\010\151\001\002\000\006" +
    "\007\ufff6\011\147\001\002\000\004\007\146\001\002\000" +
    "\004\010\064\001\002\000\004\010\062\001\002\000\004" +
    "\007\061\001\002\000\004\010\026\001\002\000\054\030" +
    "\057\034\033\035\055\036\046\037\054\040\037\041\043" +
    "\042\056\043\060\046\051\047\050\050\045\051\053\053" +
    "\040\054\031\055\044\056\027\057\052\060\030\061\042" +
    "\062\032\001\002\000\006\007\uffcf\011\uffcf\001\002\000" +
    "\006\007\uffcd\011\uffcd\001\002\000\006\007\uffd1\011\uffd1" +
    "\001\002\000\006\007\uffcb\011\uffcb\001\002\000\006\007" +
    "\uffd4\011\uffd4\001\002\000\006\007\ufff3\011\ufff3\001\002" +
    "\000\006\007\uffd8\011\uffd8\001\002\000\006\007\uffd7\011" +
    "\uffd7\001\002\000\006\007\uffca\011\uffca\001\002\000\006" +
    "\007\uffd2\011\uffd2\001\002\000\006\007\uffda\011\uffda\001" +
    "\002\000\006\007\uffcc\011\uffcc\001\002\000\006\007\uffc9" +
    "\011\uffc9\001\002\000\006\007\uffd0\011\uffd0\001\002\000" +
    "\006\007\uffdc\011\uffdc\001\002\000\006\007\uffc6\011\uffc6" +
    "\001\002\000\006\007\uffd9\011\uffd9\001\002\000\006\007" +
    "\uffdd\011\uffdd\001\002\000\006\007\uffdb\011\uffdb\001\002" +
    "\000\006\007\uffce\011\uffce\001\002\000\006\007\uffdf\011" +
    "\uffdf\001\002\000\006\007\uffc5\011\uffc5\001\002\000\006" +
    "\007\uffd3\011\uffd3\001\002\000\006\007\uffc8\011\uffc8\001" +
    "\002\000\006\007\uffde\011\uffde\001\002\000\006\007\uffc7" +
    "\011\uffc7\001\002\000\010\003\ufff9\005\ufff9\011\ufff9\001" +
    "\002\000\004\046\063\001\002\000\006\007\ufff5\011\ufff5" +
    "\001\002\000\004\004\065\001\002\000\004\006\070\001" +
    "\002\000\004\005\145\001\002\000\006\005\uffef\011\143" +
    "\001\002\000\032\003\105\021\101\023\103\024\076\025" +
    "\106\026\071\027\100\030\073\031\072\032\077\033\104" +
    "\045\075\001\002\000\004\010\141\001\002\000\004\010" +
    "\137\001\002\000\004\010\135\001\002\000\004\007\134" +
    "\001\002\000\004\010\132\001\002\000\004\010\130\001" +
    "\002\000\004\010\126\001\002\000\004\010\122\001\002" +
    "\000\004\010\120\001\002\000\006\007\uffeb\011\116\001" +
    "\002\000\004\010\114\001\002\000\004\010\112\001\002" +
    "\000\004\007\111\001\002\000\004\010\107\001\002\000" +
    "\012\040\037\041\043\042\056\043\060\001\002\000\006" +
    "\007\uffe5\011\uffe5\001\002\000\006\005\uffed\011\uffed\001" +
    "\002\000\054\030\057\034\033\035\055\036\046\037\054" +
    "\040\037\041\043\042\056\043\060\046\051\047\050\050" +
    "\045\051\053\053\040\054\031\055\044\056\027\057\052" +
    "\060\030\061\042\062\032\001\002\000\006\007\uffe0\011" +
    "\uffe0\001\002\000\022\053\040\054\031\055\044\056\027" +
    "\057\052\060\030\061\042\062\032\001\002\000\006\007" +
    "\uffe8\011\uffe8\001\002\000\030\021\101\023\103\024\076" +
    "\025\106\026\071\027\100\030\073\031\072\032\077\033" +
    "\104\045\075\001\002\000\004\007\uffec\001\002\000\004" +
    "\047\121\001\002\000\006\007\uffe6\011\uffe6\001\002\000" +
    "\056\030\057\034\033\035\055\036\046\037\054\040\037" +
    "\041\043\042\056\043\060\046\051\047\050\050\045\051" +
    "\053\052\124\053\040\054\031\055\044\056\027\057\052" +
    "\060\030\061\042\062\032\001\002\000\006\007\uffe7\011" +
    "\uffe7\001\002\000\006\007\uffd6\011\uffd6\001\002\000\006" +
    "\007\uffd5\011\uffd5\001\002\000\004\047\127\001\002\000" +
    "\006\007\uffe1\011\uffe1\001\002\000\006\036\046\037\054" +
    "\001\002\000\006\007\uffe4\011\uffe4\001\002\000\004\046" +
    "\133\001\002\000\006\007\uffea\011\uffea\001\002\000\006" +
    "\005\uffee\011\uffee\001\002\000\004\030\136\001\002\000" +
    "\006\007\uffe3\011\uffe3\001\002\000\004\047\140\001\002" +
    "\000\006\007\uffe2\011\uffe2\001\002\000\054\030\057\034" +
    "\033\035\055\036\046\037\054\040\037\041\043\042\056" +
    "\043\060\046\051\047\050\050\045\051\053\053\040\054" +
    "\031\055\044\056\027\057\052\060\030\061\042\062\032" +
    "\001\002\000\006\007\uffe9\011\uffe9\001\002\000\004\006" +
    "\070\001\002\000\004\005\ufff0\001\002\000\006\007\ufff1" +
    "\011\ufff1\001\002\000\010\003\ufff8\005\ufff8\011\ufff8\001" +
    "\002\000\014\013\023\014\017\015\025\016\016\020\022" +
    "\001\002\000\004\007\ufff7\001\002\000\056\030\057\034" +
    "\033\035\055\036\046\037\054\040\037\041\043\042\056" +
    "\043\060\046\051\047\050\050\045\051\053\052\124\053" +
    "\040\054\031\055\044\056\027\057\052\060\030\061\042" +
    "\062\032\001\002\000\006\007\ufff4\011\ufff4\001\002\000" +
    "\006\034\033\035\055\001\002\000\006\007\ufff2\011\ufff2" +
    "\001\002\000\004\002\ufffc\001\002\000\004\002\000\001" +
    "\002\000\004\002\ufffd\001\002\000\004\006\015\001\002" +
    "\000\006\003\ufffb\005\ufffb\001\002\000\004\005\163\001" +
    "\002\000\004\002\ufffe\001\002\000\004\006\015\001\002" +
    "\000\004\005\166\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\161\004\011\001\001\000\006\003\013\004\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\023\006\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\013\033\015\040\016\046\017\034\020\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\065\010\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\073\012" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\013\112\015" +
    "\040\016\046\017\034\020\035\001\001\000\002\001\001" +
    "\000\004\016\114\001\001\000\002\001\001\000\006\011" +
    "\116\012\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\013\124\014\122\015\040\016" +
    "\046\017\034\020\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\013\141\015\040\016\046\017\034\020\035\001" +
    "\001\000\002\001\001\000\006\007\143\010\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\147\006\017\001\001\000\002\001\001\000\016" +
    "\013\124\014\151\015\040\016\046\017\034\020\035\001" +
    "\001\000\002\001\001\000\004\015\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\160\004\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\164\004" +
    "\011\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserImportacion$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserImportacion$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserImportacion$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private ArrayList<Advertencia> listaErrores;
    private ArrayList<Formulario> listaFormularios;
    private ArrayList<Componente> listaComponentes;
    private String c1, c2, c3, c4, c5, c6;
    private String p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12;
    
    public ParserImportacion(ImportacionLexer lexer, ArrayList<Formulario> listaFormularios, ArrayList<Advertencia> listaErrores) {
        super(lexer);
        this.listaErrores = listaErrores;
        this.listaFormularios = listaFormularios;
        this.listaComponentes = new ArrayList<>();
    }
    public void report_error(String message, Object info) {
        System.out.println("reporterror");
    }
    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal " + info);
    }
    @Override
    public void syntax_error(Symbol s) {
        System.out.println("linea: " + s.left + "   columna: " + s.right);
        Advertencia advert = new Advertencia((String)s.value, s.left, s.right, "Sintáctico", "error sintáctico");
        listaErrores.add(advert);
    }
    protected int error_sync_size() {
        return 1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserImportacion$actions {
  private final ParserImportacion parser;

  /** Constructor */
  CUP$ParserImportacion$actions(ParserImportacion parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserImportacion$do_action_part00000000(
    int                        CUP$ParserImportacion$act_num,
    java_cup.runtime.lr_parser CUP$ParserImportacion$parser,
    java.util.Stack            CUP$ParserImportacion$stack,
    int                        CUP$ParserImportacion$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserImportacion$result;

      /* select the action based on the action number */
      switch (CUP$ParserImportacion$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-1)).value;
		RESULT = start_val;
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-1)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserImportacion$parser.done_parsing();
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= NEW_FORMULARIO PARENT_A instruccion_formulario PARENT_C 
            {
              Object RESULT =null;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-3)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error PARENT_A instruccion_formulario PARENT_C 
            {
              Object RESULT =null;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-3)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= NEW_FORMULARIO error instruccion_formulario PARENT_C 
            {
              Object RESULT =null;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-3)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= NEW_FORMULARIO PARENT_A error PARENT_C 
            {
              Object RESULT =null;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-3)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inicio ::= NEW_FORMULARIO PARENT_A instruccion_formulario error 
            {
              Object RESULT =null;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-3)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion_formulario ::= valores_formulario COMA instruccion_formulario 
            {
              Object RESULT =null;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("instruccion_formulario",1, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion_formulario ::= valores_formulario 
            {
              Object RESULT =null;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("instruccion_formulario",1, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // valores_formulario ::= LLAVE_A accion_formulario LLAVE_C 
            {
              Object RESULT =null;
		
                                                                    System.out.println("Se detectó un formulario nuevo");
                                                                    c1 = (c1.substring(1, c1.length()-1));
                                                                    c2 = (c2.substring(1, c2.length()-1));
                                                                    c3 = (c3.substring(1, c3.length()-1));
                                                                    c4 = (c4.substring(1, c4.length()-1));
                                                                    Formulario form = new Formulario(c1, c2, c3, c4);
                                                                    form.setListaComponentes((ArrayList<Componente>) listaComponentes.clone());
                                                                    System.out.println("CATIDAD DE COMPONENTES EN GRAMATICA: " + listaComponentes.size());
                                                                    listaFormularios.add(form);
                                                                    listaComponentes.clear();
                                                                    c1 = null; c2 = null; c3 = null; c4 = null; c5 = null; c6 = null;
                                                                
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("valores_formulario",2, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // valores_formulario ::= LLAVE_A error LLAVE_C 
            {
              Object RESULT =null;
		 listaComponentes.clear();
                                                                    c1 = null; c2 = null; c3 = null; c4 = null; c5 = null; c6 = null; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("valores_formulario",2, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // accion_formulario ::= opciones_formulario COMA accion_formulario 
            {
              Object RESULT =null;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("accion_formulario",3, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // accion_formulario ::= opciones_formulario 
            {
              Object RESULT =null;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("accion_formulario",3, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // opciones_formulario ::= ID_FORMULARIO PUNTOS IDENTIFICADOR 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 c1 = ent.toString(); 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("opciones_formulario",4, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // opciones_formulario ::= TITULO PUNTOS tipos_entrada_complete 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 c2 = ent.toString(); 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("opciones_formulario",4, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // opciones_formulario ::= NOMBRE PUNTOS tipos_entrada 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 c3 = ent.toString(); 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("opciones_formulario",4, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // opciones_formulario ::= TEMA PUNTOS temas 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 c4 = ent.toString(); 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("opciones_formulario",4, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // opciones_formulario ::= ESTRUCTURA PUNTOS PARENT_A estructura_formulario_p PARENT_C 
            {
              Object RESULT =null;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("opciones_formulario",4, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-4)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // estructura_formulario_p ::= estructura_formulario COMA estructura_formulario_p 
            {
              Object RESULT =null;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("estructura_formulario_p",5, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // estructura_formulario_p ::= estructura_formulario 
            {
              Object RESULT =null;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("estructura_formulario_p",5, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // estructura_formulario ::= LLAVE_A instruccion_estructura_formulario LLAVE_C 
            {
              Object RESULT =null;
		
                                                                                        int pApoyo12 = Integer.parseInt(p12.substring(1, p12.length()-1));
                                                                                        p1 = (p1.substring(1, p1.length()-1));
                                                                                        p4 = (p4.substring(1, p4.length()-1));
                                                                                        p5 = (p5.substring(1, p5.length()-1));
                                                                                        System.out.println("Probando p1");
                                                                                        System.out.println(p1);
                                                                                        String idForm = c1.substring(1, c1.length()-1);
                                                                                        System.out.println(idForm);
                                                                                        Componente compo = new Componente(pApoyo12, p1, idForm, p4, p5);
                                                                                        if(p2 != null) {
                                                                                            compo.setNombreCampo(p2.substring(1, p2.length()-1));
                                                                                        }
                                                                                        if(p6 != null) {
                                                                                            compo.setAlineacion(p6.substring(1, p6.length()-1));
                                                                                        }
                                                                                        if(p7 != null) {
                                                                                            compo.setRequerido(p7.substring(1, p7.length()-1));
                                                                                            }
                                                                                        if(p8 != null) {
                                                                                            compo.setOpciones(p8.substring(1, p8.length()-1));
                                                                                        }
                                                                                        if(p9 != null) {
                                                                                            compo.setFilas(Integer.parseInt(p9.substring(1, p9.length()-1)));
                                                                                        }
                                                                                        if(p10 != null) {
                                                                                            compo.setColumnas(Integer.parseInt(p10.substring(1, p10.length()-1)));
                                                                                        }
                                                                                        if(p11 != null) {
                                                                                            compo.setUrl(p11.substring(1, p11.length()-1));
                                                                                        }
                                                                                        
                                                                                        listaComponentes.add(compo);
                                                                                        p1 = null; p2 = null; p3 = null; p4 = null; p5 = null; p6 = null; p7 = null; p8 = null; p9 = null; p10 = null; p11 = null; p12 = null;
                                                                                    
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("estructura_formulario",6, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // estructura_formulario ::= LLAVE_A error LLAVE_C 
            {
              Object RESULT =null;
		 p1 = null; p2 = null; p3 = null; p4 = null; p5 = null; p6 = null; p7 = null; p8 = null; p9 = null; p10 = null; p11 = null; p12 = null; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("estructura_formulario",6, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion_estructura_formulario ::= opciones_estructura_formulario COMA instruccion_estructura_formulario 
            {
              Object RESULT =null;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("instruccion_estructura_formulario",7, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion_estructura_formulario ::= opciones_estructura_formulario 
            {
              Object RESULT =null;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("instruccion_estructura_formulario",7, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // opciones_estructura_formulario ::= ID_COMPONENTE_N PUNTOS IDENTIFICADOR 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 p1 = ent.toString(); 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("opciones_estructura_formulario",8, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // opciones_estructura_formulario ::= NOMBRE_CAMPO PUNTOS tipos_entrada 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 p2 = ent.toString(); 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("opciones_estructura_formulario",8, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // opciones_estructura_formulario ::= CLASE PUNTOS clases 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 p4 = ent.toString(); 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("opciones_estructura_formulario",8, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // opciones_estructura_formulario ::= TEXTO_VISIBLE PUNTOS tipos_entrada_complete 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 p5 = ent.toString(); 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("opciones_estructura_formulario",8, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // opciones_estructura_formulario ::= INDICE PUNTOS NUMERO 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 p12 = ent.toString(); 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("opciones_estructura_formulario",8, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // opciones_estructura_formulario ::= ALINEACION PUNTOS alineacion 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 p6 = ent.toString(); 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("opciones_estructura_formulario",8, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // opciones_estructura_formulario ::= REQUERIDO PUNTOS required 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 p7 = ent.toString(); 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("opciones_estructura_formulario",8, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // opciones_estructura_formulario ::= OPCIONES PUNTOS OPCIONES 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 p8 = ent.toString(); 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("opciones_estructura_formulario",8, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // opciones_estructura_formulario ::= FILAS PUNTOS NUMERO 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 p9 = ent.toString(); 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("opciones_estructura_formulario",8, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // opciones_estructura_formulario ::= COLUMNAS PUNTOS NUMERO 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 p10 = ent.toString(); 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("opciones_estructura_formulario",8, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // opciones_estructura_formulario ::= URL PUNTOS tipos_entrada 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 p11 = ent.toString(); 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("opciones_estructura_formulario",8, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipos_entrada ::= ALLCHARACTERSNOSPACE 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("tipos_entrada",9, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipos_entrada ::= OPCIONES 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("tipos_entrada",9, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipos_entrada ::= NUMERO 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("tipos_entrada",9, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipos_entrada ::= FECHA 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("tipos_entrada",9, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tipos_entrada ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("tipos_entrada",9, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipos_entrada ::= temas 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("tipos_entrada",9, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipos_entrada ::= clases 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("tipos_entrada",9, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipos_entrada ::= alineacion 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("tipos_entrada",9, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipos_entrada ::= required 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("tipos_entrada",9, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tipos_entrada_complete ::= ALLCHARACTERS 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("tipos_entrada_complete",10, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipos_entrada_complete ::= tipos_entrada 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("tipos_entrada_complete",10, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // temas ::= DARK 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("temas",11, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // temas ::= WHITE 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("temas",11, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // clases ::= CAMPO_TEXTO 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("clases",12, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // clases ::= AREA_TEXTO 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("clases",12, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // clases ::= CHECKBOX 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("clases",12, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // clases ::= RADIO 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("clases",12, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // clases ::= FICHERO 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("clases",12, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // clases ::= IMAGEN 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("clases",12, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // clases ::= COMBO 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("clases",12, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // clases ::= BOTON 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("clases",12, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // alineacion ::= CENTRO 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("alineacion",13, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // alineacion ::= IZQUIERDA 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("alineacion",13, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // alineacion ::= DERECHA 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("alineacion",13, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // alineacion ::= JUSTIFICAR 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("alineacion",13, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // required ::= SI 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("required",14, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // required ::= NO 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("required",14, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserImportacion$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserImportacion$do_action(
    int                        CUP$ParserImportacion$act_num,
    java_cup.runtime.lr_parser CUP$ParserImportacion$parser,
    java.util.Stack            CUP$ParserImportacion$stack,
    int                        CUP$ParserImportacion$top)
    throws java.lang.Exception
    {
              return CUP$ParserImportacion$do_action_part00000000(
                               CUP$ParserImportacion$act_num,
                               CUP$ParserImportacion$parser,
                               CUP$ParserImportacion$stack,
                               CUP$ParserImportacion$top);
    }
}

}