// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: LexemasSolicitudes.jflex

package com.froi.pruebasgramaticas;
import java_cup.runtime.*;
import static com.froi.pruebasgramaticas.sym.*;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class SolicitudesLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\2\1\1\0\2\1\22\0\1\2\1\3\1\4"+
    "\1\0\1\5\7\0\1\6\1\7\2\0\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\14\2\15\1\16\1\17"+
    "\1\0\1\20\1\21\1\22\2\0\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\0\1\56\1\0\1\57\1\0\1\60\1\53\1\61"+
    "\1\62\1\63\1\64\1\53\1\65\1\66\1\53\1\67"+
    "\1\70\1\53\1\71\1\72\2\53\1\73\1\74\1\75"+
    "\1\76\5\53\1\77\1\100\1\101\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\2\1\1\11\1\12\1\13\1\14\32\0"+
    "\1\15\1\0\1\16\1\17\1\20\74\0\1\21\6\0"+
    "\1\22\7\0\1\23\56\0\1\24\25\0\1\25\22\0"+
    "\1\26\16\0\1\27\3\0\1\30\1\0\1\31\7\0"+
    "\1\32\14\0\1\33\4\0\1\34\11\0\1\35\13\0"+
    "\1\36\1\37\4\0\1\40\10\0\1\41\22\0\1\42"+
    "\3\0\1\43\15\0\1\44\3\0\1\45\4\0\1\46"+
    "\1\47\16\0\1\50\1\0\1\51\24\0\1\52\7\0"+
    "\1\53\7\0\1\54\1\55\11\0\1\56\1\57\17\0"+
    "\1\60\25\0\1\61\1\62\15\0\1\63\14\0\1\64"+
    "\6\0\1\65\7\0\1\66\2\0\1\67\1\70\1\71"+
    "\6\0\1\72\5\0\1\73\5\0\1\74\13\0\1\75"+
    "\5\0\1\76\4\0\1\77\2\0\1\100\7\0\1\101"+
    "\2\0\1\102\3\0\1\103\5\0\1\104\1\105\4\0"+
    "\1\106\1\107\1\110\2\0\1\111\1\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[572];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\102\0\102\0\204\0\102\0\102\0\102"+
    "\0\102\0\102\0\306\0\u0108\0\102\0\102\0\102\0\102"+
    "\0\u014a\0\u018c\0\u01ce\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318"+
    "\0\u035a\0\u039c\0\u03de\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528"+
    "\0\u056a\0\u05ac\0\u05ee\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738"+
    "\0\u077a\0\u07bc\0\102\0\u07fe\0\102\0\102\0\102\0\u0840"+
    "\0\u0882\0\u08c4\0\u0906\0\u0948\0\u098a\0\u09cc\0\u0a0e\0\u0a50"+
    "\0\u0a92\0\u0ad4\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e\0\u0c60"+
    "\0\u0ca2\0\u0ce4\0\u0d26\0\u0d68\0\u0daa\0\u0dec\0\u0e2e\0\u0e70"+
    "\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78\0\u0fba\0\u0ffc\0\u103e\0\u1080"+
    "\0\u10c2\0\u1104\0\u1146\0\u1188\0\u11ca\0\u120c\0\u124e\0\u1290"+
    "\0\u12d2\0\u1314\0\u1356\0\u1398\0\u13da\0\u141c\0\u145e\0\u14a0"+
    "\0\u14e2\0\u1524\0\u1566\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u16b0"+
    "\0\u16f2\0\u1734\0\u1776\0\102\0\u17b8\0\u17fa\0\u183c\0\u187e"+
    "\0\u18c0\0\u1902\0\102\0\u1944\0\u1986\0\u19c8\0\u1a0a\0\u1a4c"+
    "\0\u1a8e\0\u1ad0\0\102\0\u1b12\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a"+
    "\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64\0\u1da6\0\u1de8\0\u1e2a"+
    "\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32\0\u1f74\0\u1fb6\0\u1ff8\0\u203a"+
    "\0\u207c\0\u20be\0\u2100\0\u2142\0\u2184\0\u21c6\0\u2208\0\u224a"+
    "\0\u228c\0\u22ce\0\u2310\0\u2352\0\u2394\0\u23d6\0\u2418\0\u245a"+
    "\0\u249c\0\u24de\0\u2520\0\u2562\0\u25a4\0\u25e6\0\u2628\0\u266a"+
    "\0\u26ac\0\102\0\u26ee\0\u2730\0\u2772\0\u27b4\0\u27f6\0\u2838"+
    "\0\u287a\0\u28bc\0\u28fe\0\u2940\0\u2982\0\u29c4\0\u2a06\0\u2a48"+
    "\0\u2a8a\0\u2acc\0\u2b0e\0\u2b50\0\u2b92\0\u2bd4\0\u2c16\0\102"+
    "\0\u2c58\0\u2c9a\0\u2cdc\0\u2d1e\0\u2d60\0\u2da2\0\u2de4\0\u2e26"+
    "\0\u2e68\0\u2eaa\0\u2eec\0\u2f2e\0\u2f70\0\u2fb2\0\u2ff4\0\u3036"+
    "\0\u3078\0\u30ba\0\102\0\u30fc\0\u313e\0\u3180\0\u31c2\0\u3204"+
    "\0\u3246\0\u3288\0\u32ca\0\u330c\0\u334e\0\u3390\0\u33d2\0\u3414"+
    "\0\u3456\0\102\0\u3498\0\u34da\0\u351c\0\102\0\u355e\0\102"+
    "\0\u35a0\0\u35e2\0\u3624\0\u3666\0\u36a8\0\u36ea\0\u372c\0\102"+
    "\0\u376e\0\u37b0\0\u37f2\0\u3834\0\u3876\0\u38b8\0\u38fa\0\u393c"+
    "\0\u397e\0\u39c0\0\u3a02\0\u3a44\0\102\0\u3a86\0\u3ac8\0\u3b0a"+
    "\0\u3b4c\0\102\0\u3b8e\0\u3bd0\0\u3c12\0\u3c54\0\u3c96\0\u3cd8"+
    "\0\u3d1a\0\u3d5c\0\u3d9e\0\102\0\u3de0\0\u3e22\0\u3e64\0\u3ea6"+
    "\0\u3ee8\0\u3f2a\0\u3f6c\0\u3fae\0\u3ff0\0\u4032\0\u4074\0\102"+
    "\0\102\0\u40b6\0\u40f8\0\u413a\0\u417c\0\102\0\u41be\0\u4200"+
    "\0\u4242\0\u4284\0\u42c6\0\u4308\0\u434a\0\u438c\0\102\0\u43ce"+
    "\0\u4410\0\u4452\0\u4494\0\u44d6\0\u4518\0\u455a\0\u459c\0\u45de"+
    "\0\u4620\0\u4662\0\u46a4\0\u46e6\0\u4728\0\u476a\0\u47ac\0\u47ee"+
    "\0\u4830\0\102\0\u4872\0\u48b4\0\u48f6\0\102\0\u4938\0\u497a"+
    "\0\u49bc\0\u49fe\0\u4a40\0\u4a82\0\u4ac4\0\u4b06\0\u4b48\0\u4b8a"+
    "\0\u4bcc\0\u4c0e\0\u4c50\0\102\0\u4c92\0\u4cd4\0\u4d16\0\102"+
    "\0\u4d58\0\u4d9a\0\u4ddc\0\u4e1e\0\102\0\102\0\u4e60\0\u4ea2"+
    "\0\u4ee4\0\u4f26\0\u4f68\0\u4faa\0\u4fec\0\u502e\0\u5070\0\u50b2"+
    "\0\u50f4\0\u5136\0\u5178\0\u51ba\0\102\0\u51fc\0\102\0\u523e"+
    "\0\u5280\0\u52c2\0\u5304\0\u5346\0\u5388\0\u53ca\0\u540c\0\u544e"+
    "\0\u5490\0\u54d2\0\u5514\0\u5556\0\u5598\0\u55da\0\u561c\0\u565e"+
    "\0\u56a0\0\u56e2\0\u5724\0\102\0\u5766\0\u57a8\0\u57ea\0\u582c"+
    "\0\u586e\0\u58b0\0\u58f2\0\102\0\u5934\0\u5976\0\u59b8\0\u59fa"+
    "\0\u5a3c\0\u5a7e\0\u5ac0\0\102\0\102\0\u5b02\0\u5b44\0\u5b86"+
    "\0\u5bc8\0\u5c0a\0\u5c4c\0\u5c8e\0\u5cd0\0\u5d12\0\102\0\102"+
    "\0\u5d54\0\u5d96\0\u5dd8\0\u5e1a\0\u5e5c\0\u5e9e\0\u5ee0\0\u5f22"+
    "\0\u5f64\0\u5fa6\0\u5fe8\0\u602a\0\u606c\0\u60ae\0\u60f0\0\102"+
    "\0\u6132\0\u6174\0\u61b6\0\u61f8\0\u623a\0\u627c\0\u62be\0\u6300"+
    "\0\u6342\0\u6384\0\u63c6\0\u6408\0\u644a\0\u648c\0\u64ce\0\u6510"+
    "\0\u6552\0\u6594\0\u65d6\0\u6618\0\u665a\0\u669c\0\u66de\0\u6720"+
    "\0\u6762\0\u67a4\0\u67e6\0\u6828\0\u686a\0\u68ac\0\u68ee\0\u6930"+
    "\0\u6972\0\u69b4\0\u69f6\0\u6a38\0\102\0\u6a7a\0\u6abc\0\u6afe"+
    "\0\u6b40\0\u6b82\0\u6bc4\0\u6c06\0\u6c48\0\u6c8a\0\u6ccc\0\u6d0e"+
    "\0\u6d50\0\102\0\u6d92\0\u6dd4\0\u6e16\0\u6e58\0\u6e9a\0\u6edc"+
    "\0\102\0\u6f1e\0\u6f60\0\u6fa2\0\u6fe4\0\u7026\0\u7068\0\u70aa"+
    "\0\102\0\u70ec\0\u712e\0\102\0\102\0\102\0\u7170\0\u71b2"+
    "\0\u71f4\0\u7236\0\u7278\0\u72ba\0\102\0\u72fc\0\u733e\0\u7380"+
    "\0\u73c2\0\u7404\0\102\0\u7446\0\u7488\0\u74ca\0\u750c\0\u754e"+
    "\0\102\0\u7590\0\u75d2\0\u7614\0\u7656\0\u7698\0\u76da\0\u771c"+
    "\0\u775e\0\u77a0\0\u77e2\0\u7824\0\102\0\u7866\0\u78a8\0\u78ea"+
    "\0\u792c\0\u796e\0\102\0\u79b0\0\u79f2\0\u7a34\0\u7a76\0\102"+
    "\0\u7ab8\0\u7afa\0\102\0\u7b3c\0\u7b7e\0\u7bc0\0\u7c02\0\u7c44"+
    "\0\u7c86\0\u7cc8\0\102\0\u7d0a\0\u7d4c\0\102\0\u7d8e\0\u7dd0"+
    "\0\u7e12\0\102\0\u7e54\0\u7e96\0\u7ed8\0\u7f1a\0\u7f5c\0\102"+
    "\0\102\0\u7f9e\0\u7fe0\0\u8022\0\u8064\0\102\0\102\0\102"+
    "\0\u80a6\0\u80e8\0\102\0\102";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[572];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\2\1\6\10\2\1\7"+
    "\1\10\1\11\1\12\5\2\1\13\2\2\1\14\21\2"+
    "\1\15\1\16\5\2\1\13\1\2\1\14\10\2\1\17"+
    "\1\3\1\20\102\0\1\21\1\22\1\23\1\21\1\0"+
    "\1\24\1\21\1\24\2\25\5\26\4\21\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\2\22\1\35\1\36\1\22"+
    "\1\37\1\40\1\41\1\42\1\43\1\22\1\44\1\45"+
    "\1\46\1\47\1\22\1\50\3\22\2\21\1\24\17\22"+
    "\1\21\1\23\1\21\33\0\1\51\32\0\1\51\53\0"+
    "\1\52\30\0\1\52\10\0\2\21\1\0\1\21\1\53"+
    "\73\21\1\0\2\21\1\22\1\23\1\21\1\53\3\21"+
    "\7\22\4\21\32\22\3\21\17\22\1\21\1\54\1\21"+
    "\1\0\2\23\1\0\1\55\3\0\7\23\4\0\32\23"+
    "\3\0\17\23\1\0\1\54\1\0\2\21\1\0\1\21"+
    "\1\56\1\24\1\21\10\24\4\21\32\24\2\21\20\24"+
    "\1\21\1\0\2\21\1\22\1\23\1\21\1\57\3\21"+
    "\7\25\4\21\32\22\3\21\17\22\1\21\1\54\2\21"+
    "\1\22\1\23\1\21\1\57\3\21\7\60\4\21\32\22"+
    "\3\21\17\22\1\21\1\54\2\21\1\22\1\23\1\21"+
    "\1\53\3\21\7\22\4\21\6\22\1\61\4\22\1\62"+
    "\5\22\1\63\10\22\3\21\17\22\1\21\1\54\2\21"+
    "\1\22\1\23\1\21\1\53\3\21\7\22\4\21\16\22"+
    "\1\64\13\22\3\21\17\22\1\21\1\54\2\21\1\22"+
    "\1\23\1\21\1\53\3\21\7\22\4\21\1\65\3\22"+
    "\1\66\2\22\1\67\3\22\1\70\2\22\1\71\2\22"+
    "\1\72\10\22\3\21\17\22\1\21\1\54\2\21\1\22"+
    "\1\23\1\21\1\53\3\21\7\22\4\21\4\22\1\73"+
    "\25\22\3\21\1\74\16\22\1\21\1\54\2\21\1\22"+
    "\1\23\1\21\1\53\3\21\7\22\4\21\13\22\1\75"+
    "\16\22\3\21\17\22\1\21\1\54\2\21\1\22\1\23"+
    "\1\21\1\53\3\21\7\22\4\21\4\22\1\76\3\22"+
    "\1\77\5\22\1\100\13\22\3\21\17\22\1\21\1\54"+
    "\2\21\1\22\1\23\1\21\1\53\3\21\7\22\4\21"+
    "\3\22\1\101\10\22\1\102\1\103\13\22\1\104\3\21"+
    "\17\22\1\21\1\54\2\21\1\22\1\23\1\21\1\53"+
    "\3\21\7\22\4\21\24\22\1\105\5\22\3\21\17\22"+
    "\1\21\1\54\2\21\1\22\1\23\1\21\1\53\3\21"+
    "\7\22\4\21\16\22\1\106\13\22\3\21\17\22\1\21"+
    "\1\54\2\21\1\22\1\23\1\21\1\53\3\21\7\22"+
    "\4\21\16\22\1\107\13\22\3\21\17\22\1\21\1\54"+
    "\2\21\1\22\1\23\1\21\1\53\3\21\7\22\4\21"+
    "\16\22\1\110\5\22\1\111\5\22\3\21\17\22\1\21"+
    "\1\54\2\21\1\22\1\23\1\21\1\53\3\21\7\22"+
    "\4\21\17\22\1\112\12\22\3\21\17\22\1\21\1\54"+
    "\2\21\1\22\1\23\1\21\1\53\3\21\7\22\4\21"+
    "\1\113\31\22\3\21\17\22\1\21\1\54\2\21\1\22"+
    "\1\23\1\21\1\53\3\21\7\22\4\21\1\114\3\22"+
    "\1\115\25\22\3\21\17\22\1\21\1\54\2\21\1\22"+
    "\1\23\1\21\1\53\3\21\7\22\4\21\10\22\1\116"+
    "\21\22\3\21\17\22\1\21\1\54\2\21\1\22\1\23"+
    "\1\21\1\53\3\21\7\22\4\21\4\22\1\117\3\22"+
    "\1\120\21\22\3\21\17\22\1\21\1\54\2\21\1\22"+
    "\1\23\1\21\1\53\3\21\7\22\4\21\21\22\1\121"+
    "\1\122\7\22\3\21\17\22\1\21\1\54\2\21\1\22"+
    "\1\23\1\21\1\53\3\21\7\22\4\21\32\22\3\21"+
    "\5\22\1\123\11\22\1\21\1\54\1\21\40\0\1\124"+
    "\30\0\1\124\43\0\1\125\32\0\1\125\14\0\2\126"+
    "\1\0\1\55\3\0\7\54\4\0\32\54\3\0\17\54"+
    "\1\0\1\127\1\0\1\21\1\22\1\23\1\21\1\57"+
    "\3\21\7\130\4\21\32\22\3\21\17\22\1\21\1\54"+
    "\2\21\1\22\1\23\1\21\1\53\3\21\7\22\4\21"+
    "\21\22\1\131\10\22\3\21\17\22\1\21\1\54\2\21"+
    "\1\22\1\23\1\21\1\53\3\21\7\22\4\21\10\22"+
    "\1\132\21\22\3\21\17\22\1\21\1\54\2\21\1\22"+
    "\1\23\1\21\1\53\3\21\7\22\4\21\4\22\1\133"+
    "\25\22\3\21\17\22\1\21\1\54\2\21\1\22\1\23"+
    "\1\21\1\53\3\21\7\22\4\21\23\22\1\134\6\22"+
    "\3\21\17\22\1\21\1\54\2\21\1\22\1\23\1\21"+
    "\1\53\3\21\7\22\4\21\14\22\1\135\15\22\3\21"+
    "\17\22\1\21\1\54\2\21\1\22\1\23\1\21\1\53"+
    "\3\21\7\22\4\21\15\22\1\136\14\22\3\21\17\22"+
    "\1\21\1\54\2\21\1\22\1\23\1\21\1\53\3\21"+
    "\7\22\4\21\4\22\1\137\25\22\3\21\17\22\1\21"+
    "\1\54\2\21\1\22\1\23\1\21\1\53\3\21\7\22"+
    "\4\21\1\140\31\22\3\21\17\22\1\21\1\54\2\21"+
    "\1\22\1\23\1\21\1\53\3\21\7\22\4\21\13\22"+
    "\1\141\1\142\1\143\14\22\3\21\17\22\1\21\1\54"+
    "\2\21\1\22\1\23\1\21\1\53\3\21\7\22\4\21"+
    "\4\22\1\144\25\22\3\21\17\22\1\21\1\54\2\21"+
    "\1\22\1\23\1\21\1\53\3\21\7\22\4\21\21\22"+
    "\1\145\10\22\3\21\17\22\1\21\1\54\2\21\1\22"+
    "\1\23\1\21\1\53\3\21\7\22\4\21\32\22\3\21"+
    "\13\22\1\146\3\22\1\21\1\54\2\21\1\22\1\23"+
    "\1\21\1\53\3\21\7\22\4\21\10\22\1\147\21\22"+
    "\3\21\17\22\1\21\1\54\2\21\1\22\1\23\1\21"+
    "\1\53\3\21\7\22\4\21\2\22\1\150\27\22\3\21"+
    "\17\22\1\21\1\54\2\21\1\22\1\23\1\21\1\53"+
    "\3\21\7\22\4\21\2\22\1\151\10\22\1\152\16\22"+
    "\3\21\17\22\1\21\1\54\2\21\1\22\1\23\1\21"+
    "\1\53\3\21\7\22\4\21\21\22\1\153\10\22\3\21"+
    "\17\22\1\21\1\54\2\21\1\22\1\23\1\21\1\154"+
    "\3\21\7\22\4\21\32\22\3\21\17\22\1\21\1\54"+
    "\2\21\1\22\1\23\1\21\1\53\3\21\7\22\4\21"+
    "\1\155\31\22\3\21\17\22\1\21\1\54\2\21\1\22"+
    "\1\23\1\21\1\53\3\21\7\22\4\21\3\22\1\156"+
    "\26\22\3\21\17\22\1\21\1\54\2\21\1\22\1\23"+
    "\1\21\1\53\3\21\7\22\4\21\20\22\1\157\11\22"+
    "\3\21\17\22\1\21\1\54\2\21\1\22\1\23\1\21"+
    "\1\53\3\21\7\22\4\21\22\22\1\160\7\22\3\21"+
    "\17\22\1\21\1\54\2\21\1\22\1\23\1\21\1\53"+
    "\3\21\7\22\4\21\6\22\1\161\23\22\3\21\17\22"+
    "\1\21\1\54\2\21\1\22\1\23\1\21\1\53\3\21"+
    "\7\22\4\21\3\22\1\162\26\22\3\21\17\22\1\21"+
    "\1\54\2\21\1\22\1\23\1\21\1\163\3\21\7\22"+
    "\4\21\14\22\1\164\15\22\3\21\17\22\1\21\1\54"+
    "\2\21\1\22\1\23\1\21\1\53\3\21\7\22\4\21"+
    "\4\22\1\165\25\22\3\21\17\22\1\21\1\54\2\21"+
    "\1\22\1\23\1\21\1\53\3\21\7\22\4\21\2\22"+
    "\1\166\27\22\3\21\17\22\1\21\1\54\2\21\1\22"+
    "\1\23\1\21\1\53\3\21\7\22\4\21\21\22\1\167"+
    "\1\170\7\22\3\21\17\22\1\21\1\54\2\21\1\22"+
    "\1\23\1\21\1\53\3\21\7\22\4\21\3\22\1\171"+
    "\26\22\3\21\17\22\1\21\1\54\2\21\1\22\1\23"+
    "\1\21\1\53\3\21\7\22\4\21\20\22\1\172\11\22"+
    "\3\21\17\22\1\21\1\54\2\21\1\22\1\23\1\21"+
    "\1\173\3\21\7\22\4\21\32\22\3\21\17\22\1\21"+
    "\1\54\2\21\1\22\1\23\1\21\1\53\3\21\7\22"+
    "\4\21\14\22\1\174\12\22\1\175\2\22\3\21\17\22"+
    "\1\21\1\54\2\21\1\22\1\23\1\21\1\53\3\21"+
    "\7\22\4\21\23\22\1\176\6\22\3\21\17\22\1\21"+
    "\1\54\2\21\1\22\1\23\1\21\1\53\3\21\7\22"+
    "\4\21\13\22\1\177\16\22\3\21\17\22\1\21\1\54"+
    "\2\21\1\22\1\23\1\21\1\53\3\21\7\22\4\21"+
    "\24\22\1\200\5\22\3\21\17\22\1\21\1\54\2\21"+
    "\1\22\1\23\1\21\1\53\3\21\7\22\4\21\32\22"+
    "\3\21\6\22\1\201\10\22\1\21\1\54\1\21\57\0"+
    "\1\202\101\0\1\203\23\0\2\23\1\0\1\55\3\0"+
    "\7\23\4\0\32\23\3\0\17\23\1\0\1\54\1\204"+
    "\1\0\2\126\1\0\1\55\3\0\7\54\4\0\32\54"+
    "\3\0\17\54\1\0\1\127\1\204\1\21\1\22\1\23"+
    "\1\21\1\57\3\21\7\205\4\21\32\22\3\21\17\22"+
    "\1\21\1\54\2\21\1\22\1\23\1\21\1\53\3\21"+
    "\7\22\4\21\4\22\1\206\25\22\3\21\17\22\1\21"+
    "\1\54\2\21\1\22\1\23\1\21\1\53\3\21\7\22"+
    "\4\21\15\22\1\207\14\22\3\21\17\22\1\21\1\54"+
    "\2\21\1\22\1\23\1\21\1\53\3\21\7\22\4\21"+
    "\1\210\31\22\3\21\17\22\1\21\1\54\2\21\1\22"+
    "\1\23\1\21\1\53\3\21\7\22\4\21\16\22\1\211"+
    "\13\22\3\21\17\22\1\21\1\54\2\21\1\22\1\23"+
    "\1\21\1\53\3\21\7\22\4\21\17\22\1\212\12\22"+
    "\3\21\17\22\1\21\1\54\2\21\1\22\1\23\1\21"+
    "\1\53\3\21\7\22\4\21\23\22\1\213\6\22\3\21"+
    "\17\22\1\21\1\54\2\21\1\22\1\23\1\21\1\53"+
    "\3\21\7\22\4\21\2\22\1\214\27\22\3\21\17\22"+
    "\1\21\1\54\2\21\1\22\1\23\1\21\1\53\3\21"+
    "\7\22\4\21\22\22\1\215\7\22\3\21\17\22\1\21"+
    "\1\54\2\21\1\22\1\23\1\21\1\53\3\21\7\22"+
    "\4\21\24\22\1\216\5\22\3\21\17\22\1\21\1\54"+
    "\2\21\1\22\1\23\1\21\1\53\3\21\7\22\4\21"+
    "\1\22\1\217\30\22\3\21\17\22\1\21\1\54\2\21"+
    "\1\22\1\23\1\21\1\53\3\21\7\22\4\21\22\22"+
    "\1\220\7\22\3\21\17\22\1\21\1\54\2\21\1\22"+
    "\1\23\1\21\1\53\3\21\7\22\4\21\1\221\2\22"+
    "\1\222\26\22\3\21\17\22\1\21\1\54\2\21\1\22"+
    "\1\23\1\21\1\53\3\21\7\22\4\21\4\22\1\223"+
    "\25\22\3\21\17\22\1\21\1\54\2\21\1\22\1\23"+
    "\1\21\1\53\3\21\7\22\4\21\32\22\3\21\7\22"+
    "\1\224\7\22\1\21\1\54\2\21\1\22\1\23\1\21"+
    "\1\53\3\21\7\22\4\21\14\22\1\225\15\22\3\21"+
    "\17\22\1\21\1\54\2\21\1\22\1\23\1\21\1\53"+
    "\3\21\7\22\4\21\7\22\1\226\22\22\3\21\17\22"+
    "\1\21\1\54\2\21\1\22\1\23\1\21\1\53\3\21"+
    "\7\22\4\21\7\22\1\227\22\22\3\21\17\22\1\21"+
    "\1\54\2\21\1\22\1\23\1\21\1\53\3\21\7\22"+
    "\4\21\1\230\31\22\3\21\17\22\1\21\1\54\2\21"+
    "\1\22\1\23\1\21\1\53\3\21\7\22\4\21\14\22"+
    "\1\231\15\22\3\21\17\22\1\21\1\54\2\21\1\22"+
    "\1\23\1\21\1\53\3\21\7\22\4\21\6\22\1\232"+
    "\23\22\3\21\17\22\1\21\1\54\2\21\1\22\1\23"+
    "\1\21\1\53\3\21\7\22\4\21\10\22\1\233\21\22"+
    "\3\21\17\22\1\21\1\54\2\21\1\22\1\23\1\21"+
    "\1\53\3\21\7\22\4\21\24\22\1\234\5\22\3\21"+
    "\17\22\1\21\1\54\2\21\1\22\1\23\1\21\1\53"+
    "\3\21\7\22\4\21\23\22\1\235\6\22\3\21\17\22"+
    "\1\21\1\54\2\21\1\22\1\23\1\21\1\53\3\21"+
    "\7\22\4\21\10\22\1\236\21\22\3\21\17\22\1\21"+
    "\1\54\2\21\1\22\1\23\1\21\1\53\3\21\7\22"+
    "\4\21\10\22\1\237\21\22\3\21\17\22\1\21\1\54"+
    "\2\21\1\22\1\23\1\21\1\53\3\21\7\22\4\21"+
    "\1\22\1\240\30\22\3\21\17\22\1\21\1\54\2\21"+
    "\1\22\1\23\1\21\1\53\3\21\7\22\4\21\25\22"+
    "\1\241\4\22\3\21\17\22\1\21\1\54\2\21\1\22"+
    "\1\23\1\21\1\53\3\21\7\22\4\21\10\22\1\242"+
    "\21\22\3\21\17\22\1\21\1\54\2\21\1\22\1\23"+
    "\1\21\1\53\3\21\7\22\4\21\1\243\31\22\3\21"+
    "\17\22\1\21\1\54\2\21\1\22\1\23\1\21\1\53"+
    "\3\21\7\22\4\21\22\22\1\244\7\22\3\21\17\22"+
    "\1\21\1\54\2\21\1\22\1\23\1\21\1\53\3\21"+
    "\7\22\4\21\10\22\1\245\21\22\3\21\17\22\1\21"+
    "\1\54\2\21\1\22\1\23\1\21\1\53\3\21\7\22"+
    "\4\21\24\22\1\246\5\22\3\21\17\22\1\21\1\54"+
    "\2\21\1\22\1\23\1\21\1\53\3\21\7\22\4\21"+
    "\1\247\31\22\3\21\17\22\1\21\1\54\2\21\1\22"+
    "\1\23\1\21\1\53\3\21\7\22\4\21\23\22\1\250"+
    "\6\22\3\21\17\22\1\21\1\54\2\21\1\22\1\23"+
    "\1\21\1\53\3\21\7\22\4\21\24\22\1\251\5\22"+
    "\3\21\17\22\1\21\1\54\2\21\1\22\1\23\1\21"+
    "\1\252\3\21\7\22\4\21\32\22\3\21\17\22\1\21"+
    "\1\54\2\21\1\22\1\23\1\21\1\53\3\21\7\22"+
    "\4\21\1\253\31\22\3\21\17\22\1\21\1\54\2\21"+
    "\1\22\1\23\1\21\1\53\3\21\7\22\4\21\32\22"+
    "\3\21\15\22\1\254\1\22\1\21\1\54\1\21\45\0"+
    "\1\255\26\0\1\255\52\0\1\256\26\0\1\256\6\0"+
    "\2\257\1\0\1\55\3\0\7\204\4\0\32\204\3\0"+
    "\17\204\1\0\1\260\1\0\1\21\1\22\1\23\1\21"+
    "\1\57\2\21\1\261\7\25\4\21\32\22\3\21\17\22"+
    "\1\21\1\54\2\21\1\22\1\23\1\21\1\53\3\21"+
    "\7\22\4\21\6\22\1\262\23\22\3\21\17\22\1\21"+
    "\1\54\2\21\1\22\1\23\1\21\1\53\3\21\7\22"+
    "\4\21\4\22\1\263\25\22\3\21\17\22\1\21\1\54"+
    "\2\21\1\22\1\23\1\21\1\53\3\21\7\22\4\21"+
    "\32\22\2\21\1\264\17\22\1\21\1\54\2\21\1\22"+
    "\1\23\1\21\1\53\3\21\7\22\4\21\15\22\1\265"+
    "\14\22\3\21\17\22\1\21\1\54\2\21\1\22\1\23"+
    "\1\21\1\53\3\21\7\22\4\21\16\22\1\266\13\22"+
    "\3\21\17\22\1\21\1\54\2\21\1\22\1\23\1\21"+
    "\1\53\3\21\7\22\4\21\21\22\1\267\10\22\3\21"+
    "\17\22\1\21\1\54\2\21\1\22\1\23\1\21\1\53"+
    "\3\21\7\22\4\21\12\22\1\270\17\22\3\21\17\22"+
    "\1\21\1\54\2\21\1\22\1\23\1\21\1\53\3\21"+
    "\7\22\4\21\4\22\1\271\25\22\3\21\17\22\1\21"+
    "\1\54\2\21\1\22\1\23\1\21\1\53\3\21\7\22"+
    "\4\21\14\22\1\272\15\22\3\21\17\22\1\21\1\54"+
    "\2\21\1\22\1\23\1\21\1\53\3\21\7\22\4\21"+
    "\16\22\1\273\13\22\3\21\17\22\1\21\1\54\2\21"+
    "\1\22\1\23\1\21\1\53\3\21\7\22\4\21\24\22"+
    "\1\274\5\22\3\21\17\22\1\21\1\54\2\21\1\22"+
    "\1\23\1\21\1\53\3\21\7\22\4\21\21\22\1\275"+
    "\10\22\3\21\17\22\1\21\1\54\2\21\1\22\1\23"+
    "\1\21\1\53\3\21\7\22\4\21\4\22\1\276\25\22"+
    "\3\21\17\22\1\21\1\54\2\21\1\22\1\23\1\21"+
    "\1\53\3\21\7\22\4\21\2\22\1\277\27\22\3\21"+
    "\17\22\1\21\1\54\2\21\1\22\1\23\1\21\1\300"+
    "\3\21\7\22\4\21\32\22\3\21\17\22\1\21\1\54"+
    "\2\21\1\22\1\23\1\21\1\53\3\21\7\22\4\21"+
    "\10\22\1\301\21\22\3\21\17\22\1\21\1\54\2\21"+
    "\1\22\1\23\1\21\1\53\3\21\7\22\4\21\1\302"+
    "\31\22\3\21\17\22\1\21\1\54\2\21\1\22\1\23"+
    "\1\21\1\53\3\21\7\22\4\21\4\22\1\303\25\22"+
    "\3\21\17\22\1\21\1\54\2\21\1\22\1\23\1\21"+
    "\1\53\3\21\7\22\4\21\22\22\1\304\7\22\3\21"+
    "\17\22\1\21\1\54\2\21\1\22\1\23\1\21\1\53"+
    "\3\21\7\22\4\21\24\22\1\305\5\22\3\21\17\22"+
    "\1\21\1\54\2\21\1\22\1\23\1\21\1\53\3\21"+
    "\7\22\4\21\4\22\1\306\25\22\3\21\17\22\1\21"+
    "\1\54\2\21\1\22\1\23\1\21\1\53\3\21\7\22"+
    "\4\21\2\22\1\307\27\22\3\21\17\22\1\21\1\54"+
    "\2\21\1\22\1\23\1\21\1\53\3\21\7\22\4\21"+
    "\10\22\1\310\21\22\3\21\17\22\1\21\1\54\2\21"+
    "\1\22\1\23\1\21\1\53\3\21\7\22\4\21\10\22"+
    "\1\311\21\22\3\21\17\22\1\21\1\54\2\21\1\22"+
    "\1\23\1\21\1\53\3\21\7\22\4\21\15\22\1\312"+
    "\14\22\3\21\17\22\1\21\1\54\2\21\1\22\1\23"+
    "\1\21\1\53\3\21\7\22\4\21\5\22\1\313\24\22"+
    "\3\21\17\22\1\21\1\54\2\21\1\22\1\23\1\21"+
    "\1\53\3\21\7\22\4\21\21\22\1\314\10\22\3\21"+
    "\17\22\1\21\1\54\2\21\1\22\1\23\1\21\1\53"+
    "\3\21\7\22\4\21\16\22\1\315\13\22\3\21\17\22"+
    "\1\21\1\54\2\21\1\22\1\23\1\21\1\53\3\21"+
    "\7\22\4\21\16\22\1\316\13\22\3\21\17\22\1\21"+
    "\1\54\2\21\1\22\1\23\1\21\1\53\3\21\7\22"+
    "\4\21\14\22\1\317\15\22\3\21\17\22\1\21\1\54"+
    "\2\21\1\22\1\23\1\21\1\53\3\21\7\22\4\21"+
    "\26\22\1\320\3\22\3\21\17\22\1\21\1\54\2\21"+
    "\1\22\1\23\1\21\1\53\3\21\7\22\4\21\16\22"+
    "\1\321\13\22\3\21\17\22\1\21\1\54\2\21\1\22"+
    "\1\23\1\21\1\53\3\21\7\22\4\21\4\22\1\322"+
    "\25\22\3\21\17\22\1\21\1\54\2\21\1\22\1\23"+
    "\1\21\1\323\3\21\7\22\4\21\32\22\3\21\17\22"+
    "\1\21\1\54\2\21\1\22\1\23\1\21\1\53\3\21"+
    "\7\22\4\21\16\22\1\324\13\22\3\21\17\22\1\21"+
    "\1\54\2\21\1\22\1\23\1\21\1\53\3\21\7\22"+
    "\4\21\13\22\1\325\16\22\3\21\17\22\1\21\1\54"+
    "\2\21\1\22\1\23\1\21\1\53\3\21\7\22\4\21"+
    "\21\22\1\326\10\22\3\21\17\22\1\21\1\54\2\21"+
    "\1\22\1\23\1\21\1\53\3\21\7\22\4\21\32\22"+
    "\3\21\3\22\1\327\13\22\1\21\1\54\1\21\41\0"+
    "\1\330\30\0\1\330\50\0\1\331\30\0\1\331\110\0"+
    "\1\204\1\0\2\257\5\0\7\204\4\0\32\204\3\0"+
    "\17\204\1\0\1\257\1\204\2\21\1\0\1\21\1\53"+
    "\3\21\1\332\1\333\1\334\1\335\1\336\1\335\1\336"+
    "\61\21\1\0\2\21\1\22\1\23\1\21\1\53\3\21"+
    "\7\22\4\21\1\337\31\22\3\21\17\22\1\21\1\54"+
    "\2\21\1\22\1\23\1\21\1\53\3\21\7\22\4\21"+
    "\1\340\31\22\3\21\17\22\1\21\1\54\3\21\1\0"+
    "\1\21\1\53\41\21\1\341\31\21\1\0\2\21\1\22"+
    "\1\23\1\21\1\342\3\21\7\22\4\21\32\22\3\21"+
    "\17\22\1\21\1\54\2\21\1\22\1\23\1\21\1\53"+
    "\3\21\7\22\4\21\32\22\2\21\1\343\17\22\1\21"+
    "\1\54\2\21\1\22\1\23\1\21\1\53\3\21\7\22"+
    "\4\21\16\22\1\344\13\22\3\21\17\22\1\21\1\54"+
    "\2\21\1\22\1\23\1\21\1\53\3\21\7\22\4\21"+
    "\1\22\1\345\30\22\3\21\17\22\1\21\1\54\2\21"+
    "\1\22\1\23\1\21\1\346\3\21\7\22\4\21\32\22"+
    "\3\21\17\22\1\21\1\54\2\21\1\22\1\23\1\21"+
    "\1\53\3\21\7\22\4\21\15\22\1\347\14\22\3\21"+
    "\17\22\1\21\1\54\2\21\1\22\1\23\1\21\1\350"+
    "\3\21\7\22\4\21\32\22\3\21\17\22\1\21\1\54"+
    "\2\21\1\22\1\23\1\21\1\53\3\21\7\22\4\21"+
    "\13\22\1\351\16\22\3\21\17\22\1\21\1\54\2\21"+
    "\1\22\1\23\1\21\1\53\3\21\7\22\4\21\32\22"+
    "\2\21\1\352\17\22\1\21\1\54\2\21\1\22\1\23"+
    "\1\21\1\53\3\21\7\22\4\21\15\22\1\353\14\22"+
    "\3\21\17\22\1\21\1\54\2\21\1\22\1\23\1\21"+
    "\1\53\3\21\7\22\4\21\7\22\1\354\22\22\3\21"+
    "\17\22\1\21\1\54\2\21\1\22\1\23\1\21\1\53"+
    "\3\21\7\22\4\21\15\22\1\355\14\22\3\21\17\22"+
    "\1\21\1\54\2\21\1\22\1\23\1\21\1\53\3\21"+
    "\7\22\4\21\32\22\2\21\1\356\17\22\1\21\1\54"+
    "\2\21\1\22\1\23\1\21\1\53\3\21\7\22\4\21"+
    "\21\22\1\357\10\22\3\21\17\22\1\21\1\54\2\21"+
    "\1\22\1\23\1\21\1\360\3\21\7\22\4\21\32\22"+
    "\3\21\17\22\1\21\1\54\2\21\1\22\1\23\1\21"+
    "\1\53\3\21\7\22\4\21\13\22\1\361\16\22\3\21"+
    "\17\22\1\21\1\54\2\21\1\22\1\23\1\21\1\53"+
    "\3\21\7\22\4\21\15\22\1\362\14\22\3\21\17\22"+
    "\1\21\1\54\2\21\1\22\1\23\1\21\1\53\3\21"+
    "\7\22\4\21\4\22\1\363\25\22\3\21\17\22\1\21"+
    "\1\54\2\21\1\22\1\23\1\21\1\53\3\21\7\22"+
    "\4\21\4\22\1\364\25\22\3\21\17\22\1\21\1\54"+
    "\2\21\1\22\1\23\1\21\1\53\3\21\7\22\4\21"+
    "\5\22\1\365\24\22\3\21\17\22\1\21\1\54\2\21"+
    "\1\22\1\23\1\21\1\53\3\21\7\22\4\21\32\22"+
    "\2\21\1\366\17\22\1\21\1\54\2\21\1\22\1\23"+
    "\1\21\1\53\3\21\7\22\4\21\10\22\1\367\21\22"+
    "\3\21\17\22\1\21\1\54\2\21\1\22\1\23\1\21"+
    "\1\53\3\21\7\22\4\21\4\22\1\370\25\22\3\21"+
    "\17\22\1\21\1\54\2\21\1\22\1\23\1\21\1\53"+
    "\3\21\7\22\4\21\32\22\2\21\1\371\17\22\1\21"+
    "\1\54\2\21\1\22\1\23\1\21\1\53\3\21\7\22"+
    "\4\21\15\22\1\372\14\22\3\21\17\22\1\21\1\54"+
    "\2\21\1\22\1\23\1\21\1\53\3\21\7\22\4\21"+
    "\4\22\1\373\25\22\3\21\17\22\1\21\1\54\2\21"+
    "\1\22\1\23\1\21\1\53\3\21\7\22\4\21\16\22"+
    "\1\374\13\22\3\21\17\22\1\21\1\54\2\21\1\22"+
    "\1\23\1\21\1\375\3\21\7\22\4\21\32\22\3\21"+
    "\17\22\1\21\1\54\2\21\1\22\1\23\1\21\1\53"+
    "\3\21\7\22\4\21\21\22\1\376\10\22\3\21\17\22"+
    "\1\21\1\54\2\21\1\22\1\23\1\21\1\53\3\21"+
    "\7\22\4\21\32\22\2\21\1\377\17\22\1\21\1\54"+
    "\2\21\1\22\1\23\1\21\1\53\3\21\7\22\4\21"+
    "\16\22\1\u0100\13\22\3\21\17\22\1\21\1\54\2\21"+
    "\1\22\1\23\1\21\1\53\3\21\7\22\4\21\10\22"+
    "\1\u0101\21\22\3\21\17\22\1\21\1\54\2\21\1\22"+
    "\1\23\1\21\1\u0102\3\21\7\22\4\21\32\22\3\21"+
    "\17\22\1\21\1\54\1\21\36\0\1\u0103\31\0\1\u0103"+
    "\47\0\1\u0104\31\0\1\u0104\11\0\2\21\1\0\1\21"+
    "\1\53\4\21\1\335\1\334\1\335\1\336\1\335\1\336"+
    "\61\21\1\0\3\21\1\0\1\21\1\53\2\21\1\u0105"+
    "\1\335\1\336\1\335\65\21\1\0\3\21\1\0\1\21"+
    "\1\53\2\21\1\u0106\70\21\1\0\3\21\1\0\1\21"+
    "\1\53\2\21\1\u0105\70\21\1\0\3\21\1\0\1\21"+
    "\1\53\2\21\1\u0107\70\21\1\0\2\21\1\22\1\23"+
    "\1\21\1\53\3\21\7\22\4\21\21\22\1\u0108\10\22"+
    "\3\21\17\22\1\21\1\54\2\21\1\22\1\23\1\21"+
    "\1\53\3\21\7\22\4\21\2\22\1\u0109\27\22\3\21"+
    "\17\22\1\21\1\54\3\21\1\0\1\21\1\53\22\21"+
    "\1\u010a\50\21\1\0\3\21\1\0\1\21\1\53\41\21"+
    "\1\u010b\31\21\1\0\2\21\1\22\1\23\1\21\1\u010c"+
    "\3\21\7\22\4\21\32\22\3\21\17\22\1\21\1\54"+
    "\2\21\1\22\1\23\1\21\1\53\3\21\7\22\4\21"+
    "\16\22\1\u010d\13\22\3\21\17\22\1\21\1\54\2\21"+
    "\1\22\1\23\1\21\1\53\3\21\7\22\4\21\1\u010e"+
    "\31\22\3\21\17\22\1\21\1\54\2\21\1\22\1\23"+
    "\1\21\1\53\3\21\7\22\4\21\23\22\1\u010f\6\22"+
    "\3\21\17\22\1\21\1\54\3\21\1\0\1\21\1\53"+
    "\42\21\1\u0110\30\21\1\0\2\21\1\22\1\23\1\21"+
    "\1\53\3\21\7\22\4\21\2\22\1\u0111\27\22\3\21"+
    "\17\22\1\21\1\54\2\21\1\22\1\23\1\21\1\53"+
    "\3\21\7\22\4\21\1\u0112\31\22\3\21\17\22\1\21"+
    "\1\54\2\21\1\22\1\23\1\21\1\53\3\21\7\22"+
    "\4\21\1\u0113\31\22\3\21\17\22\1\21\1\54\3\21"+
    "\1\0\1\21\1\53\20\21\1\u0114\11\21\1\u0115\40\21"+
    "\1\0\2\21\1\22\1\23\1\21\1\53\3\21\7\22"+
    "\4\21\16\22\1\u0116\13\22\3\21\17\22\1\21\1\54"+
    "\2\21\1\22\1\23\1\21\1\53\3\21\7\22\4\21"+
    "\1\u0117\31\22\3\21\17\22\1\21\1\54\2\21\1\22"+
    "\1\23\1\21\1\u0118\3\21\7\22\4\21\32\22\3\21"+
    "\17\22\1\21\1\54\2\21\1\22\1\23\1\21\1\u0119"+
    "\3\21\7\22\4\21\32\22\3\21\17\22\1\21\1\54"+
    "\2\21\1\22\1\23\1\21\1\53\3\21\7\22\4\21"+
    "\21\22\1\u011a\10\22\3\21\17\22\1\21\1\54\2\21"+
    "\1\22\1\23\1\21\1\53\3\21\7\22\4\21\10\22"+
    "\1\u011b\21\22\3\21\17\22\1\21\1\54\3\21\1\0"+
    "\1\21\1\53\42\21\1\u011c\30\21\1\0\2\21\1\22"+
    "\1\23\1\21\1\53\3\21\7\22\4\21\2\22\1\u011d"+
    "\27\22\3\21\17\22\1\21\1\54\2\21\1\22\1\23"+
    "\1\21\1\u011e\3\21\7\22\4\21\32\22\2\21\1\u011f"+
    "\17\22\1\21\1\54\3\21\1\0\1\21\1\53\23\21"+
    "\1\u0120\11\21\1\u0121\35\21\1\0\2\21\1\22\1\23"+
    "\1\21\1\53\3\21\7\22\4\21\4\22\1\u0122\25\22"+
    "\3\21\17\22\1\21\1\54\2\21\1\22\1\23\1\21"+
    "\1\53\3\21\7\22\4\21\23\22\1\u0123\6\22\3\21"+
    "\17\22\1\21\1\54\2\21\1\22\1\23\1\21\1\53"+
    "\3\21\7\22\4\21\21\22\1\u0124\10\22\3\21\17\22"+
    "\1\21\1\54\2\21\1\22\1\23\1\21\1\53\3\21"+
    "\7\22\4\21\10\22\1\u0125\21\22\3\21\17\22\1\21"+
    "\1\54\3\21\1\0\1\21\1\53\43\21\1\u0126\27\21"+
    "\1\0\2\21\1\22\1\23\1\21\1\u0127\3\21\7\22"+
    "\4\21\32\22\3\21\17\22\1\21\1\54\2\21\1\22"+
    "\1\23\1\21\1\53\3\21\7\22\4\21\16\22\1\u0128"+
    "\13\22\3\21\17\22\1\21\1\54\1\21\33\0\1\u0129"+
    "\32\0\1\u0129\46\0\1\u012a\32\0\1\u012a\13\0\2\21"+
    "\1\0\1\21\1\53\3\21\1\u012b\2\u012c\1\u012d\3\u012e"+
    "\61\21\1\0\3\21\1\0\1\21\1\53\3\21\1\u012b"+
    "\1\u012c\1\u012f\4\u012e\61\21\1\0\3\21\1\0\1\21"+
    "\1\53\3\21\1\u012b\2\u012c\1\u0130\3\u012e\61\21\1\0"+
    "\2\21\1\22\1\23\1\21\1\53\3\21\7\22\4\21"+
    "\32\22\2\21\1\u0131\17\22\1\21\1\54\2\21\1\22"+
    "\1\23\1\21\1\53\3\21\7\22\4\21\10\22\1\u0132"+
    "\21\22\3\21\17\22\1\21\1\54\3\21\1\0\1\21"+
    "\1\53\45\21\1\u0133\25\21\1\0\3\21\1\0\1\21"+
    "\1\53\22\21\1\u0134\50\21\1\0\2\21\1\22\1\23"+
    "\1\21\1\53\3\21\7\22\4\21\27\22\1\u0135\2\22"+
    "\3\21\17\22\1\21\1\54\2\21\1\22\1\23\1\21"+
    "\1\53\3\21\7\22\4\21\22\22\1\u0136\7\22\3\21"+
    "\17\22\1\21\1\54\2\21\1\22\1\23\1\21\1\53"+
    "\3\21\7\22\4\21\1\u0137\31\22\3\21\17\22\1\21"+
    "\1\54\3\21\1\0\1\21\1\53\40\21\1\u0138\32\21"+
    "\1\0\2\21\1\22\1\23\1\21\1\53\3\21\7\22"+
    "\4\21\10\22\1\u0139\21\22\3\21\17\22\1\21\1\54"+
    "\2\21\1\22\1\23\1\21\1\u013a\3\21\7\22\4\21"+
    "\32\22\3\21\17\22\1\21\1\54\2\21\1\22\1\23"+
    "\1\21\1\53\3\21\7\22\4\21\21\22\1\u013b\10\22"+
    "\3\21\17\22\1\21\1\54\3\21\1\0\1\21\1\53"+
    "\37\21\1\u013c\33\21\1\0\3\21\1\0\1\21\1\53"+
    "\34\21\1\u013d\36\21\1\0\2\21\1\22\1\23\1\21"+
    "\1\u013e\3\21\7\22\4\21\32\22\3\21\17\22\1\21"+
    "\1\54\2\21\1\22\1\23\1\21\1\53\3\21\7\22"+
    "\4\21\21\22\1\u013f\10\22\3\21\17\22\1\21\1\54"+
    "\2\21\1\22\1\23\1\21\1\53\3\21\7\22\4\21"+
    "\3\22\1\u0140\26\22\3\21\17\22\1\21\1\54\2\21"+
    "\1\22\1\23\1\21\1\53\3\21\7\22\4\21\2\22"+
    "\1\u0141\27\22\3\21\17\22\1\21\1\54\3\21\1\0"+
    "\1\21\1\53\40\21\1\u0142\32\21\1\0\2\21\1\22"+
    "\1\23\1\21\1\53\3\21\7\22\4\21\1\u0143\31\22"+
    "\3\21\17\22\1\21\1\54\3\21\1\0\1\21\1\53"+
    "\20\21\1\u0144\52\21\1\0\3\21\1\0\1\21\1\53"+
    "\34\21\1\u0145\36\21\1\0\3\21\1\0\1\21\1\53"+
    "\16\21\1\u0146\54\21\1\0\2\21\1\22\1\23\1\21"+
    "\1\53\3\21\7\22\4\21\22\22\1\u0147\7\22\3\21"+
    "\17\22\1\21\1\54\2\21\1\22\1\23\1\21\1\53"+
    "\3\21\7\22\4\21\21\22\1\u0148\10\22\3\21\17\22"+
    "\1\21\1\54\2\21\1\22\1\23\1\21\1\53\3\21"+
    "\7\22\4\21\3\22\1\u0149\26\22\3\21\17\22\1\21"+
    "\1\54\2\21\1\22\1\23\1\21\1\53\3\21\7\22"+
    "\4\21\3\22\1\u014a\26\22\3\21\17\22\1\21\1\54"+
    "\3\21\1\0\1\21\1\53\26\21\1\u014b\44\21\1\0"+
    "\2\21\1\22\1\23\1\21\1\u014c\3\21\7\22\4\21"+
    "\32\22\2\21\1\u014d\17\22\1\21\1\54\1\21\25\0"+
    "\1\u014e\33\0\1\u014e\45\0\1\u014f\33\0\1\u014f\20\0"+
    "\2\21\1\0\1\21\1\53\4\21\6\u012e\61\21\1\0"+
    "\3\21\1\0\1\21\1\u0150\3\21\7\u012e\61\21\1\0"+
    "\3\21\1\0\1\21\1\u0150\3\21\2\u012e\66\21\1\0"+
    "\3\21\1\0\1\21\1\u0150\73\21\1\0\3\21\1\0"+
    "\1\21\1\u0150\3\21\6\u012e\62\21\1\0\3\21\1\0"+
    "\1\21\1\u0150\3\21\1\u012e\67\21\1\0\3\21\1\0"+
    "\1\21\1\53\20\21\1\u0151\52\21\1\0\2\21\1\22"+
    "\1\23\1\21\1\53\3\21\7\22\4\21\16\22\1\u0152"+
    "\13\22\3\21\17\22\1\21\1\54\3\21\1\0\1\21"+
    "\1\53\41\21\1\u0153\31\21\1\0\3\21\1\0\1\21"+
    "\1\53\45\21\1\u0154\25\21\1\0\2\21\1\22\1\23"+
    "\1\21\1\u0155\3\21\7\22\4\21\32\22\3\21\17\22"+
    "\1\21\1\54\2\21\1\22\1\23\1\21\1\u0156\3\21"+
    "\7\22\4\21\32\22\3\21\17\22\1\21\1\54\2\21"+
    "\1\22\1\23\1\21\1\53\3\21\7\22\4\21\21\22"+
    "\1\u0157\10\22\3\21\17\22\1\21\1\54\3\21\1\0"+
    "\1\21\1\53\42\21\1\u0158\30\21\1\0\2\21\1\22"+
    "\1\23\1\21\1\53\3\21\7\22\4\21\1\u0159\31\22"+
    "\3\21\17\22\1\21\1\54\2\21\1\22\1\23\1\21"+
    "\1\53\3\21\7\22\4\21\32\22\2\21\1\u015a\17\22"+
    "\1\21\1\54\3\21\1\0\1\21\1\53\22\21\1\u015b"+
    "\50\21\1\0\3\21\1\0\1\21\1\53\21\21\1\u015c"+
    "\51\21\1\0\2\21\1\22\1\23\1\21\1\53\3\21"+
    "\7\22\4\21\10\22\1\u015d\21\22\3\21\17\22\1\21"+
    "\1\54\2\21\1\22\1\23\1\21\1\53\3\21\7\22"+
    "\4\21\1\u015e\31\22\3\21\17\22\1\21\1\54\2\21"+
    "\1\22\1\23\1\21\1\53\3\21\7\22\4\21\1\u015f"+
    "\31\22\3\21\17\22\1\21\1\54\3\21\1\0\1\21"+
    "\1\53\42\21\1\u0160\30\21\1\0\2\21\1\22\1\23"+
    "\1\21\1\53\3\21\7\22\4\21\21\22\1\u0161\10\22"+
    "\3\21\17\22\1\21\1\54\3\21\1\0\1\21\1\53"+
    "\16\21\1\u0162\54\21\1\0\3\21\1\0\1\21\1\53"+
    "\37\21\1\u0163\33\21\1\0\3\21\1\0\1\21\1\53"+
    "\40\21\1\u0164\32\21\1\0\2\21\1\22\1\23\1\21"+
    "\1\u0165\3\21\7\22\4\21\32\22\3\21\17\22\1\21"+
    "\1\54\2\21\1\22\1\23\1\21\1\53\3\21\7\22"+
    "\4\21\16\22\1\u0166\13\22\3\21\17\22\1\21\1\54"+
    "\2\21\1\22\1\23\1\21\1\u0167\3\21\7\22\4\21"+
    "\32\22\3\21\17\22\1\21\1\54\2\21\1\22\1\23"+
    "\1\21\1\53\3\21\7\22\4\21\16\22\1\u0168\13\22"+
    "\3\21\17\22\1\21\1\54\3\21\1\0\1\21\1\53"+
    "\40\21\1\u0169\32\21\1\0\3\21\1\0\1\21\1\53"+
    "\16\21\1\u016a\1\21\1\u016b\12\21\1\u016c\37\21\1\0"+
    "\1\21\33\0\1\u016d\32\0\1\u016d\46\0\1\u016e\32\0"+
    "\1\u016e\13\0\2\21\1\0\1\21\1\53\34\21\1\u016f"+
    "\36\21\1\0\2\21\1\22\1\23\1\21\1\53\3\21"+
    "\7\22\4\21\15\22\1\u0170\14\22\3\21\17\22\1\21"+
    "\1\54\3\21\1\0\1\21\1\53\34\21\1\u0171\36\21"+
    "\1\0\3\21\1\0\1\21\1\53\41\21\1\u0172\31\21"+
    "\1\0\2\21\1\22\1\23\1\21\1\53\3\21\7\22"+
    "\4\21\32\22\2\21\1\u0173\17\22\1\21\1\54\3\21"+
    "\1\0\1\21\1\53\16\21\1\u0174\54\21\1\0\2\21"+
    "\1\22\1\23\1\21\1\53\3\21\7\22\4\21\13\22"+
    "\1\u0175\16\22\3\21\17\22\1\21\1\54\3\21\1\0"+
    "\1\21\1\53\20\21\1\u0176\2\21\1\u0177\16\21\1\u0178"+
    "\30\21\1\0\3\21\1\0\1\21\1\53\16\21\1\u0179"+
    "\54\21\1\0\3\21\1\0\1\21\1\53\26\21\1\u017a"+
    "\44\21\1\0\2\21\1\22\1\23\1\21\1\53\3\21"+
    "\7\22\4\21\16\22\1\u017b\13\22\3\21\17\22\1\21"+
    "\1\54\2\21\1\22\1\23\1\21\1\u017c\3\21\7\22"+
    "\4\21\32\22\3\21\17\22\1\21\1\54\2\21\1\22"+
    "\1\23\1\21\1\53\3\21\7\22\4\21\21\22\1\u017d"+
    "\10\22\3\21\17\22\1\21\1\54\3\21\1\0\1\21"+
    "\1\53\16\21\1\u017e\54\21\1\0\2\21\1\22\1\23"+
    "\1\21\1\53\3\21\7\22\4\21\32\22\2\21\1\u017f"+
    "\17\22\1\21\1\54\3\21\1\0\1\21\1\53\32\21"+
    "\1\u0180\40\21\1\0\3\21\1\0\1\21\1\53\32\21"+
    "\1\u0181\40\21\1\0\3\21\1\0\1\21\1\53\40\21"+
    "\1\u0182\32\21\1\0\2\21\1\22\1\23\1\21\1\53"+
    "\3\21\7\22\4\21\22\22\1\u0183\7\22\3\21\17\22"+
    "\1\21\1\54\2\21\1\22\1\23\1\21\1\u0184\3\21"+
    "\7\22\4\21\32\22\3\21\17\22\1\21\1\54\3\21"+
    "\1\0\1\21\1\53\26\21\1\u0185\44\21\1\0\3\21"+
    "\1\0\1\21\1\53\33\21\1\u0186\37\21\1\0\3\21"+
    "\1\0\1\21\1\53\37\21\1\u0187\33\21\1\0\3\21"+
    "\1\0\1\21\1\53\42\21\1\u0188\30\21\1\0\1\21"+
    "\46\0\1\u0189\26\0\1\u0189\52\0\1\u018a\26\0\1\u018a"+
    "\4\0\2\21\1\0\1\21\1\53\32\21\1\u018b\40\21"+
    "\1\0\2\21\1\22\1\23\1\21\1\u018c\3\21\7\22"+
    "\4\21\32\22\3\21\17\22\1\21\1\54\3\21\1\0"+
    "\1\21\1\u018d\73\21\1\0\3\21\1\0\1\21\1\53"+
    "\34\21\1\u018e\36\21\1\0\3\21\1\0\1\21\1\53"+
    "\21\21\1\u018f\51\21\1\0\3\21\1\0\1\21\1\53"+
    "\37\21\1\u0190\33\21\1\0\2\21\1\22\1\23\1\21"+
    "\1\53\3\21\7\22\4\21\4\22\1\u0191\25\22\3\21"+
    "\17\22\1\21\1\54\3\21\1\0\1\21\1\53\34\21"+
    "\1\u0192\36\21\1\0\3\21\1\0\1\21\1\53\34\21"+
    "\1\u0193\36\21\1\0\3\21\1\0\1\21\1\53\40\21"+
    "\1\u0194\32\21\1\0\3\21\1\0\1\21\1\53\20\21"+
    "\1\u0195\52\21\1\0\3\21\1\0\1\21\1\53\23\21"+
    "\1\u0196\47\21\1\0\2\21\1\22\1\23\1\21\1\u0197"+
    "\3\21\7\22\4\21\32\22\3\21\17\22\1\21\1\54"+
    "\2\21\1\22\1\23\1\21\1\u0198\3\21\7\22\4\21"+
    "\32\22\3\21\17\22\1\21\1\54\3\21\1\0\1\21"+
    "\1\53\37\21\1\u0199\33\21\1\0\3\21\1\0\1\21"+
    "\1\53\20\21\1\u019a\2\21\1\u019b\16\21\1\u019c\30\21"+
    "\1\0\3\21\1\0\1\21\1\53\35\21\1\u019d\35\21"+
    "\1\0\3\21\1\0\1\21\1\53\42\21\1\u019e\30\21"+
    "\1\0\3\21\1\0\1\21\1\53\44\21\1\u019f\26\21"+
    "\1\0\2\21\1\22\1\23\1\21\1\53\3\21\7\22"+
    "\4\21\32\22\2\21\1\u01a0\17\22\1\21\1\54\3\21"+
    "\1\0\1\21\1\53\17\21\1\u01a1\53\21\1\0\3\21"+
    "\1\0\1\21\1\53\41\21\1\u01a2\31\21\1\0\3\21"+
    "\1\0\1\21\1\53\22\21\1\u01a3\50\21\1\0\3\21"+
    "\1\0\1\21\1\53\22\21\1\u01a4\50\21\1\0\1\21"+
    "\47\0\1\u01a5\26\0\1\u01a5\52\0\1\u01a6\26\0\1\u01a6"+
    "\3\0\2\21\1\0\1\21\1\53\35\21\1\u01a7\35\21"+
    "\1\0\3\21\1\0\1\21\1\u01a8\73\21\1\0\3\21"+
    "\1\0\1\21\1\53\16\21\1\u01a9\54\21\1\0\3\21"+
    "\1\0\1\21\1\53\26\21\1\u01aa\44\21\1\0\2\21"+
    "\1\22\1\23\1\21\1\53\3\21\7\22\4\21\22\22"+
    "\1\u01ab\7\22\3\21\17\22\1\21\1\54\3\21\1\0"+
    "\1\21\1\53\32\21\1\u01ac\40\21\1\0\3\21\1\0"+
    "\1\21\1\53\37\21\1\u01ad\33\21\1\0\3\21\1\0"+
    "\1\21\1\53\42\21\1\u01ae\30\21\1\0\3\21\1\0"+
    "\1\21\1\53\26\21\1\u01af\44\21\1\0\3\21\1\0"+
    "\1\21\1\53\26\21\1\u01b0\44\21\1\0\3\21\1\0"+
    "\1\21\1\53\26\21\1\u01b1\44\21\1\0\3\21\1\0"+
    "\1\21\1\53\34\21\1\u01b2\36\21\1\0\3\21\1\0"+
    "\1\21\1\53\34\21\1\u01b3\36\21\1\0\3\21\1\0"+
    "\1\21\1\53\40\21\1\u01b4\32\21\1\0\3\21\1\0"+
    "\1\21\1\53\34\21\1\u01b5\36\21\1\0\3\21\1\0"+
    "\1\21\1\53\31\21\1\u01b6\41\21\1\0\3\21\1\0"+
    "\1\21\1\53\34\21\1\u01b7\36\21\1\0\3\21\1\0"+
    "\1\21\1\53\20\21\1\u01b8\2\21\1\u01b9\47\21\1\0"+
    "\3\21\1\0\1\21\1\53\31\21\1\u01ba\41\21\1\0"+
    "\3\21\1\0\1\21\1\53\26\21\1\u01bb\44\21\1\0"+
    "\3\21\1\0\1\21\1\53\16\21\1\u01bc\54\21\1\0"+
    "\3\21\1\0\1\21\1\53\43\21\1\u01bd\27\21\1\0"+
    "\1\21\26\0\1\u01be\33\0\1\u01be\45\0\1\u01bf\33\0"+
    "\1\u01bf\17\0\2\21\1\0\1\21\1\53\34\21\1\u01c0"+
    "\36\21\1\0\3\21\1\0\1\21\1\53\41\21\1\u01c1"+
    "\31\21\1\0\3\21\1\0\1\21\1\53\34\21\1\u01c2"+
    "\36\21\1\0\2\21\1\22\1\23\1\21\1\53\3\21"+
    "\7\22\4\21\32\22\2\21\1\u01c3\17\22\1\21\1\54"+
    "\3\21\1\0\1\21\1\53\35\21\1\u01c4\35\21\1\0"+
    "\3\21\1\0\1\21\1\53\32\21\1\u01c5\40\21\1\0"+
    "\3\21\1\0\1\21\1\53\16\21\1\u01c6\54\21\1\0"+
    "\3\21\1\0\1\21\1\53\34\21\1\u01c7\36\21\1\0"+
    "\3\21\1\0\1\21\1\53\20\21\1\u01c8\52\21\1\0"+
    "\3\21\1\0\1\21\1\53\34\21\1\u01c9\36\21\1\0"+
    "\3\21\1\0\1\21\1\53\32\21\1\u01ca\40\21\1\0"+
    "\3\21\1\0\1\21\1\53\37\21\1\u01cb\33\21\1\0"+
    "\3\21\1\0\1\21\1\53\42\21\1\u01cc\30\21\1\0"+
    "\3\21\1\0\1\21\1\u01cd\73\21\1\0\3\21\1\0"+
    "\1\21\1\53\16\21\1\u01ce\54\21\1\0\3\21\1\0"+
    "\1\21\1\53\37\21\1\u01cf\33\21\1\0\3\21\1\0"+
    "\1\21\1\53\34\21\1\u01d0\36\21\1\0\3\21\1\0"+
    "\1\21\1\53\34\21\1\u01d1\36\21\1\0\3\21\1\0"+
    "\1\21\1\53\22\21\1\u01d2\50\21\1\0\3\21\1\0"+
    "\1\21\1\53\24\21\1\u01d3\46\21\1\0\3\21\1\0"+
    "\1\21\1\53\20\21\1\u01d4\52\21\1\0\3\21\1\0"+
    "\1\21\1\53\34\21\1\u01d5\36\21\1\0\1\21\27\0"+
    "\1\u01d6\33\0\1\u01d6\45\0\1\u01d7\33\0\1\u01d7\16\0"+
    "\2\21\1\0\1\21\1\53\33\21\1\u01d8\37\21\1\0"+
    "\3\21\1\0\1\21\1\53\34\21\1\u01d9\36\21\1\0"+
    "\3\21\1\0\1\21\1\u01da\73\21\1\0\3\21\1\0"+
    "\1\21\1\53\42\21\1\u01db\30\21\1\0\3\21\1\0"+
    "\1\21\1\53\34\21\1\u01dc\36\21\1\0\3\21\1\0"+
    "\1\21\1\53\42\21\1\u01dd\30\21\1\0\3\21\1\0"+
    "\1\21\1\53\37\21\1\u01de\33\21\1\0\3\21\1\0"+
    "\1\21\1\53\33\21\1\u01df\37\21\1\0\3\21\1\0"+
    "\1\21\1\53\16\21\1\u01e0\54\21\1\0\3\21\1\0"+
    "\1\21\1\u01e1\73\21\1\0\3\21\1\0\1\21\1\53"+
    "\35\21\1\u01e2\35\21\1\0\3\21\1\0\1\21\1\53"+
    "\32\21\1\u01e3\40\21\1\0\3\21\1\0\1\21\1\53"+
    "\16\21\1\u01e4\54\21\1\0\3\21\1\0\1\21\1\53"+
    "\37\21\1\u01e5\33\21\1\0\3\21\1\0\1\21\1\53"+
    "\21\21\1\u01e6\51\21\1\0\3\21\1\0\1\21\1\53"+
    "\32\21\1\u01e7\40\21\1\0\3\21\1\0\1\21\1\53"+
    "\37\21\1\u01e8\33\21\1\0\3\21\1\0\1\21\1\u01e9"+
    "\73\21\1\0\3\21\1\0\1\21\1\53\42\21\1\u01ea"+
    "\30\21\1\0\3\21\1\0\1\21\1\53\26\21\1\u01eb"+
    "\44\21\1\0\3\21\1\0\1\21\1\u01ec\73\21\1\0"+
    "\1\21\45\0\1\u01ed\26\0\1\u01ed\52\0\1\u01ee\26\0"+
    "\1\u01ee\5\0\2\21\1\0\1\21\1\53\22\21\1\u01ef"+
    "\50\21\1\0\3\21\1\0\1\21\1\53\40\21\1\u01f0"+
    "\32\21\1\0\3\21\1\0\1\21\1\53\40\21\1\u01f1"+
    "\32\21\1\0\3\21\1\0\1\21\1\53\33\21\1\u01f2"+
    "\37\21\1\0\3\21\1\0\1\21\1\53\31\21\1\u01f3"+
    "\41\21\1\0\3\21\1\0\1\21\1\53\26\21\1\u01f4"+
    "\44\21\1\0\3\21\1\0\1\21\1\u01f5\73\21\1\0"+
    "\3\21\1\0\1\21\1\53\20\21\1\u01f6\52\21\1\0"+
    "\3\21\1\0\1\21\1\53\34\21\1\u01f7\36\21\1\0"+
    "\3\21\1\0\1\21\1\53\42\21\1\u01f8\30\21\1\0"+
    "\3\21\1\0\1\21\1\53\37\21\1\u01f9\33\21\1\0"+
    "\3\21\1\0\1\21\1\53\26\21\1\u01fa\44\21\1\0"+
    "\3\21\1\0\1\21\1\u01fb\73\21\1\0\3\21\1\0"+
    "\1\21\1\53\35\21\1\u01fc\35\21\1\0\3\21\1\0"+
    "\1\21\1\53\32\21\1\u01fd\40\21\1\0\3\21\1\0"+
    "\1\21\1\53\34\21\1\u01fe\36\21\1\0\3\21\1\0"+
    "\1\21\1\53\34\21\1\u01ff\36\21\1\0\3\21\1\0"+
    "\1\21\1\53\33\21\1\u0200\37\21\1\0\3\21\1\0"+
    "\1\21\1\u0201\73\21\1\0\3\21\1\0\1\21\1\53"+
    "\42\21\1\u0202\30\21\1\0\3\21\1\0\1\21\1\53"+
    "\22\21\1\u0203\50\21\1\0\3\21\1\0\1\21\1\53"+
    "\16\21\1\u0204\54\21\1\0\3\21\1\0\1\21\1\53"+
    "\34\21\1\u0205\36\21\1\0\3\21\1\0\1\21\1\53"+
    "\26\21\1\u0206\44\21\1\0\3\21\1\0\1\21\1\53"+
    "\33\21\1\u0207\37\21\1\0\3\21\1\0\1\21\1\53"+
    "\31\21\1\u0208\41\21\1\0\3\21\1\0\1\21\1\53"+
    "\26\21\1\u0209\44\21\1\0\3\21\1\0\1\21\1\53"+
    "\34\21\1\u020a\36\21\1\0\3\21\1\0\1\21\1\53"+
    "\34\21\1\u020b\36\21\1\0\3\21\1\0\1\21\1\53"+
    "\42\21\1\u020c\30\21\1\0\3\21\1\0\1\21\1\u020d"+
    "\73\21\1\0\3\21\1\0\1\21\1\53\33\21\1\u020e"+
    "\37\21\1\0\3\21\1\0\1\21\1\53\41\21\1\u020f"+
    "\31\21\1\0\3\21\1\0\1\21\1\53\16\21\1\u0210"+
    "\54\21\1\0\3\21\1\0\1\21\1\53\33\21\1\u0211"+
    "\37\21\1\0\3\21\1\0\1\21\1\53\37\21\1\u0212"+
    "\33\21\1\0\3\21\1\0\1\21\1\u0213\73\21\1\0"+
    "\3\21\1\0\1\21\1\53\34\21\1\u0214\36\21\1\0"+
    "\3\21\1\0\1\21\1\53\22\21\1\u0215\50\21\1\0"+
    "\3\21\1\0\1\21\1\53\16\21\1\u0216\54\21\1\0"+
    "\3\21\1\0\1\21\1\53\34\21\1\u0217\36\21\1\0"+
    "\3\21\1\0\1\21\1\u0218\73\21\1\0\3\21\1\0"+
    "\1\21\1\53\33\21\1\u0219\37\21\1\0\3\21\1\0"+
    "\1\21\1\53\31\21\1\u021a\41\21\1\0\3\21\1\0"+
    "\1\21\1\u021b\73\21\1\0\3\21\1\0\1\21\1\53"+
    "\22\21\1\u021c\50\21\1\0\3\21\1\0\1\21\1\53"+
    "\37\21\1\u021d\33\21\1\0\3\21\1\0\1\21\1\53"+
    "\41\21\1\u021e\31\21\1\0\3\21\1\0\1\21\1\53"+
    "\26\21\1\u021f\44\21\1\0\3\21\1\0\1\21\1\53"+
    "\33\21\1\u0220\37\21\1\0\3\21\1\0\1\21\1\53"+
    "\33\21\1\u0221\37\21\1\0\3\21\1\0\1\21\1\53"+
    "\37\21\1\u0222\33\21\1\0\3\21\1\0\1\21\1\u0223"+
    "\73\21\1\0\3\21\1\0\1\21\1\53\22\21\1\u0224"+
    "\50\21\1\0\3\21\1\0\1\21\1\53\16\21\1\u0225"+
    "\54\21\1\0\3\21\1\0\1\21\1\u0226\73\21\1\0"+
    "\3\21\1\0\1\21\1\53\26\21\1\u0227\44\21\1\0"+
    "\3\21\1\0\1\21\1\53\22\21\1\u0228\50\21\1\0"+
    "\3\21\1\0\1\21\1\53\34\21\1\u0229\36\21\1\0"+
    "\3\21\1\0\1\21\1\u022a\73\21\1\0\3\21\1\0"+
    "\1\21\1\53\41\21\1\u022b\31\21\1\0\3\21\1\0"+
    "\1\21\1\53\26\21\1\u022c\44\21\1\0\3\21\1\0"+
    "\1\21\1\53\33\21\1\u022d\37\21\1\0\3\21\1\0"+
    "\1\21\1\53\37\21\1\u022e\33\21\1\0\3\21\1\0"+
    "\1\21\1\53\34\21\1\u022f\36\21\1\0\3\21\1\0"+
    "\1\21\1\u0230\73\21\1\0\3\21\1\0\1\21\1\u0231"+
    "\73\21\1\0\3\21\1\0\1\21\1\53\22\21\1\u0232"+
    "\50\21\1\0\3\21\1\0\1\21\1\53\34\21\1\u0233"+
    "\36\21\1\0\3\21\1\0\1\21\1\53\41\21\1\u0234"+
    "\31\21\1\0\3\21\1\0\1\21\1\53\26\21\1\u0235"+
    "\44\21\1\0\3\21\1\0\1\21\1\u0236\73\21\1\0"+
    "\3\21\1\0\1\21\1\u0237\73\21\1\0\3\21\1\0"+
    "\1\21\1\u0238\73\21\1\0\3\21\1\0\1\21\1\53"+
    "\22\21\1\u0239\50\21\1\0\3\21\1\0\1\21\1\53"+
    "\34\21\1\u023a\36\21\1\0\3\21\1\0\1\21\1\u023b"+
    "\73\21\1\0\3\21\1\0\1\21\1\u023c\73\21\1\0"+
    "\1\21";

  private static int [] zzUnpackTrans() {
    int [] result = new int[33066];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\11\1\1\5\11\2\1\4\11\32\0\1\11"+
    "\1\0\3\11\74\0\1\11\6\0\1\11\7\0\1\11"+
    "\56\0\1\11\25\0\1\11\22\0\1\11\16\0\1\11"+
    "\3\0\1\11\1\0\1\11\7\0\1\11\14\0\1\11"+
    "\4\0\1\11\11\0\1\11\13\0\2\11\4\0\1\11"+
    "\10\0\1\11\22\0\1\11\3\0\1\11\15\0\1\11"+
    "\3\0\1\11\4\0\2\11\16\0\1\11\1\0\1\11"+
    "\24\0\1\11\7\0\1\11\7\0\2\11\11\0\2\11"+
    "\17\0\1\11\25\0\2\1\15\0\1\11\14\0\1\11"+
    "\6\0\1\11\7\0\1\11\2\0\3\11\6\0\1\11"+
    "\5\0\1\11\5\0\1\11\13\0\1\11\5\0\1\11"+
    "\4\0\1\11\2\0\1\11\7\0\1\11\2\0\1\11"+
    "\3\0\1\11\5\0\2\11\4\0\3\11\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[572];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SolicitudesLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error en linea: " + yyline+1 + " - Columna: " + yycolumn+1 + ". La expresión: " + yytext() + " no forma parte del lenguaje");
            }
            // fall through
          case 75: break;
          case 2:
            { /* IGNORAR */
            }
            // fall through
          case 76: break;
          case 3:
            { return new Symbol(EXCLAMACION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 77: break;
          case 4:
            { return new Symbol(COMA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 78: break;
          case 5:
            { return new Symbol(PUNTOS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 79: break;
          case 6:
            { return new Symbol(MENOR_QUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 80: break;
          case 7:
            { return new Symbol(IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 81: break;
          case 8:
            { return new Symbol(MAYOR_QUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 82: break;
          case 9:
            { return new Symbol(CORCHETE_A, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 83: break;
          case 10:
            { return new Symbol(CORCHETE_C, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 84: break;
          case 11:
            { return new Symbol(LLAVE_A, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 85: break;
          case 12:
            { return new Symbol(LLAVE_C, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 86: break;
          case 13:
            { System.out.println("Se encontró allcharnospace: " + yytext()); return new Symbol(ALLCHARACTERSNOSPACE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 87: break;
          case 14:
            { return new Symbol(OPTIONS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 88: break;
          case 15:
            { return new Symbol(IDENTIFICADOR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 89: break;
          case 16:
            { return new Symbol(NUMERO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 90: break;
          case 17:
            { return new Symbol(ID, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 91: break;
          case 18:
            { return new Symbol(NO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 92: break;
          case 19:
            { return new Symbol(SI, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 93: break;
          case 20:
            { return new Symbol(URL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 94: break;
          case 21:
            { return new Symbol(DARK, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 95: break;
          case 22:
            { return new Symbol(TEMA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 96: break;
          case 23:
            { return new Symbol(BOTON, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 97: break;
          case 24:
            { return new Symbol(CLASE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 98: break;
          case 25:
            { return new Symbol(COMBO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 99: break;
          case 26:
            { return new Symbol(FILAS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 100: break;
          case 27:
            { return new Symbol(RADIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 101: break;
          case 28:
            { return new Symbol(WHITE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 102: break;
          case 29:
            { return new Symbol(CENTRO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 103: break;
          case 30:
            { return new Symbol(IMAGEN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 104: break;
          case 31:
            { return new Symbol(INDICE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 105: break;
          case 32:
            { return new Symbol(NOMBRE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 106: break;
          case 33:
            { return new Symbol(TITULO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 107: break;
          case 34:
            { return new Symbol(DERECHA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 108: break;
          case 35:
            { return new Symbol(FICHERO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 109: break;
          case 36:
            { return new Symbol(USUARIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 110: break;
          case 37:
            { return new Symbol(FECHA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 111: break;
          case 38:
            { return new Symbol(CHECKBOX, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 112: break;
          case 39:
            { return new Symbol(COLUMNAS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 113: break;
          case 40:
            { return new Symbol(OPCIONES, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 114: break;
          case 41:
            { return new Symbol(PASSWORD, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 115: break;
          case 42:
            { return new Symbol(IZQUIERDA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 116: break;
          case 43:
            { return new Symbol(REQUERIDO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 117: break;
          case 44:
            { return new Symbol(ALINEACION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 118: break;
          case 45:
            { return new Symbol(AREA_TEXTO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 119: break;
          case 46:
            { return new Symbol(FORMULARIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 120: break;
          case 47:
            { return new Symbol(JUSTIFICAR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 121: break;
          case 48:
            { return new Symbol(CAMPO_TEXTO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 122: break;
          case 49:
            { return new Symbol(FIN_SOLICITUD, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 123: break;
          case 50:
            { return new Symbol(INI_SOLICITUD, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 124: break;
          case 51:
            { return new Symbol(NOMBRE_CAMPO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 125: break;
          case 52:
            { System.out.println("crear usuario"); return new Symbol(CREAR_USUARIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 126: break;
          case 53:
            { return new Symbol(LOGIN_USUARIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 127: break;
          case 54:
            { return new Symbol(TEXTO_VISIBLE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 128: break;
          case 55:
            { return new Symbol(USUARIO_NUEVO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 129: break;
          case 56:
            { return new Symbol(FIN_SOLICITUDES, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 130: break;
          case 57:
            { return new Symbol(INI_SOLICITUDES, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 131: break;
          case 58:
            { return new Symbol(FECHA_CREACION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 132: break;
          case 59:
            { return new Symbol(NUEVO_PASSWORD, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 133: break;
          case 60:
            { return new Symbol(CONSULTAR_DATOS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 134: break;
          case 61:
            { return new Symbol(USUARIO_ANTIGUO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 135: break;
          case 62:
            { return new Symbol(ELIMINAR_USUARIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 136: break;
          case 63:
            { return new Symbol(NUEVO_FORMULARIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 137: break;
          case 64:
            { return new Symbol(USUARIO_CREACION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 138: break;
          case 65:
            { return new Symbol(MODIFICAR_USUARIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 139: break;
          case 66:
            { return new Symbol(AGREGAR_COMPONENTE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 140: break;
          case 67:
            { return new Symbol(FECHA_MODIFICACION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 141: break;
          case 68:
            { return new Symbol(ELIMINAR_COMPONENTE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 142: break;
          case 69:
            { return new Symbol(ELIMINAR_FORMULARIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 143: break;
          case 70:
            { return new Symbol(CREDENCIALES_USUARIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 144: break;
          case 71:
            { return new Symbol(MODIFICAR_COMPONENTE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 145: break;
          case 72:
            { return new Symbol(MODIFICAR_FORMULARIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 146: break;
          case 73:
            { return new Symbol(PARAMETROS_COMPONENTE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 147: break;
          case 74:
            { return new Symbol(PARAMETROS_FORMULARIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 148: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
