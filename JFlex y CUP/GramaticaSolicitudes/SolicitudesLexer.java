// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: LexemasSolicitudes.jflex

package com.froi.pruebasgramaticas;
import java_cup.runtime.*;
import static com.froi.pruebasgramaticas.sym.*;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class SolicitudesLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\2\1\1\0\2\1\22\0\1\1\1\2\1\3"+
    "\1\0\1\4\1\0\1\5\5\0\1\6\1\7\2\0"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\14\2\15"+
    "\1\16\1\17\1\0\1\20\1\21\1\22\2\0\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\2\34"+
    "\1\53\1\0\1\54\1\0\1\55\1\0\1\56\1\34"+
    "\1\57\1\60\1\61\1\62\1\34\1\63\1\64\1\34"+
    "\1\65\1\66\1\34\1\67\1\70\2\34\1\71\1\72"+
    "\1\73\1\74\5\34\1\75\1\1\1\76\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\4\1\1\15\1\16"+
    "\1\17\1\20\1\21\24\0\1\22\62\0\1\23\20\0"+
    "\1\24\43\0\1\25\40\0\1\26\15\0\1\27\2\0"+
    "\1\30\1\0\1\31\6\0\1\32\12\0\1\33\27\0"+
    "\1\34\1\35\2\0\1\36\10\0\1\37\25\0\1\40"+
    "\13\0\1\41\3\0\1\42\4\0\1\43\1\44\14\0"+
    "\1\45\1\0\1\46\32\0\1\47\7\0\1\50\1\51"+
    "\11\0\1\52\17\0\1\53\25\0\1\54\1\55\15\0"+
    "\1\56\14\0\1\57\6\0\1\60\7\0\1\61\2\0"+
    "\1\62\1\63\1\64\6\0\1\65\5\0\1\66\5\0"+
    "\1\67\13\0\1\70\5\0\1\71\4\0\1\72\2\0"+
    "\1\73\7\0\1\74\2\0\1\75\3\0\1\76\5\0"+
    "\1\77\1\100\4\0\1\101\1\102\1\103\2\0\1\104"+
    "\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[523];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\77\0\77\0\176\0\77\0\77\0\77"+
    "\0\77\0\77\0\77\0\77\0\77\0\275\0\374\0\u013b"+
    "\0\u017a\0\77\0\77\0\77\0\77\0\77\0\u01b9\0\u01f8"+
    "\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372\0\u03b1\0\u03f0"+
    "\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9\0\u05e8"+
    "\0\u0627\0\u0666\0\77\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1"+
    "\0\u07e0\0\u081f\0\u085e\0\u089d\0\u08dc\0\u091b\0\u095a\0\u0999"+
    "\0\u09d8\0\u0a17\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u0b91"+
    "\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89"+
    "\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42\0\u0f81"+
    "\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179"+
    "\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u12b4\0\77\0\u12f3\0\u1332"+
    "\0\u1371\0\u13b0\0\u13ef\0\u142e\0\u146d\0\u14ac\0\u14eb\0\u152a"+
    "\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u16a4\0\77\0\u16e3"+
    "\0\u1722\0\u1761\0\u17a0\0\u17df\0\u181e\0\u185d\0\u189c\0\u18db"+
    "\0\u191a\0\u1959\0\u1998\0\u19d7\0\u1a16\0\u1a55\0\u1a94\0\u1ad3"+
    "\0\u1b12\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb"+
    "\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7\0\u1e06\0\u1e45\0\u1e84\0\u1ec3"+
    "\0\u1f02\0\u1f41\0\77\0\u1f80\0\u1fbf\0\u1ffe\0\u203d\0\u207c"+
    "\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u21b7\0\u21f6\0\u2235\0\u2274"+
    "\0\u22b3\0\u22f2\0\u2331\0\u2370\0\u23af\0\u23ee\0\u242d\0\u246c"+
    "\0\u24ab\0\u24ea\0\u2529\0\u2568\0\u25a7\0\u25e6\0\u2625\0\u2664"+
    "\0\u26a3\0\u26e2\0\u2721\0\77\0\u2760\0\u279f\0\u27de\0\u281d"+
    "\0\u285c\0\u289b\0\u28da\0\u2919\0\u2958\0\u2997\0\u29d6\0\u2a15"+
    "\0\u2a54\0\77\0\u2a93\0\u2ad2\0\77\0\u2b11\0\77\0\u2b50"+
    "\0\u2b8f\0\u2bce\0\u2c0d\0\u2c4c\0\u2c8b\0\77\0\u2cca\0\u2d09"+
    "\0\u2d48\0\u2d87\0\u2dc6\0\u2e05\0\u2e44\0\u2e83\0\u2ec2\0\u2f01"+
    "\0\77\0\u2f40\0\u2f7f\0\u2fbe\0\u2ffd\0\u303c\0\u307b\0\u30ba"+
    "\0\u30f9\0\u3138\0\u3177\0\u31b6\0\u31f5\0\u3234\0\u3273\0\u32b2"+
    "\0\u32f1\0\u3330\0\u336f\0\u33ae\0\u33ed\0\u342c\0\u346b\0\u34aa"+
    "\0\77\0\77\0\u34e9\0\u3528\0\77\0\u3567\0\u35a6\0\u35e5"+
    "\0\u3624\0\u3663\0\u36a2\0\u36e1\0\u3720\0\77\0\u375f\0\u379e"+
    "\0\u37dd\0\u381c\0\u385b\0\u389a\0\u38d9\0\u3918\0\u3957\0\u3996"+
    "\0\u39d5\0\u3a14\0\u3a53\0\u3a92\0\u3ad1\0\u3b10\0\u3b4f\0\u3b8e"+
    "\0\u3bcd\0\u3c0c\0\u3c4b\0\77\0\u3c8a\0\u3cc9\0\u3d08\0\u3d47"+
    "\0\u3d86\0\u3dc5\0\u3e04\0\u3e43\0\u3e82\0\u3ec1\0\u3f00\0\77"+
    "\0\u3f3f\0\u3f7e\0\u3fbd\0\77\0\u3ffc\0\u403b\0\u407a\0\u40b9"+
    "\0\77\0\77\0\u40f8\0\u4137\0\u4176\0\u41b5\0\u41f4\0\u4233"+
    "\0\u4272\0\u42b1\0\u42f0\0\u432f\0\u436e\0\u43ad\0\77\0\u43ec"+
    "\0\77\0\u442b\0\u446a\0\u44a9\0\u44e8\0\u4527\0\u4566\0\u45a5"+
    "\0\u45e4\0\u4623\0\u4662\0\u46a1\0\u46e0\0\u471f\0\u475e\0\u479d"+
    "\0\u47dc\0\u481b\0\u485a\0\u4899\0\u48d8\0\u4917\0\u4956\0\u4995"+
    "\0\u49d4\0\u4a13\0\u4a52\0\77\0\u4a91\0\u4ad0\0\u4b0f\0\u4b4e"+
    "\0\u4b8d\0\u4bcc\0\u4c0b\0\77\0\77\0\u4c4a\0\u4c89\0\u4cc8"+
    "\0\u4d07\0\u4d46\0\u4d85\0\u4dc4\0\u4e03\0\u4e42\0\77\0\u4e81"+
    "\0\u4ec0\0\u4eff\0\u4f3e\0\u4f7d\0\u4fbc\0\u4ffb\0\u503a\0\u5079"+
    "\0\u50b8\0\u50f7\0\u5136\0\u5175\0\u51b4\0\u51f3\0\77\0\u5232"+
    "\0\u5271\0\u52b0\0\u52ef\0\u532e\0\u536d\0\u53ac\0\u53eb\0\u542a"+
    "\0\u5469\0\u54a8\0\u54e7\0\u5526\0\u5565\0\u55a4\0\u55e3\0\u5622"+
    "\0\u5661\0\u56a0\0\u56df\0\u571e\0\u575d\0\u579c\0\u57db\0\u581a"+
    "\0\u5859\0\u5898\0\u58d7\0\u5916\0\u5955\0\u5994\0\u59d3\0\u5a12"+
    "\0\u5a51\0\u5a90\0\u5acf\0\77\0\u5b0e\0\u5b4d\0\u5b8c\0\u5bcb"+
    "\0\u5c0a\0\u5c49\0\u5c88\0\u5cc7\0\u5d06\0\u5d45\0\u5d84\0\u5dc3"+
    "\0\77\0\u5e02\0\u5e41\0\u5e80\0\u5ebf\0\u5efe\0\u5f3d\0\77"+
    "\0\u5f7c\0\u5fbb\0\u5ffa\0\u6039\0\u6078\0\u60b7\0\u60f6\0\77"+
    "\0\u6135\0\u6174\0\77\0\77\0\77\0\u61b3\0\u61f2\0\u6231"+
    "\0\u6270\0\u62af\0\u62ee\0\77\0\u632d\0\u636c\0\u63ab\0\u63ea"+
    "\0\u6429\0\77\0\u6468\0\u64a7\0\u64e6\0\u6525\0\u6564\0\77"+
    "\0\u65a3\0\u65e2\0\u6621\0\u6660\0\u669f\0\u66de\0\u671d\0\u675c"+
    "\0\u679b\0\u67da\0\u6819\0\77\0\u6858\0\u6897\0\u68d6\0\u6915"+
    "\0\u6954\0\77\0\u6993\0\u69d2\0\u6a11\0\u6a50\0\77\0\u6a8f"+
    "\0\u6ace\0\77\0\u6b0d\0\u6b4c\0\u6b8b\0\u6bca\0\u6c09\0\u6c48"+
    "\0\u6c87\0\77\0\u6cc6\0\u6d05\0\77\0\u6d44\0\u6d83\0\u6dc2"+
    "\0\77\0\u6e01\0\u6e40\0\u6e7f\0\u6ebe\0\u6efd\0\77\0\77"+
    "\0\u6f3c\0\u6f7b\0\u6fba\0\u6ff9\0\77\0\77\0\77\0\u7038"+
    "\0\u7077\0\77\0\77";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[523];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\7\2\1\12\1\13\1\14\1\15\3\2\1\16\1\2"+
    "\1\17\2\2\1\20\15\2\1\21\1\2\1\22\1\23"+
    "\1\24\4\2\1\17\1\2\1\20\10\2\1\25\1\26"+
    "\107\0\2\27\5\30\4\0\1\31\1\32\1\33\1\27"+
    "\1\34\1\35\2\27\1\36\2\27\1\37\1\40\1\41"+
    "\1\42\1\43\1\27\1\44\1\27\1\45\1\46\3\27"+
    "\3\0\17\27\60\0\1\47\53\0\1\50\30\0\1\50"+
    "\52\0\1\51\26\0\1\51\72\0\1\52\16\0\1\53"+
    "\4\0\7\27\4\0\30\27\3\0\17\27\5\0\1\53"+
    "\4\0\7\54\4\0\30\27\3\0\17\27\5\0\1\53"+
    "\4\0\7\27\4\0\6\27\1\55\4\27\1\56\5\27"+
    "\1\57\6\27\3\0\17\27\5\0\1\53\4\0\7\27"+
    "\4\0\16\27\1\60\11\27\3\0\17\27\5\0\1\53"+
    "\4\0\7\27\4\0\1\61\6\27\1\62\3\27\1\63"+
    "\2\27\1\64\2\27\1\65\6\27\3\0\17\27\5\0"+
    "\1\53\4\0\7\27\4\0\13\27\1\66\14\27\3\0"+
    "\17\27\5\0\1\53\4\0\7\27\4\0\4\27\1\67"+
    "\3\27\1\70\5\27\1\71\11\27\3\0\17\27\5\0"+
    "\1\53\4\0\7\27\4\0\3\27\1\72\10\27\1\73"+
    "\1\74\12\27\3\0\17\27\5\0\1\53\4\0\7\27"+
    "\4\0\16\27\1\75\11\27\3\0\17\27\5\0\1\53"+
    "\4\0\7\27\4\0\16\27\1\76\11\27\3\0\17\27"+
    "\5\0\1\53\4\0\7\27\4\0\16\27\1\77\5\27"+
    "\1\100\3\27\3\0\17\27\5\0\1\53\4\0\7\27"+
    "\4\0\17\27\1\101\10\27\3\0\17\27\5\0\1\53"+
    "\4\0\7\27\4\0\1\102\27\27\3\0\17\27\5\0"+
    "\1\53\4\0\7\27\4\0\1\103\3\27\1\104\23\27"+
    "\3\0\17\27\5\0\1\53\4\0\7\27\4\0\4\27"+
    "\1\105\3\27\1\106\17\27\3\0\17\27\5\0\1\53"+
    "\4\0\7\27\4\0\21\27\1\107\1\110\5\27\3\0"+
    "\17\27\73\0\1\111\45\0\1\112\26\0\1\112\42\0"+
    "\1\113\30\0\1\113\76\0\1\114\15\0\1\53\4\0"+
    "\7\115\4\0\30\27\3\0\17\27\5\0\1\53\4\0"+
    "\7\27\4\0\21\27\1\116\6\27\3\0\17\27\5\0"+
    "\1\53\4\0\7\27\4\0\10\27\1\117\17\27\3\0"+
    "\17\27\5\0\1\53\4\0\7\27\4\0\4\27\1\120"+
    "\23\27\3\0\17\27\5\0\1\53\4\0\7\27\4\0"+
    "\23\27\1\121\4\27\3\0\17\27\5\0\1\53\4\0"+
    "\7\27\4\0\14\27\1\122\13\27\3\0\17\27\5\0"+
    "\1\53\4\0\7\27\4\0\4\27\1\123\23\27\3\0"+
    "\17\27\5\0\1\53\4\0\7\27\4\0\1\124\27\27"+
    "\3\0\17\27\5\0\1\53\4\0\7\27\4\0\13\27"+
    "\1\125\1\126\1\127\12\27\3\0\17\27\5\0\1\53"+
    "\4\0\7\27\4\0\4\27\1\130\23\27\3\0\17\27"+
    "\5\0\1\53\4\0\7\27\4\0\10\27\1\131\17\27"+
    "\3\0\17\27\5\0\1\53\4\0\7\27\4\0\2\27"+
    "\1\132\25\27\3\0\17\27\5\0\1\53\4\0\7\27"+
    "\4\0\2\27\1\133\10\27\1\134\14\27\3\0\17\27"+
    "\5\0\1\53\4\0\7\27\4\0\21\27\1\135\6\27"+
    "\3\0\17\27\5\0\1\136\4\0\7\27\4\0\30\27"+
    "\3\0\17\27\5\0\1\53\4\0\7\27\4\0\1\137"+
    "\27\27\3\0\17\27\5\0\1\53\4\0\7\27\4\0"+
    "\3\27\1\140\24\27\3\0\17\27\5\0\1\53\4\0"+
    "\7\27\4\0\6\27\1\141\21\27\3\0\17\27\5\0"+
    "\1\53\4\0\7\27\4\0\3\27\1\142\24\27\3\0"+
    "\17\27\5\0\1\53\4\0\7\27\4\0\14\27\1\143"+
    "\13\27\3\0\17\27\5\0\1\53\4\0\7\27\4\0"+
    "\4\27\1\144\23\27\3\0\17\27\5\0\1\53\4\0"+
    "\7\27\4\0\2\27\1\145\25\27\3\0\17\27\5\0"+
    "\1\53\4\0\7\27\4\0\21\27\1\146\1\147\5\27"+
    "\3\0\17\27\5\0\1\53\4\0\7\27\4\0\3\27"+
    "\1\150\24\27\3\0\17\27\5\0\1\53\4\0\7\27"+
    "\4\0\20\27\1\151\7\27\3\0\17\27\5\0\1\53"+
    "\4\0\7\27\4\0\14\27\1\152\12\27\1\153\3\0"+
    "\17\27\5\0\1\53\4\0\7\27\4\0\23\27\1\154"+
    "\4\27\3\0\17\27\5\0\1\53\4\0\7\27\4\0"+
    "\13\27\1\155\14\27\3\0\17\27\5\0\1\53\4\0"+
    "\7\27\4\0\24\27\1\156\3\27\3\0\17\27\67\0"+
    "\1\157\66\0\1\160\76\0\1\161\114\0\1\162\6\0"+
    "\1\53\4\0\7\163\4\0\30\27\3\0\17\27\5\0"+
    "\1\53\4\0\7\27\4\0\4\27\1\164\23\27\3\0"+
    "\17\27\5\0\1\53\4\0\7\27\4\0\15\27\1\165"+
    "\12\27\3\0\17\27\5\0\1\53\4\0\7\27\4\0"+
    "\1\166\27\27\3\0\17\27\5\0\1\53\4\0\7\27"+
    "\4\0\16\27\1\167\11\27\3\0\17\27\5\0\1\53"+
    "\4\0\7\27\4\0\17\27\1\170\10\27\3\0\17\27"+
    "\5\0\1\53\4\0\7\27\4\0\2\27\1\171\25\27"+
    "\3\0\17\27\5\0\1\53\4\0\7\27\4\0\22\27"+
    "\1\172\5\27\3\0\17\27\5\0\1\53\4\0\7\27"+
    "\4\0\24\27\1\173\3\27\3\0\17\27\5\0\1\53"+
    "\4\0\7\27\4\0\1\27\1\174\26\27\3\0\17\27"+
    "\5\0\1\53\4\0\7\27\4\0\22\27\1\175\5\27"+
    "\3\0\17\27\5\0\1\53\4\0\7\27\4\0\1\176"+
    "\2\27\1\177\24\27\3\0\17\27\5\0\1\53\4\0"+
    "\7\27\4\0\14\27\1\200\13\27\3\0\17\27\5\0"+
    "\1\53\4\0\7\27\4\0\7\27\1\201\20\27\3\0"+
    "\17\27\5\0\1\53\4\0\7\27\4\0\7\27\1\202"+
    "\20\27\3\0\17\27\5\0\1\53\4\0\7\27\4\0"+
    "\1\203\27\27\3\0\17\27\5\0\1\53\4\0\7\27"+
    "\4\0\14\27\1\204\13\27\3\0\17\27\5\0\1\53"+
    "\4\0\7\27\4\0\6\27\1\205\21\27\3\0\17\27"+
    "\5\0\1\53\4\0\7\27\4\0\10\27\1\206\17\27"+
    "\3\0\17\27\5\0\1\53\4\0\7\27\4\0\10\27"+
    "\1\207\17\27\3\0\17\27\5\0\1\53\4\0\7\27"+
    "\4\0\10\27\1\210\17\27\3\0\17\27\5\0\1\53"+
    "\4\0\7\27\4\0\1\27\1\211\26\27\3\0\17\27"+
    "\5\0\1\53\4\0\7\27\4\0\25\27\1\212\2\27"+
    "\3\0\17\27\5\0\1\53\4\0\7\27\4\0\10\27"+
    "\1\213\17\27\3\0\17\27\5\0\1\53\4\0\7\27"+
    "\4\0\1\214\27\27\3\0\17\27\5\0\1\53\4\0"+
    "\7\27\4\0\22\27\1\215\5\27\3\0\17\27\5\0"+
    "\1\53\4\0\7\27\4\0\10\27\1\216\17\27\3\0"+
    "\17\27\5\0\1\53\4\0\7\27\4\0\24\27\1\217"+
    "\3\27\3\0\17\27\5\0\1\53\4\0\7\27\4\0"+
    "\1\220\27\27\3\0\17\27\5\0\1\53\4\0\7\27"+
    "\4\0\23\27\1\221\4\27\3\0\17\27\5\0\1\53"+
    "\4\0\7\27\4\0\24\27\1\222\3\27\3\0\17\27"+
    "\5\0\1\223\4\0\7\27\4\0\30\27\3\0\17\27"+
    "\5\0\1\53\4\0\7\27\4\0\1\224\27\27\3\0"+
    "\17\27\47\0\1\225\24\0\1\225\51\0\1\226\24\0"+
    "\1\226\65\0\1\157\20\0\1\53\3\0\1\227\7\27"+
    "\4\0\30\27\3\0\17\27\5\0\1\53\4\0\7\27"+
    "\4\0\6\27\1\230\21\27\3\0\17\27\5\0\1\53"+
    "\4\0\7\27\4\0\4\27\1\231\23\27\3\0\17\27"+
    "\5\0\1\53\4\0\7\27\4\0\30\27\2\0\1\232"+
    "\17\27\5\0\1\53\4\0\7\27\4\0\15\27\1\233"+
    "\12\27\3\0\17\27\5\0\1\53\4\0\7\27\4\0"+
    "\16\27\1\234\11\27\3\0\17\27\5\0\1\53\4\0"+
    "\7\27\4\0\12\27\1\235\15\27\3\0\17\27\5\0"+
    "\1\53\4\0\7\27\4\0\4\27\1\236\23\27\3\0"+
    "\17\27\5\0\1\53\4\0\7\27\4\0\14\27\1\237"+
    "\13\27\3\0\17\27\5\0\1\53\4\0\7\27\4\0"+
    "\16\27\1\240\11\27\3\0\17\27\5\0\1\53\4\0"+
    "\7\27\4\0\24\27\1\241\3\27\3\0\17\27\5\0"+
    "\1\53\4\0\7\27\4\0\21\27\1\242\6\27\3\0"+
    "\17\27\5\0\1\53\4\0\7\27\4\0\4\27\1\243"+
    "\23\27\3\0\17\27\5\0\1\53\4\0\7\27\4\0"+
    "\10\27\1\244\17\27\3\0\17\27\5\0\1\53\4\0"+
    "\7\27\4\0\1\245\27\27\3\0\17\27\5\0\1\53"+
    "\4\0\7\27\4\0\4\27\1\246\23\27\3\0\17\27"+
    "\5\0\1\53\4\0\7\27\4\0\22\27\1\247\5\27"+
    "\3\0\17\27\5\0\1\53\4\0\7\27\4\0\24\27"+
    "\1\250\3\27\3\0\17\27\5\0\1\53\4\0\7\27"+
    "\4\0\4\27\1\251\23\27\3\0\17\27\5\0\1\53"+
    "\4\0\7\27\4\0\2\27\1\252\25\27\3\0\17\27"+
    "\5\0\1\53\4\0\7\27\4\0\15\27\1\253\12\27"+
    "\3\0\17\27\5\0\1\53\4\0\7\27\4\0\5\27"+
    "\1\254\22\27\3\0\17\27\5\0\1\53\4\0\7\27"+
    "\4\0\21\27\1\255\6\27\3\0\17\27\5\0\1\53"+
    "\4\0\7\27\4\0\16\27\1\256\11\27\3\0\17\27"+
    "\5\0\1\53\4\0\7\27\4\0\16\27\1\257\11\27"+
    "\3\0\17\27\5\0\1\53\4\0\7\27\4\0\14\27"+
    "\1\260\13\27\3\0\17\27\5\0\1\53\4\0\7\27"+
    "\4\0\26\27\1\261\1\27\3\0\17\27\5\0\1\53"+
    "\4\0\7\27\4\0\16\27\1\262\11\27\3\0\17\27"+
    "\5\0\1\53\4\0\7\27\4\0\4\27\1\263\23\27"+
    "\3\0\17\27\5\0\1\264\4\0\7\27\4\0\30\27"+
    "\3\0\17\27\5\0\1\53\4\0\7\27\4\0\16\27"+
    "\1\265\11\27\3\0\17\27\5\0\1\53\4\0\7\27"+
    "\4\0\13\27\1\266\14\27\3\0\17\27\5\0\1\53"+
    "\4\0\7\27\4\0\21\27\1\267\6\27\3\0\17\27"+
    "\43\0\1\270\26\0\1\270\47\0\1\271\26\0\1\271"+
    "\16\0\1\272\1\273\1\274\1\275\1\276\1\275\1\276"+
    "\63\0\1\53\4\0\7\27\4\0\1\277\27\27\3\0"+
    "\17\27\5\0\1\53\4\0\7\27\4\0\1\300\27\27"+
    "\3\0\17\27\50\0\1\301\33\0\1\302\4\0\7\27"+
    "\4\0\30\27\3\0\17\27\5\0\1\53\4\0\7\27"+
    "\4\0\30\27\2\0\1\303\17\27\5\0\1\53\4\0"+
    "\7\27\4\0\1\27\1\304\26\27\3\0\17\27\5\0"+
    "\1\305\4\0\7\27\4\0\30\27\3\0\17\27\5\0"+
    "\1\53\4\0\7\27\4\0\15\27\1\306\12\27\3\0"+
    "\17\27\5\0\1\307\4\0\7\27\4\0\30\27\3\0"+
    "\17\27\5\0\1\53\4\0\7\27\4\0\13\27\1\310"+
    "\14\27\3\0\17\27\5\0\1\53\4\0\7\27\4\0"+
    "\30\27\2\0\1\311\17\27\5\0\1\53\4\0\7\27"+
    "\4\0\15\27\1\312\12\27\3\0\17\27\5\0\1\53"+
    "\4\0\7\27\4\0\15\27\1\313\12\27\3\0\17\27"+
    "\5\0\1\53\4\0\7\27\4\0\30\27\2\0\1\314"+
    "\17\27\5\0\1\53\4\0\7\27\4\0\21\27\1\315"+
    "\6\27\3\0\17\27\5\0\1\316\4\0\7\27\4\0"+
    "\30\27\3\0\17\27\5\0\1\53\4\0\7\27\4\0"+
    "\13\27\1\317\14\27\3\0\17\27\5\0\1\53\4\0"+
    "\7\27\4\0\15\27\1\320\12\27\3\0\17\27\5\0"+
    "\1\53\4\0\7\27\4\0\4\27\1\321\23\27\3\0"+
    "\17\27\5\0\1\53\4\0\7\27\4\0\30\27\2\0"+
    "\1\322\17\27\5\0\1\53\4\0\7\27\4\0\10\27"+
    "\1\323\17\27\3\0\17\27\5\0\1\53\4\0\7\27"+
    "\4\0\4\27\1\324\23\27\3\0\17\27\5\0\1\53"+
    "\4\0\7\27\4\0\30\27\2\0\1\325\17\27\5\0"+
    "\1\53\4\0\7\27\4\0\15\27\1\326\12\27\3\0"+
    "\17\27\5\0\1\53\4\0\7\27\4\0\4\27\1\327"+
    "\23\27\3\0\17\27\5\0\1\53\4\0\7\27\4\0"+
    "\16\27\1\330\11\27\3\0\17\27\5\0\1\331\4\0"+
    "\7\27\4\0\30\27\3\0\17\27\5\0\1\53\4\0"+
    "\7\27\4\0\21\27\1\332\6\27\3\0\17\27\5\0"+
    "\1\53\4\0\7\27\4\0\30\27\2\0\1\333\17\27"+
    "\5\0\1\53\4\0\7\27\4\0\16\27\1\334\11\27"+
    "\3\0\17\27\5\0\1\53\4\0\7\27\4\0\10\27"+
    "\1\335\17\27\3\0\17\27\40\0\1\336\27\0\1\336"+
    "\46\0\1\337\27\0\1\337\21\0\1\275\1\274\1\275"+
    "\1\276\1\275\1\276\67\0\1\340\1\275\1\276\1\275"+
    "\73\0\1\341\76\0\1\340\76\0\1\342\72\0\1\53"+
    "\4\0\7\27\4\0\21\27\1\343\6\27\3\0\17\27"+
    "\5\0\1\53\4\0\7\27\4\0\2\27\1\344\25\27"+
    "\3\0\17\27\31\0\1\345\115\0\1\346\33\0\1\53"+
    "\4\0\7\27\4\0\16\27\1\347\11\27\3\0\17\27"+
    "\5\0\1\53\4\0\7\27\4\0\1\350\27\27\3\0"+
    "\17\27\5\0\1\53\4\0\7\27\4\0\23\27\1\351"+
    "\4\27\3\0\17\27\51\0\1\352\32\0\1\53\4\0"+
    "\7\27\4\0\2\27\1\353\25\27\3\0\17\27\5\0"+
    "\1\53\4\0\7\27\4\0\1\354\27\27\3\0\17\27"+
    "\27\0\1\355\11\0\1\356\42\0\1\53\4\0\7\27"+
    "\4\0\16\27\1\357\11\27\3\0\17\27\5\0\1\53"+
    "\4\0\7\27\4\0\1\360\27\27\3\0\17\27\5\0"+
    "\1\361\4\0\7\27\4\0\30\27\3\0\17\27\5\0"+
    "\1\362\4\0\7\27\4\0\30\27\3\0\17\27\51\0"+
    "\1\363\32\0\1\53\4\0\7\27\4\0\2\27\1\364"+
    "\25\27\3\0\17\27\5\0\1\365\4\0\7\27\4\0"+
    "\30\27\2\0\1\366\17\27\32\0\1\367\11\0\1\370"+
    "\37\0\1\53\4\0\7\27\4\0\4\27\1\371\23\27"+
    "\3\0\17\27\5\0\1\53\4\0\7\27\4\0\23\27"+
    "\1\372\4\27\3\0\17\27\5\0\1\53\4\0\7\27"+
    "\4\0\21\27\1\373\6\27\3\0\17\27\5\0\1\53"+
    "\4\0\7\27\4\0\10\27\1\374\17\27\3\0\17\27"+
    "\52\0\1\375\31\0\1\376\4\0\7\27\4\0\30\27"+
    "\3\0\17\27\5\0\1\53\4\0\7\27\4\0\16\27"+
    "\1\377\11\27\3\0\17\27\35\0\1\u0100\30\0\1\u0100"+
    "\45\0\1\u0101\30\0\1\u0101\22\0\1\u0102\2\u0103\1\u0104"+
    "\3\u0105\70\0\1\u0102\1\u0103\1\u0106\4\u0105\70\0\1\u0102"+
    "\2\u0103\1\u0107\3\u0105\63\0\1\53\4\0\7\27\4\0"+
    "\30\27\2\0\1\u0108\17\27\5\0\1\53\4\0\7\27"+
    "\4\0\10\27\1\u0109\17\27\3\0\17\27\54\0\1\u010a"+
    "\53\0\1\u010b\52\0\1\53\4\0\7\27\4\0\27\27"+
    "\1\u010c\3\0\17\27\5\0\1\53\4\0\7\27\4\0"+
    "\22\27\1\u010d\5\27\3\0\17\27\5\0\1\53\4\0"+
    "\7\27\4\0\1\u010e\27\27\3\0\17\27\47\0\1\u010f"+
    "\34\0\1\53\4\0\7\27\4\0\10\27\1\u0110\17\27"+
    "\3\0\17\27\5\0\1\53\4\0\7\27\4\0\21\27"+
    "\1\u0111\6\27\3\0\17\27\46\0\1\u0112\73\0\1\u0113"+
    "\40\0\1\u0114\4\0\7\27\4\0\30\27\3\0\17\27"+
    "\5\0\1\53\4\0\7\27\4\0\21\27\1\u0115\6\27"+
    "\3\0\17\27\47\0\1\u0116\34\0\1\53\4\0\7\27"+
    "\4\0\1\u0117\27\27\3\0\17\27\27\0\1\u0118\112\0"+
    "\1\u0119\60\0\1\u011a\56\0\1\53\4\0\7\27\4\0"+
    "\22\27\1\u011b\5\27\3\0\17\27\5\0\1\53\4\0"+
    "\7\27\4\0\21\27\1\u011c\6\27\3\0\17\27\5\0"+
    "\1\53\4\0\7\27\4\0\3\27\1\u011d\24\27\3\0"+
    "\17\27\5\0\1\53\4\0\7\27\4\0\3\27\1\u011e"+
    "\24\27\3\0\17\27\35\0\1\u011f\46\0\1\u0120\4\0"+
    "\7\27\4\0\30\27\2\0\1\u0121\17\27\27\0\1\u0122"+
    "\31\0\1\u0122\44\0\1\u0123\31\0\1\u0123\30\0\6\u0105"+
    "\63\0\1\u0124\4\0\7\u0105\63\0\1\u0124\4\0\2\u0105"+
    "\70\0\1\u0124\76\0\1\u0124\4\0\6\u0105\64\0\1\u0124"+
    "\4\0\1\u0105\113\0\1\u0125\54\0\1\53\4\0\7\27"+
    "\4\0\16\27\1\u0126\11\27\3\0\17\27\50\0\1\u0127"+
    "\102\0\1\u0128\27\0\1\u0129\4\0\7\27\4\0\30\27"+
    "\3\0\17\27\5\0\1\u012a\4\0\7\27\4\0\30\27"+
    "\3\0\17\27\5\0\1\53\4\0\7\27\4\0\21\27"+
    "\1\u012b\6\27\3\0\17\27\51\0\1\u012c\32\0\1\53"+
    "\4\0\7\27\4\0\1\u012d\27\27\3\0\17\27\5\0"+
    "\1\53\4\0\7\27\4\0\30\27\2\0\1\u012e\17\27"+
    "\31\0\1\u012f\75\0\1\u0130\53\0\1\53\4\0\7\27"+
    "\4\0\10\27\1\u0131\17\27\3\0\17\27\51\0\1\u0132"+
    "\32\0\1\53\4\0\7\27\4\0\21\27\1\u0133\6\27"+
    "\3\0\17\27\25\0\1\u0134\117\0\1\u0135\77\0\1\u0136"+
    "\34\0\1\u0137\4\0\7\27\4\0\30\27\3\0\17\27"+
    "\5\0\1\53\4\0\7\27\4\0\16\27\1\u0138\11\27"+
    "\3\0\17\27\5\0\1\u0139\4\0\7\27\4\0\30\27"+
    "\3\0\17\27\5\0\1\53\4\0\7\27\4\0\16\27"+
    "\1\u013a\11\27\3\0\17\27\47\0\1\u013b\54\0\1\u013c"+
    "\1\0\1\u013d\12\0\1\u013e\71\0\1\u013f\30\0\1\u013f"+
    "\45\0\1\u0140\30\0\1\u0140\53\0\1\u0141\40\0\1\53"+
    "\4\0\7\27\4\0\15\27\1\u0142\12\27\3\0\17\27"+
    "\43\0\1\u0143\103\0\1\u0144\33\0\1\53\4\0\7\27"+
    "\4\0\30\27\2\0\1\u0145\17\27\25\0\1\u0146\56\0"+
    "\1\53\4\0\7\27\4\0\13\27\1\u0147\14\27\3\0"+
    "\17\27\27\0\1\u0148\2\0\1\u0149\16\0\1\u014a\52\0"+
    "\1\u014b\106\0\1\u014c\46\0\1\53\4\0\7\27\4\0"+
    "\16\27\1\u014d\11\27\3\0\17\27\25\0\1\u014e\56\0"+
    "\1\53\4\0\7\27\4\0\30\27\2\0\1\u014f\17\27"+
    "\41\0\1\u0150\76\0\1\u0151\104\0\1\u0152\34\0\1\53"+
    "\4\0\7\27\4\0\22\27\1\u0153\5\27\3\0\17\27"+
    "\5\0\1\u0154\4\0\7\27\4\0\30\27\3\0\17\27"+
    "\35\0\1\u0155\103\0\1\u0156\102\0\1\u0157\101\0\1\u0158"+
    "\75\0\1\u0159\24\0\1\u0159\51\0\1\u015a\24\0\1\u015a"+
    "\42\0\1\u015b\42\0\1\u015c\4\0\7\27\4\0\30\27"+
    "\3\0\17\27\5\0\1\u015d\134\0\1\u015e\63\0\1\u015f"+
    "\114\0\1\u0160\35\0\1\53\4\0\7\27\4\0\4\27"+
    "\1\u0161\23\27\3\0\17\27\43\0\1\u0162\76\0\1\u0163"+
    "\102\0\1\u0164\56\0\1\u0165\101\0\1\u0166\51\0\1\u0167"+
    "\4\0\7\27\4\0\30\27\3\0\17\27\46\0\1\u0168"+
    "\57\0\1\u0169\2\0\1\u016a\16\0\1\u016b\71\0\1\u016c"+
    "\103\0\1\u016d\100\0\1\u016e\30\0\1\53\4\0\7\27"+
    "\4\0\30\27\2\0\1\u016f\17\27\26\0\1\u0170\120\0"+
    "\1\u0171\57\0\1\u0172\76\0\1\u0173\116\0\1\u0174\24\0"+
    "\1\u0174\51\0\1\u0175\24\0\1\u0175\44\0\1\u0176\37\0"+
    "\1\u0177\116\0\1\u0178\106\0\1\u0179\46\0\1\53\4\0"+
    "\7\27\4\0\22\27\1\u017a\5\27\3\0\17\27\41\0"+
    "\1\u017b\103\0\1\u017c\101\0\1\u017d\62\0\1\u017e\76\0"+
    "\1\u017f\76\0\1\u0180\104\0\1\u0181\76\0\1\u0182\102\0"+
    "\1\u0183\72\0\1\u0184\73\0\1\u0185\101\0\1\u0186\62\0"+
    "\1\u0187\2\0\1\u0188\104\0\1\u0189\73\0\1\u018a\66\0"+
    "\1\u018b\123\0\1\u018c\54\0\1\u018d\31\0\1\u018d\44\0"+
    "\1\u018e\31\0\1\u018e\57\0\1\u018f\103\0\1\u0190\71\0"+
    "\1\u0191\40\0\1\53\4\0\7\27\4\0\30\27\2\0"+
    "\1\u0192\17\27\44\0\1\u0193\73\0\1\u0194\62\0\1\u0195"+
    "\114\0\1\u0196\62\0\1\u0197\112\0\1\u0198\74\0\1\u0199"+
    "\103\0\1\u019a\101\0\1\u019b\32\0\1\u019c\116\0\1\u019d"+
    "\117\0\1\u019e\73\0\1\u019f\76\0\1\u01a0\64\0\1\u01a1"+
    "\100\0\1\u01a2\72\0\1\u01a3\112\0\1\u01a4\64\0\1\u01a5"+
    "\31\0\1\u01a5\44\0\1\u01a6\31\0\1\u01a6\55\0\1\u01a7"+
    "\77\0\1\u01a8\40\0\1\u01a9\142\0\1\u01aa\70\0\1\u01ab"+
    "\104\0\1\u01ac\73\0\1\u01ad\72\0\1\u01ae\61\0\1\u01af"+
    "\56\0\1\u01b0\135\0\1\u01b1\73\0\1\u01b2\62\0\1\u01b3"+
    "\117\0\1\u01b4\60\0\1\u01b5\107\0\1\u01b6\103\0\1\u01b7"+
    "\35\0\1\u01b8\142\0\1\u01b9\62\0\1\u01ba\46\0\1\u01bb"+
    "\140\0\1\u01bc\24\0\1\u01bc\51\0\1\u01bd\24\0\1\u01bd"+
    "\33\0\1\u01be\114\0\1\u01bf\76\0\1\u01c0\71\0\1\u01c1"+
    "\74\0\1\u01c2\73\0\1\u01c3\46\0\1\u01c4\120\0\1\u01c5"+
    "\112\0\1\u01c6\104\0\1\u01c7\73\0\1\u01c8\65\0\1\u01c9"+
    "\46\0\1\u01ca\135\0\1\u01cb\73\0\1\u01cc\100\0\1\u01cd"+
    "\76\0\1\u01ce\75\0\1\u01cf\41\0\1\u01d0\142\0\1\u01d1"+
    "\56\0\1\u01d2\72\0\1\u01d3\114\0\1\u01d4\70\0\1\u01d5"+
    "\103\0\1\u01d6\74\0\1\u01d7\73\0\1\u01d8\104\0\1\u01d9"+
    "\76\0\1\u01da\104\0\1\u01db\32\0\1\u01dc\133\0\1\u01dd"+
    "\104\0\1\u01de\53\0\1\u01df\113\0\1\u01e0\102\0\1\u01e1"+
    "\35\0\1\u01e2\134\0\1\u01e3\64\0\1\u01e4\72\0\1\u01e5"+
    "\114\0\1\u01e6\40\0\1\u01e7\133\0\1\u01e8\74\0\1\u01e9"+
    "\43\0\1\u01ea\122\0\1\u01eb\113\0\1\u01ec\100\0\1\u01ed"+
    "\63\0\1\u01ee\103\0\1\u01ef\76\0\1\u01f0\102\0\1\u01f1"+
    "\35\0\1\u01f2\122\0\1\u01f3\72\0\1\u01f4\56\0\1\u01f5"+
    "\126\0\1\u01f6\72\0\1\u01f7\110\0\1\u01f8\40\0\1\u01f9"+
    "\141\0\1\u01fa\63\0\1\u01fb\103\0\1\u01fc\102\0\1\u01fd"+
    "\73\0\1\u01fe\40\0\1\u01ff\76\0\1\u0200\122\0\1\u0201"+
    "\110\0\1\u0202\103\0\1\u0203\63\0\1\u0204\46\0\1\u0205"+
    "\76\0\1\u0206\76\0\1\u0207\122\0\1\u0208\110\0\1\u0209"+
    "\40\0\1\u020a\76\0\1\u020b\73\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28854];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\11\1\1\10\11\4\1\5\11\24\0\1\11"+
    "\62\0\1\11\20\0\1\11\43\0\1\11\40\0\1\11"+
    "\15\0\1\11\2\0\1\11\1\0\1\11\6\0\1\11"+
    "\12\0\1\11\27\0\2\11\2\0\1\11\10\0\1\11"+
    "\25\0\1\11\13\0\1\11\3\0\1\11\4\0\2\11"+
    "\14\0\1\11\1\0\1\11\32\0\1\11\7\0\2\11"+
    "\11\0\1\11\17\0\1\11\25\0\2\1\15\0\1\11"+
    "\14\0\1\11\6\0\1\11\7\0\1\11\2\0\3\11"+
    "\6\0\1\11\5\0\1\11\5\0\1\11\13\0\1\11"+
    "\5\0\1\11\4\0\1\11\2\0\1\11\7\0\1\11"+
    "\2\0\1\11\3\0\1\11\5\0\2\11\4\0\3\11"+
    "\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[523];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SolicitudesLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error en linea: " + yyline+1 + " - Columna: " + yycolumn+1 + ". La expresión: " + yytext() + " no forma parte del lenguaje");
            }
            // fall through
          case 70: break;
          case 2:
            { /* IGNORAR */
            }
            // fall through
          case 71: break;
          case 3:
            { return new Symbol(EXCLAMACION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 72: break;
          case 4:
            { return new Symbol(COMILLAS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 73: break;
          case 5:
            { return new Symbol(DOLAR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 74: break;
          case 6:
            { return new Symbol(IDENTIFICADOR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 75: break;
          case 7:
            { return new Symbol(COMA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 76: break;
          case 8:
            { return new Symbol(GUION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 77: break;
          case 9:
            { return new Symbol(PUNTOS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 78: break;
          case 10:
            { return new Symbol(MENOR_QUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 79: break;
          case 11:
            { return new Symbol(IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 80: break;
          case 12:
            { return new Symbol(MAYOR_QUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 81: break;
          case 13:
            { return new Symbol(CORCHETE_A, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 82: break;
          case 14:
            { return new Symbol(CORCHETE_C, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 83: break;
          case 15:
            { return new Symbol(GUION_BAJO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 84: break;
          case 16:
            { return new Symbol(LLAVE_A, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 85: break;
          case 17:
            { return new Symbol(LLAVE_C, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 86: break;
          case 18:
            { return new Symbol(ALFANUMERICO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 87: break;
          case 19:
            { return new Symbol(ID, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 88: break;
          case 20:
            { return new Symbol(THEME, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 89: break;
          case 21:
            { return new Symbol(URL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 90: break;
          case 22:
            { return new Symbol(TEMA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 91: break;
          case 23:
            { return new Symbol(BOTON, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 92: break;
          case 24:
            { return new Symbol(CLASE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 93: break;
          case 25:
            { return new Symbol(COMBO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 94: break;
          case 26:
            { return new Symbol(FILAS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 95: break;
          case 27:
            { return new Symbol(RADIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 96: break;
          case 28:
            { return new Symbol(IMAGEN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 97: break;
          case 29:
            { return new Symbol(INDICE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 98: break;
          case 30:
            { return new Symbol(NOMBRE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 99: break;
          case 31:
            { return new Symbol(TITULO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 100: break;
          case 32:
            { return new Symbol(FICHERO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 101: break;
          case 33:
            { return new Symbol(USUARIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 102: break;
          case 34:
            { return new Symbol(FECHA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 103: break;
          case 35:
            { return new Symbol(CHECKBOX, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 104: break;
          case 36:
            { return new Symbol(COLUMNAS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 105: break;
          case 37:
            { return new Symbol(OPCIONES, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 106: break;
          case 38:
            { return new Symbol(PASSWORD, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 107: break;
          case 39:
            { return new Symbol(REQUERIDO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 108: break;
          case 40:
            { return new Symbol(ALINEACION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 109: break;
          case 41:
            { return new Symbol(AREA_TEXTO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 110: break;
          case 42:
            { return new Symbol(FORMULARIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 111: break;
          case 43:
            { return new Symbol(CAMPO_TEXTO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 112: break;
          case 44:
            { return new Symbol(FIN_SOLICITUD, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 113: break;
          case 45:
            { return new Symbol(INI_SOLICITUD, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 114: break;
          case 46:
            { return new Symbol(NOMBRE_CAMPO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 115: break;
          case 47:
            { System.out.println("crear usuario"); return new Symbol(CREAR_USUARIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 116: break;
          case 48:
            { return new Symbol(LOGIN_USUARIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 117: break;
          case 49:
            { return new Symbol(TEXTO_VISIBLE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 118: break;
          case 50:
            { return new Symbol(USUARIO_NUEVO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 119: break;
          case 51:
            { return new Symbol(FIN_SOLICITUDES, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 120: break;
          case 52:
            { return new Symbol(INI_SOLICITUDES, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 121: break;
          case 53:
            { return new Symbol(FECHA_CREACION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 122: break;
          case 54:
            { return new Symbol(NUEVO_PASSWORD, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 123: break;
          case 55:
            { return new Symbol(CONSULTAR_DATOS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 124: break;
          case 56:
            { return new Symbol(USUARIO_ANTIGUO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 125: break;
          case 57:
            { return new Symbol(ELIMINAR_USUARIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 126: break;
          case 58:
            { return new Symbol(NUEVO_FORMULARIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 127: break;
          case 59:
            { return new Symbol(USUARIO_CREACION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 128: break;
          case 60:
            { return new Symbol(MODIFICAR_USUARIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 129: break;
          case 61:
            { return new Symbol(AGREGAR_COMPONENTE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 130: break;
          case 62:
            { return new Symbol(FECHA_MODIFICACION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 131: break;
          case 63:
            { return new Symbol(ELIMINAR_COMPONENTE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 132: break;
          case 64:
            { return new Symbol(ELIMINAR_FORMULARIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 133: break;
          case 65:
            { return new Symbol(CREDENCIALES_USUARIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 134: break;
          case 66:
            { return new Symbol(MODIFICAR_COMPONENTE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 135: break;
          case 67:
            { return new Symbol(MODIFICAR_FORMULARIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 136: break;
          case 68:
            { return new Symbol(PARAMETROS_COMPONENTE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 137: break;
          case 69:
            { return new Symbol(PARAMETROS_FORMULARIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 138: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
