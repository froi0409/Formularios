import java_cup_runtime.*;
import java.util.ArrayList;

class ParserReportes;

parser code {:
    
    private ArrayList<Advertencia> listaErrores;
    private ArrayList<Instruccion> listaInstrucciones;
    private ArrayList<Condicion> condiciones;
    private int fila;
    private int columna;

    public ParserReportes(ReportesLexer lexer, ArrayList<Advertencia> listaErrores, ArrayList<Instruccion> listaInstrucciones, int fila, int columna) {
        super(lexer);
        this.listaErrores = listaErrores;
        this.listaInstrucciones = listaInstrucciones;
        this.ArrayList = new ArrayList<>();
        this.fila = fila;
        this.columna = columna;
    }
    public void report_error(String message, Object info) {
        System.out.println("reporterror");
    }
    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal " + info);
    }
    @Override
    public void syntax_error(Symbol s) {
        System.out.println("linea: " + s.left + "   columna: " + s.right);
    }
    protected int error_sync_size() {
        return 1;
    }
:}

terminal SELECT, TO, FORM, FLECHA, WHERE, AND, OR, NOT, MENOR_QUE, MAYOR_QUE, IGUAL, MENOR_IGUAL, MAYOR_IGUAL, DIFERENTE, CORCHETE_A, CORCHETE_C, IDENTIFICADOR, ALLCHARACTERSNOSPACE, COMA, NUMERO_CONSULTA, CADENA_CONSULTA;

non terminal inicio, campos_posibles, campos_posibles_p, condicion_principal, condicion_interna, condicion_secundaria, operador, valor_condicion;
start with inicio;

inicio ::=  SELECT TO FORM FLECHA ALLCHARACTERSNOSPACE:formulario CORCHETE_A  campos_posibles CORCHETE_C condicion_principal    {:
                                                                                                                                    System.out.println("\"n\n\nCondiciones");
                                                                                                                                    for(Condicion element : condiciones) {
                                                                                                                                        System.out.println(elemebt);
                                                                                                                                    }
                                                                                                                                :}
            | SELECT TO FORM FLECHA ALLCHARACTERSNOSPACE CORCHETE_A error CORCHETE_C condicion_principal
            ;


campos_posibles ::=     campos_posibles_p
                        |
                        ;

campos_posibles_p ::=   ALLCHARACTERSNOSPACE:campo COMA campos_posibles_p
                        | ALLCHARACTERSNOSPACE:campo
                        ;

condicion_principal ::= WHERE CORCHETE_A condicion_interna CORCHETE_C
                        |
                        ;

condicion_interna ::=   NOT ALLCHARACTERSNOSPACE:nombreCampo operador:op valor_condicion:val condicion_secundaria   {: condiciones.add(new Condicion(null, true, nombreCampo.toString(), op.toString(), val.toString())); :}
                        | ALLCHARACTERSNOSPACE:nombreCampo operador:op valor_condicion:val condicion_secundaria     {: condiciones.add(new Condicion(null, false, nombreCampo.toString(), op.toString(), val.toString())); :}
                        ;

condicion_secundaria ::=    AND ALLCHARACTERSNOSPACE:nombreCampo operador:op valor_condicion:val condicion_secundaria   {: condiciones.add(new Condicion(null, false, nombreCampo.toString(), op.toString(), val.toString())); :}
                            | OR ALLCHARACTERSNOSPACE:nombreCampo operador:op valor_condicion:val condicion_secundaria  {: condiciones.add(new Condicion(null, false, nombreCampo.toString(), op.toString(), val.toString())); :}
                            | AND NOT ALLCHARACTERSNOSPACE:nombreCampo operador:op valor_condicion:val condicion_secundaria   {: condiciones.add(new Condicion(null, true, nombreCampo.toString(), op.toString(), val.toString())); :}
                            | OR NOT ALLCHARACTERSNOSPACE:nombreCampo operador:op valor_condicion:val condicion_secundaria  {: condiciones.add(new Condicion(null, true, nombreCampo.toString(), op.toString(), val.toString())); :}
                            |
                            ;

operador ::=    MAYOR_QUE:ope
                | MENOR_QUE:ope
                | MAYOR_IGUAL:ope
                | MENOR_IGUAL:ope
                | DIFERENTE:ope
                | IGUAL:ope
                ;

valor_condicion ::=     NUMERO_CONSULTA:valCond
                        | CADENA_CONSULTA:valCond
                        ;