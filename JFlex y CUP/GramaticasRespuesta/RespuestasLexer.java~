// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: LexemasRespuesta.jflex




// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class RespuestasLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\2\0\1\1\23\0\1\2\1\3\1\4"+
    "\11\5\1\6\15\5\1\7\1\5\1\10\1\5\1\11"+
    "\2\5\1\12\1\5\1\13\1\14\1\15\1\16\2\5"+
    "\1\17\1\20\1\5\1\21\1\5\1\22\1\23\1\24"+
    "\1\5\1\25\1\26\1\27\1\30\5\5\1\31\1\5"+
    "\1\32\1\5\1\33\1\5\1\34\3\5\1\35\1\16"+
    "\2\5\1\36\4\5\1\37\1\5\1\40\1\5\1\41"+
    "\1\42\1\43\1\44\5\5\1\45\1\5\1\46\60\5"+
    "\u0152\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\2\1\1\7\1\10\1\11\1\12\3\0\1\13\60\0"+
    "\1\14\45\0\1\15\31\0\1\16\4\0\1\17\1\20"+
    "\10\0\1\21\1\22\6\0\1\23\13\0\1\24\7\0"+
    "\1\25\10\0\1\26";

  private static int [] zzUnpackAction() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\47\0\116\0\47\0\47\0\47\0\47"+
    "\0\165\0\234\0\47\0\47\0\47\0\47\0\303\0\116"+
    "\0\352\0\47\0\u0111\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4"+
    "\0\u01fb\0\u0222\0\u0249\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c"+
    "\0\u0333\0\u035a\0\u0381\0\u03a8\0\u03cf\0\u03f6\0\u041d\0\u0444"+
    "\0\u046b\0\u0492\0\u04b9\0\u04e0\0\u0507\0\u052e\0\u0555\0\u057c"+
    "\0\u05a3\0\u05ca\0\u05f1\0\u0618\0\u063f\0\u0666\0\u068d\0\u06b4"+
    "\0\u06db\0\u0702\0\u0729\0\u0750\0\u0777\0\u079e\0\u07c5\0\u07ec"+
    "\0\u0813\0\u083a\0\47\0\u0861\0\u0888\0\u08af\0\u08d6\0\u08fd"+
    "\0\u0924\0\u094b\0\u0972\0\u0999\0\u09c0\0\u09e7\0\u0a0e\0\u0a35"+
    "\0\u0a5c\0\u0a83\0\u0aaa\0\u0ad1\0\u0af8\0\u0b1f\0\u0b46\0\u0b6d"+
    "\0\u0b94\0\u0bbb\0\u0be2\0\u0c09\0\u0c30\0\u0c57\0\u0c7e\0\u0ca5"+
    "\0\u0ccc\0\u0cf3\0\u0d1a\0\u0d41\0\u0d68\0\u0d8f\0\u0db6\0\u0ddd"+
    "\0\47\0\u0e04\0\u0e2b\0\u0e52\0\u0e79\0\u0ea0\0\u0ec7\0\u0eee"+
    "\0\u0f15\0\u0f3c\0\u0f63\0\u0f8a\0\u0fb1\0\u0fd8\0\u0fff\0\u1026"+
    "\0\u104d\0\u1074\0\u109b\0\u10c2\0\u10e9\0\u1110\0\u1137\0\u115e"+
    "\0\u1185\0\u11ac\0\47\0\u11d3\0\u11fa\0\u1221\0\u1248\0\u126f"+
    "\0\u1296\0\u12bd\0\u12e4\0\u130b\0\u1332\0\u1359\0\u1380\0\u13a7"+
    "\0\u13ce\0\47\0\47\0\u13f5\0\u141c\0\u1443\0\u146a\0\u1491"+
    "\0\u14b8\0\47\0\u14df\0\u1506\0\u152d\0\u1554\0\u157b\0\u15a2"+
    "\0\u15c9\0\u15f0\0\u1617\0\u163e\0\u1665\0\47\0\u168c\0\u16b3"+
    "\0\u16da\0\u1701\0\u1728\0\u174f\0\u1776\0\47\0\u179d\0\u17c4"+
    "\0\u17eb\0\u1812\0\u1839\0\u1860\0\u1887\0\u18ae\0\47";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\2\1\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\4\2\1\11\1\12\11\2\1\13\1\14\3\2\1\12"+
    "\6\2\1\15\1\16\50\0\1\17\1\20\1\21\1\22"+
    "\7\21\1\23\1\24\1\21\1\25\7\21\1\26\17\21"+
    "\17\0\1\27\16\0\1\27\32\0\1\30\14\0\1\30"+
    "\10\0\2\17\11\0\1\31\1\32\1\0\1\33\7\0"+
    "\1\34\21\0\2\21\1\22\42\21\2\0\2\21\1\22"+
    "\10\21\1\35\31\21\2\0\2\21\1\22\20\21\1\36"+
    "\21\21\2\0\2\21\1\22\15\21\1\37\24\21\2\0"+
    "\2\21\1\22\12\21\1\40\27\21\22\0\1\41\14\0"+
    "\1\41\26\0\1\42\16\0\1\42\25\0\1\43\56\0"+
    "\1\44\43\0\1\45\43\0\1\46\31\0\2\21\1\22"+
    "\21\21\1\47\1\50\17\21\2\0\2\21\1\22\20\21"+
    "\1\51\21\21\2\0\2\21\1\22\21\21\1\52\20\21"+
    "\2\0\2\21\1\22\17\21\1\53\22\21\33\0\1\54"+
    "\46\0\1\55\41\0\1\56\1\57\44\0\1\60\47\0"+
    "\1\61\44\0\1\62\24\0\2\21\1\22\6\21\1\63"+
    "\33\21\2\0\2\21\1\22\5\21\1\64\34\21\2\0"+
    "\2\21\1\22\16\21\1\65\23\21\2\0\2\21\1\22"+
    "\22\21\1\66\17\21\2\0\2\21\1\22\16\21\1\67"+
    "\23\21\25\0\1\70\13\0\1\70\32\0\1\71\13\0"+
    "\1\71\20\0\1\72\45\0\1\73\57\0\1\74\52\0"+
    "\1\75\42\0\1\76\25\0\2\21\1\22\20\21\1\77"+
    "\21\21\2\0\2\21\1\22\14\21\1\100\25\21\2\0"+
    "\2\21\1\22\20\21\1\101\21\21\2\0\2\21\1\22"+
    "\20\21\1\102\21\21\1\0\1\76\1\67\1\21\1\103"+
    "\42\21\15\0\1\104\17\0\1\104\26\0\1\105\17\0"+
    "\1\105\36\0\1\106\42\0\1\107\52\0\1\110\46\0"+
    "\1\111\22\0\2\76\1\0\1\103\44\0\2\21\1\22"+
    "\12\21\1\112\27\21\2\0\2\21\1\22\14\21\1\113"+
    "\25\21\2\0\2\21\1\22\26\21\1\114\13\21\2\0"+
    "\2\21\1\22\23\21\1\115\16\21\26\0\1\116\13\0"+
    "\1\116\32\0\1\117\13\0\1\117\23\0\1\120\50\0"+
    "\1\121\60\0\1\122\43\0\1\123\20\0\2\21\1\22"+
    "\17\21\1\124\22\21\2\0\2\21\1\22\10\21\1\125"+
    "\31\21\2\0\2\21\1\22\7\21\1\126\32\21\2\0"+
    "\2\21\1\22\6\21\1\127\33\21\24\0\1\130\13\0"+
    "\1\130\32\0\1\131\13\0\1\131\32\0\1\132\37\0"+
    "\1\133\45\0\1\134\45\0\1\135\35\0\2\21\1\22"+
    "\6\21\1\136\33\21\2\0\2\21\1\22\21\21\1\137"+
    "\20\21\2\0\2\21\1\22\10\21\1\140\31\21\2\0"+
    "\2\21\1\22\6\21\1\141\33\21\30\0\1\142\13\0"+
    "\1\142\32\0\1\143\13\0\1\143\15\0\1\144\61\0"+
    "\1\145\35\0\1\146\44\0\1\147\35\0\2\21\1\22"+
    "\12\21\1\150\27\21\1\0\1\145\1\137\1\21\1\151"+
    "\42\21\2\0\2\21\1\22\22\21\1\152\17\21\2\0"+
    "\2\21\1\22\12\21\1\153\27\21\15\0\1\154\17\0"+
    "\1\154\26\0\1\155\17\0\1\155\30\0\1\156\30\0"+
    "\2\145\1\0\1\151\71\0\1\157\36\0\1\160\31\0"+
    "\2\21\1\22\16\21\1\161\23\21\2\0\2\21\1\22"+
    "\10\21\1\162\31\21\2\0\2\21\1\22\16\21\1\163"+
    "\23\21\26\0\1\164\13\0\1\164\32\0\1\165\13\0"+
    "\1\165\27\0\1\166\40\0\1\167\54\0\1\170\25\0"+
    "\2\21\1\22\15\21\1\171\24\21\2\0\2\21\1\22"+
    "\6\21\1\172\33\21\2\0\2\21\1\22\15\21\1\173"+
    "\24\21\27\0\1\174\13\0\1\174\32\0\1\175\13\0"+
    "\1\175\25\0\1\176\37\0\1\177\55\0\1\200\25\0"+
    "\1\201\1\202\1\21\1\203\26\21\1\204\13\21\2\0"+
    "\2\21\1\22\22\21\1\205\17\21\2\0\2\21\1\22"+
    "\10\21\1\206\15\21\1\207\13\21\12\0\1\210\21\0"+
    "\1\210\24\0\1\211\21\0\1\211\13\0\2\201\1\0"+
    "\1\203\26\0\1\212\42\0\1\213\34\0\1\214\15\0"+
    "\1\215\14\0\2\201\1\0\1\203\43\0\1\201\1\202"+
    "\1\21\1\203\42\21\2\0\2\21\1\22\10\21\1\216"+
    "\31\21\2\0\2\21\1\22\5\21\1\217\34\21\2\0"+
    "\2\21\1\22\21\21\1\220\20\21\2\0\2\21\1\22"+
    "\10\21\1\221\31\21\26\0\1\222\13\0\1\222\32\0"+
    "\1\223\13\0\1\223\21\0\1\224\43\0\1\225\62\0"+
    "\1\226\35\0\1\227\33\0\2\21\1\22\20\21\1\230"+
    "\21\21\2\0\2\21\1\22\7\21\1\231\32\21\1\0"+
    "\1\226\1\220\1\21\1\232\42\21\2\0\2\21\1\22"+
    "\13\21\1\233\26\21\25\0\1\234\35\0\1\235\33\0"+
    "\2\226\1\0\1\232\62\0\1\236\30\0\2\21\1\22"+
    "\20\21\1\237\21\21\2\0\2\21\1\22\16\21\1\240"+
    "\23\21\2\0\2\21\1\22\10\21\1\241\31\21\25\0"+
    "\1\242\44\0\1\243\40\0\1\244\33\0\2\21\1\22"+
    "\16\21\1\245\23\21\1\0\1\243\1\240\1\21\1\246"+
    "\42\21\2\0\2\21\1\22\6\21\1\247\33\21\23\0"+
    "\1\250\24\0\2\243\1\0\1\246\55\0\1\251\35\0"+
    "\2\21\1\22\20\21\1\252\21\21\2\0\2\21\1\22"+
    "\23\21\1\253\16\21\25\0\1\254\51\0\1\255\17\0"+
    "\1\254\1\252\1\21\1\256\42\21\2\0\2\21\1\22"+
    "\22\21\1\257\17\21\1\0\2\254\1\0\1\256\71\0"+
    "\1\260\21\0\2\21\1\22\5\21\1\261\34\21\12\0"+
    "\1\262\36\0\2\21\1\22\7\21\1\263\32\21\14\0"+
    "\1\264\34\0\2\21\1\22\5\21\1\265\34\21\12\0"+
    "\1\266\35\0\1\266\1\265\1\21\1\267\42\21\1\0"+
    "\2\266\1\0\1\267\42\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6357];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\4\11\2\1\4\11\3\0\1\11"+
    "\60\0\1\11\45\0\1\11\31\0\1\11\4\0\2\1"+
    "\10\0\2\11\6\0\1\11\13\0\1\11\7\0\1\11"+
    "\10\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public RespuestasLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 23: break;
          case 2:
            { return new Symbol(EXCLAMACION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 24: break;
          case 3:
            { return new Symbol(COMA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 25: break;
          case 4:
            { return new Symbol(PUNTOS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 26: break;
          case 5:
            { return new Symbol(MENOR_QUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 27: break;
          case 6:
            { return new Symbol(MAYOR_QUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 28: break;
          case 7:
            { return new Symbol(CORCHETE_A, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 29: break;
          case 8:
            { return new Symbol(CORCHETE_C, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 30: break;
          case 9:
            { return new Symbol(LLAVE_A, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 31: break;
          case 10:
            { return new Symbol(LLAVE_C, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 32: break;
          case 11:
            { return new Symbol(ALLCHARACTERS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 33: break;
          case 12:
            { return new Symbol(TIPO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 34: break;
          case 13:
            { return new Symbol(DETALLES, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 35: break;
          case 14:
            { return new Symbol(DESCRIPCION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 36: break;
          case 15:
            { return new Symbol(FIN_RESPUESTA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 37: break;
          case 16:
            { return new Symbol(INI_RESPUESTA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 38: break;
          case 17:
            { return new Symbol(FIN_RESPUESTAS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 39: break;
          case 18:
            { return new Symbol(INI_RESPUESTAS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 40: break;
          case 19:
            { return new Symbol(INSTRUCCIONES, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 41: break;
          case 20:
            { return new Symbol(ERROR_DETECTADO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 42: break;
          case 21:
            { return new Symbol(DESCRIPCION_ERROR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 43: break;
          case 22:
            { return new Symbol(INSTRUCCION_EJECUTADA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 44: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
