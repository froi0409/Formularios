package com.froi.editorcodigoindigo.analizadorrespuesta;

import com.froi.editorcodigoindigo.entidades.Advertencia;
import java.util.ArrayList;
import java_cup.runtime.*;

class ParserRespuestas;

parser code {:

    private ArrayList<String> listaRespuestas;
    private ArrayList<Advertencia> listaErrores;
    private String p1, p2;

    public ParserRespuestas(RespuestasLexer lexer, ArrayList<String> listaRespuestas, ArrayList<Advertencia> listaErrores) {
        super(lexer);
        this.listaRespuestas = listaRespuestas;
        this.listaErrores = listaErrores;
    }
    public void report_error(String message, Object info) {
        System.out.println("reporterror");
    }
    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal " + info);
    }
    @Override
    public void syntax_error(Symbol s) {
        System.out.println("linea: " + s.left + "   columna: " + s.right);
        //Advertencia advert = new Advertencia((String)s.value, s.left, s.right, "Sint치ctico", "error sint치ctico");
        //listaErrores.add(advert);
        //punteroErrores = listaErrores.size()-1;
    }
    protected int error_sync_size() {
        return 1;
    }
:}

//declaraci칩n de terminales
terminal MENOR_QUE, MAYOR_QUE, EXCLAMACION, PUNTOS, CORCHETE_A, CORCHETE_C, LLAVE_A, LLAVE_C, COMA, ERROR_DETECTADO, DESCRIPCION, INSTRUCCION_EJECUTADA, INSTRUCCIONES, TIPO, DETALLES, INI_RESPUESTA, FIN_RESPUESTA, INI_RESPUESTAS, FIN_RESPUESTAS, ALLCHARACTERS, DESCRIPCION_ERROR;

//Declaraci칩n de no terminales
non terminal inicio, instruccion_respuestas, respuesta, tipo_respuesta;
non terminal apertura_instruccion_principal1, apertura_instruccion_principal2, cierre_instruccion_principal;

non terminal instruccion_error_detectado, instruccion_instruccion_ejecutada;
non terminal accion_error_detectado, accion_instruccion_ejecutada;
non terminal accion_error_detectado_p, accion_instruccion_ejecutada_p;
non terminal opciones_error_detectado, opciones_instruccion_ejecutada;

start with inicio;

inicio ::=  MENOR_QUE EXCLAMACION INI_RESPUESTAS MAYOR_QUE instruccion_respuestas MENOR_QUE EXCLAMACION FIN_RESPUESTAS MAYOR_QUE
            |   MENOR_QUE EXCLAMACION INI_RESPUESTAS MAYOR_QUE instruccion_respuestas MENOR_QUE EXCLAMACION FIN_RESPUESTAS MAYOR_QUE error
            ;

instruccion_respuestas ::=  respuesta  instruccion_respuestas
                            ;

respuesta ::=   MENOR_QUE EXCLAMACION INI_RESPUESTA PUNTOS tipo_respuesta MENOR_QUE EXCLAMACION FIN_RESPUESTA MAYOR_QUE
                ;

tipo_respuesta ::=  ERROR_DETECTADO             apertura_instruccion_principal1 DESCRIPCION_ERROR apertura_instruccion_principal2 instruccion_error_detectado cierre_instruccion_principal
                    | INSTRUCCIONES             apertura_instruccion_principal1 INSTRUCCION_EJECUTADA apertura_instruccion_principal2 instruccion_instruccion_ejecutada cierre_instruccion_principal
                    | error INSTRUCCION_EJECUTADA apertura_instruccion_principal2 instruccion_instruccion_ejecutada cierre_instruccion_principal
                    | error DESCRIPCION_ERROR apertura_instruccion_principal2 instruccion_error_detectado cierre_instruccion_principal
                    ;

apertura_instruccion_principal1 ::= MAYOR_QUE LLAVE_A
                                    ;

apertura_instruccion_principal2 ::= PUNTOS CORCHETE_A
                                    ;

cierre_instruccion_principal ::=    CORCHETE_C LLAVE_C
                                    ;

/* INSTRUCCIONES DE DETECCION DE ERRORES */
instruccion_error_detectado ::= accion_error_detectado COMA instruccion_error_detectado
                                | accion_error_detectado
                                ;

accion_error_detectado ::=      LLAVE_A accion_error_detectado_p LLAVE_C
                                ;

accion_error_detectado_p ::=    opciones_error_detectado COMA accion_error_detectado_p
                                | opciones_error_detectado
                                ;

opciones_error_detectado ::=    DESCRIPCION PUNTOS ALLCHARACTERS:desc    {: String descripcion = desc.toString(); descripcion = descripcion.substring(1, descripcion.length()-1); listaRespuestas.add(descripcion); :}
                                ;

/* INSTRUCCIONES DE INSTRUCCIONES EJECUTADAS */
instruccion_instruccion_ejecutada ::=   accion_instruccion_ejecutada COMA instruccion_instruccion_ejecutada
                                        | accion_instruccion_ejecutada
                                        ;

accion_instruccion_ejecutada ::=        LLAVE_A accion_instruccion_ejecutada_p LLAVE_C      {: 
                                                                                                listaRespuestas.add(p1 + "\n" + p2);
                                                                                            :}
                                        ;

accion_instruccion_ejecutada_p ::=      opciones_instruccion_ejecutada COMA accion_instruccion_ejecutada_p 
                                        | opciones_instruccion_ejecutada
                                        ;

opciones_instruccion_ejecutada ::=      TIPO PUNTOS ALLCHARACTERS:desc           {: String descripcion = desc.toString(); p1 = descripcion.substring(1, descripcion.length()-1); :}
                                        | DETALLES PUNTOS ALLCHARACTERS:desc     {: String descripcion = desc.toString(); p2 = descripcion.substring(1, descripcion.length()-1); :}
                                        ;
