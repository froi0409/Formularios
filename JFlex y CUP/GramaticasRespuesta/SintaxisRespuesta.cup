package com.froi.editorcodigoindigo.analizadorrespuesta;

import com.froi.editorcodigoindigo.entidades.Advertencia;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;
import javax.swing.table.DefaultTableModel;

class ParserRespuestas;

parser code {:

    private ArrayList<String> listaRespuestas;
    private ArrayList<Advertencia> listaErrores;
    private ArrayList<DefaultTableModel> listaTablas;
    private List<ArrayList<String>> datosRecopilados;
    private ArrayList<String> listaAuxiliar;
    private String userLogged;
    private AnalizadorCodigoIndigo analizador;

    private String p1, p2;

    public ParserRespuestas(RespuestasLexer lexer, ArrayList<String> listaRespuestas, ArrayList<Advertencia> listaErrores, ArrayList<DefaultTableModel> listaTablas, AnalizadorCodigoIndigo analizador) {
        super(lexer);
        this.listaRespuestas = listaRespuestas;
        this.listaErrores = listaErrores;
        this.datosRecopilados = new ArrayList<>();
        this.listaAuxiliar = new ArrayList<>();
        this.listaTablas = listaTablas;
        this.analizador = analizador;
    }
    public void report_error(String message, Object info) {
        System.out.println("reporterror");
    }
    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal " + info);
    }
    @Override
    public void syntax_error(Symbol s) {
        System.out.println("linea: " + s.left + "   columna: " + s.right);
        //Advertencia advert = new Advertencia((String)s.value, s.left, s.right, "Sint치ctico", "error sint치ctico");
        //listaErrores.add(advert);
        //punteroErrores = listaErrores.size()-1;
    }
    protected int error_sync_size() {
        return 1;
    }

    public void agregarTableModel() {
        DefaultTableModel dtm = new DefaultTableModel();
        for(int i = 0; i < datosRecopilados.size(); i++) {
            dtm.addColumn(datosRecopilados.get(i).get(0));
        }
        for(int i = 1; i < datosRecopilados.get(0).size(); i++) {
            String[] cadena = new String[datosRecopilados.size()];
            for(int j = 0; j < datosRecopilados.size(); j++) {
                cadena[j] = datosRecopilados.get(j).get(i);
            }
            dtm.addRow(cadena);
        }
        listaTablas.add(dtm);
        datosRecopilados.clear();
    }
:}

//declaraci칩n de terminales
terminal MENOR_QUE, MAYOR_QUE, EXCLAMACION, PUNTOS, CORCHETE_A, CORCHETE_C, LLAVE_A, LLAVE_C, COMA, ERROR_DETECTADO, DESCRIPCION, INSTRUCCION_EJECUTADA, INSTRUCCIONES, CONSULTA, DATOS_CONSULTA, TIPO, DETALLES, CAMPO, DATO, INI_RESPUESTA, FIN_RESPUESTA, INI_RESPUESTAS, FIN_RESPUESTAS, ALLCHARACTERS, DESCRIPCION_ERROR;
terminal LOGIN_DETECTED, USUARIO_LOGIN, USER_LOGGED;

//Declaraci칩n de no terminales
non terminal inicio, instruccion_respuestas, respuesta, tipo_respuesta;
non terminal apertura_instruccion_principal1, apertura_instruccion_principal2, cierre_instruccion_principal;

non terminal instruccion_error_detectado, instruccion_instruccion_ejecutada, instruccion_consulta_realizada, instruccion_login_realizado;
non terminal accion_error_detectado, accion_instruccion_ejecutada, accion_consulta_realizada, accion_login_realizado;
non terminal accion_error_detectado_p, accion_instruccion_ejecutada_p, accion_consulta_realizada_p, accion_login_realizado_p;
non terminal opciones_error_detectado, opciones_instruccion_ejecutada, opciones_consulta_realizada, opciones_login_realizado;

start with inicio;

inicio ::=  MENOR_QUE EXCLAMACION INI_RESPUESTAS MAYOR_QUE instruccion_respuestas MENOR_QUE EXCLAMACION FIN_RESPUESTAS MAYOR_QUE
            | MENOR_QUE EXCLAMACION INI_RESPUESTAS MAYOR_QUE instruccion_respuestas MENOR_QUE EXCLAMACION FIN_RESPUESTAS MAYOR_QUE error
            ;

instruccion_respuestas ::=  respuesta  instruccion_respuestas
                            ;

respuesta ::=   MENOR_QUE EXCLAMACION INI_RESPUESTA PUNTOS tipo_respuesta MENOR_QUE EXCLAMACION FIN_RESPUESTA MAYOR_QUE
                ;

tipo_respuesta ::=  ERROR_DETECTADO             apertura_instruccion_principal1 DESCRIPCION_ERROR apertura_instruccion_principal2 instruccion_error_detectado cierre_instruccion_principal
                    | INSTRUCCIONES             apertura_instruccion_principal1 INSTRUCCION_EJECUTADA apertura_instruccion_principal2 instruccion_instruccion_ejecutada cierre_instruccion_principal
                    | CONSULTA                  apertura_instruccion_principal1 DATOS_CONSULTA apertura_instruccion_principal2 instruccion_consulta_realizada cierre_instruccion_principal                  {: agregarTableModel(); :}
                    | LOGIN_DETECTED            apertura_instruccion_principal1 USUARIO_LOGIN apertura_instruccion_principal2 instruccion_login_realizado cierre_instruccion_principal
                    | error INSTRUCCION_EJECUTADA apertura_instruccion_principal2 instruccion_instruccion_ejecutada cierre_instruccion_principal
                    | error DESCRIPCION_ERROR apertura_instruccion_principal2 instruccion_error_detectado cierre_instruccion_principal
                    ;

apertura_instruccion_principal1 ::= MAYOR_QUE LLAVE_A
                                    ;

apertura_instruccion_principal2 ::= PUNTOS CORCHETE_A
                                    ;

cierre_instruccion_principal ::=    CORCHETE_C LLAVE_C
                                    ;

/* INSTRUCCIONES DE DETECCION DE ERRORES */
instruccion_error_detectado ::= accion_error_detectado COMA instruccion_error_detectado
                                | accion_error_detectado
                                ;

accion_error_detectado ::=      LLAVE_A accion_error_detectado_p LLAVE_C
                                ;

accion_error_detectado_p ::=    opciones_error_detectado COMA accion_error_detectado_p
                                | opciones_error_detectado
                                ;

opciones_error_detectado ::=    DESCRIPCION PUNTOS ALLCHARACTERS:desc    {: String descripcion = desc.toString(); descripcion = descripcion.substring(1, descripcion.length()-1); listaRespuestas.add(descripcion); :}
                                ;

/* INSTRUCCIONES DE INSTRUCCIONES EJECUTADAS */
instruccion_instruccion_ejecutada ::=   accion_instruccion_ejecutada COMA instruccion_instruccion_ejecutada
                                        | accion_instruccion_ejecutada
                                        ;

accion_instruccion_ejecutada ::=        LLAVE_A accion_instruccion_ejecutada_p LLAVE_C      {: 
                                                                                                listaRespuestas.add(p1 + "\n" + p2);
                                                                                            :}
                                        ;

accion_instruccion_ejecutada_p ::=      opciones_instruccion_ejecutada COMA accion_instruccion_ejecutada_p 
                                        | opciones_instruccion_ejecutada
                                        ;

opciones_instruccion_ejecutada ::=      TIPO PUNTOS ALLCHARACTERS:desc           {: String descripcion = desc.toString(); p1 = descripcion.substring(1, descripcion.length()-1); :}
                                        | DETALLES PUNTOS ALLCHARACTERS:desc     {: String descripcion = desc.toString(); p2 = descripcion.substring(1, descripcion.length()-1); :}
                                        ;

/* INSTRUCCIONES REPORTE ENCONTRADO */
instruccion_consulta_realizada ::=      accion_consulta_realizada COMA instruccion_consulta_realizada
                                        | accion_consulta_realizada
                                        ;

accion_consulta_realizada ::=           LLAVE_A accion_consulta_realizada_p LLAVE_C     {:
                                                                                            ArrayList<String> datos = (ArrayList<String>) listaAuxiliar.clone();
                                                                                            datosRecopilados.add(datos);
                                                                                            listaAuxiliar.clear();
                                                                                        :}
                                        ;

accion_consulta_realizada_p ::=         opciones_consulta_realizada COMA accion_consulta_realizada_p
                                        | opciones_consulta_realizada
                                        ;

opciones_consulta_realizada ::=         CAMPO PUNTOS ALLCHARACTERS:valor        {: String valorCampo = valor.toString(); valorCampo = valorCampo.substring(1, valorCampo.length()-1); listaAuxiliar.add(valorCampo); :}
                                        | DATO PUNTOS ALLCHARACTERS:valor       {: String valorCampo = valor.toString(); valorCampo = valorCampo.substring(1, valorCampo.length()-1); listaAuxiliar.add(valorCampo); :}
                                        ;

/* Instrucciones de Login Realizado */
instruccion_login_realizado ::=     accion_login_realizado COMA instruccion_login_realizado
                                    | accion_login_realizado
                                    ;

accion_login_realizado ::=          LLAVE_A accion_login_realizado_p LLAVE_C    {: 
                                                                                    listaRespuestas.add(p1 + "\n" + p2);
                                                                                :}
                                    ;

accion_login_realizado_p ::=        opciones_login_realizado COMA accion_login_realizado_p
                                    | opciones_login_realizado
                                    ;

opciones_login_realizado ::=        TIPO PUNTOS ALLCHARACTERS:desc              {: String descripcion = desc.toString(); p1 = descripcion.substring(1, descripcion.length()-1); :}
                                    | DETALLES PUNTOS ALLCHARACTERS:desc        {: String descripcion = desc.toString(); p2 = descripcion.substring(1, descripcion.length()-1); :}
                                    | USER_LOGGED PUNTOS ALLCHARACTERS:desc     {: String descripcion = desc.toString(); userLogged = descripcion.substring(1, descripcion.length()-1); analizador.setUserOnline(userLogged); System.out.println("El usuario loggeado es: " + analizador.getUserOnline()); :}
                                    ;