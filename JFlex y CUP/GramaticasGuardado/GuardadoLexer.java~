// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: LexemasGuardado.jflex

package com.froi.formulariosweb.analizadores.db;

import java_cup.runtime.*;
import static com.froi.formulariosweb.analizadores.db.ParserGuardadoSym.*;



// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class GuardadoLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\2\22\0\1\3"+
    "\1\4\1\5\5\4\1\6\1\7\2\4\1\10\1\4"+
    "\1\11\1\4\12\12\1\13\6\4\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\2\4\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\6\4\1\42\1\4\1\43"+
    "\1\44\1\4\1\45\1\4\1\46\2\4\1\47\2\4"+
    "\1\50\1\51\1\4\1\52\2\4\1\53\1\54\1\4"+
    "\1\55\5\4\1\56\1\57\1\60\60\4\u0152\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\1\1\7\1\10\3\0\1\11\110\0\1\12\65\0"+
    "\1\13\47\0\1\14\31\0\1\15\4\0\1\16\47\0"+
    "\1\17\2\0\1\20\6\0\1\21\42\0\1\22\23\0"+
    "\1\23\7\0\1\24\1\25\33\0\1\26\3\0\1\27"+
    "\13\0\1\30\1\0\1\31\1\0\1\32\5\0\1\33"+
    "\37\0\1\34\3\0\1\35\12\0\1\36\1\0\1\37"+
    "\7\0\1\40\3\0\1\41\7\0\1\42\4\0\1\43"+
    "\1\0\1\44";

  private static int [] zzUnpackAction() {
    int [] result = new int[457];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\61\0\142\0\61\0\61\0\61\0\61"+
    "\0\223\0\61\0\61\0\304\0\142\0\365\0\61\0\u0126"+
    "\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae"+
    "\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436"+
    "\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d\0\u05be"+
    "\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746"+
    "\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce"+
    "\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56"+
    "\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde"+
    "\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66"+
    "\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\61"+
    "\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\u1045"+
    "\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a\0\u116b\0\u119c\0\u11cd"+
    "\0\u11fe\0\u122f\0\u1260\0\u1291\0\u12c2\0\u12f3\0\u1324\0\u1355"+
    "\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd"+
    "\0\u150e\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603\0\u1634\0\u1665"+
    "\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed"+
    "\0\u181e\0\u184f\0\u1880\0\u18b1\0\u18e2\0\61\0\u1913\0\u1944"+
    "\0\u1975\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc"+
    "\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54"+
    "\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc"+
    "\0\u1e0d\0\u1e3e\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33\0\u1f64"+
    "\0\u1f95\0\u1fc6\0\u1ff7\0\u2028\0\u2059\0\61\0\u208a\0\u20bb"+
    "\0\u20ec\0\u211d\0\u214e\0\u217f\0\u21b0\0\u21e1\0\u2212\0\u2243"+
    "\0\u2274\0\u22a5\0\u22d6\0\u2307\0\u2338\0\u2369\0\u239a\0\u23cb"+
    "\0\u23fc\0\u242d\0\u245e\0\u248f\0\u24c0\0\u24f1\0\u2522\0\61"+
    "\0\u2553\0\u2584\0\u25b5\0\u25e6\0\61\0\u2617\0\u2648\0\u2679"+
    "\0\u26aa\0\u26db\0\u270c\0\u273d\0\u276e\0\u279f\0\u27d0\0\u2801"+
    "\0\u2832\0\u2863\0\u2894\0\u28c5\0\u28f6\0\u2927\0\u2958\0\u2989"+
    "\0\u29ba\0\u29eb\0\u2a1c\0\u2a4d\0\u2a7e\0\u2aaf\0\u2ae0\0\u2b11"+
    "\0\u2b42\0\u2b73\0\u2ba4\0\u2bd5\0\u2c06\0\u2c37\0\u2c68\0\u2c99"+
    "\0\u2cca\0\u2cfb\0\u2d2c\0\u2d5d\0\61\0\u2d8e\0\u2dbf\0\61"+
    "\0\u2df0\0\u2e21\0\u2e52\0\u2e83\0\u2eb4\0\u2ee5\0\61\0\u2f16"+
    "\0\u2f47\0\u2f78\0\u2fa9\0\u2fda\0\u300b\0\u303c\0\u306d\0\u309e"+
    "\0\u30cf\0\u3100\0\u3131\0\u3162\0\u3193\0\u31c4\0\u31f5\0\u3226"+
    "\0\u3257\0\u3288\0\u32b9\0\u32ea\0\u331b\0\u334c\0\u337d\0\u33ae"+
    "\0\u33df\0\u3410\0\u3441\0\u3472\0\u34a3\0\u34d4\0\u3505\0\u3536"+
    "\0\u3567\0\61\0\u3598\0\u35c9\0\u35fa\0\u362b\0\u365c\0\u368d"+
    "\0\u36be\0\u36ef\0\u3720\0\u3751\0\u3782\0\u37b3\0\u37e4\0\u3815"+
    "\0\u3846\0\u3877\0\u38a8\0\u38d9\0\u390a\0\61\0\u393b\0\u396c"+
    "\0\u399d\0\u39ce\0\u39ff\0\u3a30\0\u3a61\0\61\0\61\0\u3a92"+
    "\0\u3ac3\0\u3af4\0\u3b25\0\u3b56\0\u3b87\0\u3bb8\0\u3be9\0\u3c1a"+
    "\0\u3c4b\0\u3c7c\0\u3cad\0\u3cde\0\u3d0f\0\u3d40\0\u3d71\0\u3da2"+
    "\0\u3dd3\0\u3e04\0\u3e35\0\u3e66\0\u3e97\0\u3ec8\0\u3ef9\0\u3f2a"+
    "\0\u3f5b\0\u3f8c\0\61\0\u3fbd\0\u3fee\0\u401f\0\61\0\u4050"+
    "\0\u4081\0\u40b2\0\u40e3\0\u4114\0\u4145\0\u4176\0\u41a7\0\u41d8"+
    "\0\u4209\0\u423a\0\61\0\u426b\0\61\0\u429c\0\61\0\u42cd"+
    "\0\u42fe\0\u432f\0\u4360\0\u4391\0\61\0\u43c2\0\u43f3\0\u4424"+
    "\0\u4455\0\u4486\0\u44b7\0\u44e8\0\u4519\0\u454a\0\u457b\0\u45ac"+
    "\0\u45dd\0\u460e\0\u463f\0\u4670\0\u46a1\0\u46d2\0\u4703\0\u4734"+
    "\0\u4765\0\u4796\0\u47c7\0\u47f8\0\u4829\0\u485a\0\u488b\0\u48bc"+
    "\0\u48ed\0\u491e\0\u494f\0\u4980\0\61\0\u49b1\0\u49e2\0\u4a13"+
    "\0\61\0\u4a44\0\u4a75\0\u4aa6\0\u4ad7\0\u4b08\0\u4b39\0\u4b6a"+
    "\0\u4b9b\0\u4bcc\0\u4bfd\0\61\0\u4c2e\0\61\0\u4c5f\0\u4c90"+
    "\0\u4cc1\0\u4cf2\0\u4d23\0\u4d54\0\u4d85\0\61\0\u4db6\0\u4de7"+
    "\0\u4e18\0\61\0\u4e49\0\u4e7a\0\u4eab\0\u4edc\0\u4f0d\0\u4f3e"+
    "\0\u4f6f\0\61\0\u4fa0\0\u4fd1\0\u5002\0\u5033\0\61\0\u5064"+
    "\0\61";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[457];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\2\1\4\1\5\1\6\1\7\2\2"+
    "\1\10\31\2\1\11\10\2\1\12\1\3\1\13\62\0"+
    "\1\14\1\0\1\15\1\16\1\17\6\16\1\20\1\16"+
    "\1\21\1\22\1\23\1\24\2\16\1\25\2\16\1\26"+
    "\1\27\1\30\1\16\1\31\1\16\1\32\1\33\22\16"+
    "\44\0\1\34\15\0\1\14\1\0\1\14\10\0\1\35"+
    "\1\0\1\36\1\37\1\40\1\41\2\0\1\42\2\0"+
    "\1\43\1\44\1\45\1\0\1\46\1\0\1\47\1\50"+
    "\25\0\2\16\1\17\53\16\3\0\2\16\1\17\17\16"+
    "\1\51\33\16\3\0\2\16\1\17\17\16\1\52\2\16"+
    "\1\53\30\16\3\0\2\16\1\17\6\16\1\54\44\16"+
    "\3\0\2\16\1\17\26\16\1\55\24\16\3\0\2\16"+
    "\1\17\12\16\1\56\3\16\1\57\3\16\1\60\30\16"+
    "\3\0\2\16\1\17\11\16\1\61\7\16\1\62\31\16"+
    "\3\0\2\16\1\17\22\16\1\63\30\16\3\0\2\16"+
    "\1\17\23\16\1\64\27\16\3\0\2\16\1\17\6\16"+
    "\1\65\44\16\3\0\2\16\1\17\12\16\1\66\40\16"+
    "\3\0\2\16\1\17\12\16\1\67\3\16\1\70\34\16"+
    "\3\0\2\16\1\17\25\16\1\71\1\72\24\16\11\0"+
    "\1\73\74\0\1\74\60\0\1\75\2\0\1\76\44\0"+
    "\1\77\100\0\1\100\44\0\1\101\3\0\1\102\3\0"+
    "\1\103\47\0\1\104\7\0\1\105\61\0\1\106\61\0"+
    "\1\107\43\0\1\110\64\0\1\111\60\0\1\112\3\0"+
    "\1\113\67\0\1\114\1\115\27\0\2\16\1\17\16\16"+
    "\1\116\34\16\3\0\2\16\1\17\6\16\1\117\44\16"+
    "\3\0\2\16\1\17\17\16\1\120\33\16\3\0\2\16"+
    "\1\17\27\16\1\121\23\16\3\0\2\16\1\17\27\16"+
    "\1\122\23\16\3\0\2\16\1\17\10\16\1\123\42\16"+
    "\3\0\2\16\1\17\17\16\1\124\33\16\3\0\2\16"+
    "\1\17\25\16\1\125\25\16\1\0\1\126\1\0\1\127"+
    "\1\16\1\130\34\16\1\131\16\16\3\0\2\16\1\17"+
    "\11\16\1\132\41\16\3\0\2\16\1\17\20\16\1\133"+
    "\32\16\3\0\2\16\1\17\10\16\1\134\42\16\3\0"+
    "\2\16\1\17\26\16\1\135\24\16\3\0\2\16\1\17"+
    "\14\16\1\136\7\16\1\137\26\16\3\0\2\16\1\17"+
    "\20\16\1\140\12\16\1\141\17\16\3\0\2\16\1\17"+
    "\27\16\1\142\23\16\3\0\2\16\1\17\17\16\1\143"+
    "\33\16\3\0\2\16\1\17\30\16\1\144\22\16\46\0"+
    "\1\145\6\0\1\146\27\0\1\147\50\0\1\150\71\0"+
    "\1\151\70\0\1\152\60\0\1\153\41\0\1\154\67\0"+
    "\1\155\66\0\1\156\26\0\1\126\1\0\1\126\1\0"+
    "\1\130\34\0\1\157\35\0\1\160\67\0\1\161\50\0"+
    "\1\162\76\0\1\163\46\0\1\164\7\0\1\165\54\0"+
    "\1\166\12\0\1\167\54\0\1\170\50\0\1\171\71\0"+
    "\1\172\25\0\2\16\1\17\21\16\1\173\31\16\3\0"+
    "\2\16\1\17\26\16\1\174\24\16\3\0\2\16\1\17"+
    "\30\16\1\175\22\16\3\0\2\16\1\17\22\16\1\176"+
    "\30\16\3\0\2\16\1\17\25\16\1\177\25\16\3\0"+
    "\2\16\1\17\15\16\1\200\35\16\3\0\2\16\1\17"+
    "\6\16\1\201\44\16\3\0\2\16\1\17\20\16\1\202"+
    "\32\16\1\0\1\126\1\0\1\126\1\0\1\130\54\0"+
    "\1\126\1\0\1\127\1\16\1\130\53\16\3\0\2\16"+
    "\1\17\10\16\1\203\2\16\1\204\37\16\3\0\2\16"+
    "\1\17\16\16\1\205\34\16\3\0\2\16\1\17\7\16"+
    "\1\206\43\16\3\0\2\16\1\17\16\16\1\207\34\16"+
    "\3\0\2\16\1\17\26\16\1\210\24\16\3\0\2\16"+
    "\1\17\16\16\1\211\34\16\3\0\2\16\1\17\30\16"+
    "\1\212\22\16\3\0\2\16\1\17\6\16\1\213\44\16"+
    "\3\0\2\16\1\17\27\16\1\214\23\16\3\0\2\16"+
    "\1\17\30\16\1\215\22\16\1\0\1\171\1\0\1\143"+
    "\1\16\1\216\53\16\3\0\2\16\1\17\6\16\1\217"+
    "\44\16\52\0\1\220\62\0\1\221\33\0\1\222\65\0"+
    "\1\223\62\0\1\224\52\0\1\225\63\0\1\226\50\0"+
    "\1\227\51\0\1\230\72\0\1\231\50\0\1\232\2\0"+
    "\1\233\63\0\1\234\51\0\1\235\67\0\1\236\70\0"+
    "\1\237\50\0\1\240\72\0\1\241\36\0\1\242\101\0"+
    "\1\243\61\0\1\244\23\0\1\171\1\0\1\171\1\0"+
    "\1\216\67\0\1\245\47\0\2\16\1\17\12\16\1\246"+
    "\40\16\3\0\2\16\1\17\12\16\1\247\40\16\3\0"+
    "\2\16\1\17\20\16\1\250\32\16\3\0\2\16\1\17"+
    "\26\16\1\251\24\16\3\0\2\16\1\17\30\16\1\252"+
    "\22\16\3\0\2\16\1\17\6\16\1\253\44\16\3\0"+
    "\2\16\1\17\26\16\1\254\24\16\3\0\2\16\1\17"+
    "\30\16\1\255\22\16\3\0\2\16\1\17\22\16\1\256"+
    "\30\16\3\0\2\16\1\17\22\16\1\257\30\16\3\0"+
    "\2\16\1\17\10\16\1\260\42\16\3\0\2\16\1\17"+
    "\25\16\1\261\25\16\3\0\2\16\1\17\22\16\1\262"+
    "\30\16\3\0\2\16\1\17\32\16\1\263\20\16\3\0"+
    "\2\16\1\17\26\16\1\264\24\16\3\0\2\16\1\17"+
    "\12\16\1\265\40\16\1\0\1\242\1\0\1\213\1\16"+
    "\1\266\53\16\3\0\2\16\1\17\22\16\1\267\30\16"+
    "\3\0\2\16\1\17\17\16\1\270\33\16\3\0\2\16"+
    "\1\17\25\16\1\271\25\16\53\0\1\272\62\0\1\273"+
    "\23\0\1\274\60\0\1\275\66\0\1\276\66\0\1\277"+
    "\62\0\1\300\36\0\1\301\100\0\1\302\62\0\1\303"+
    "\52\0\1\304\60\0\1\305\46\0\1\306\75\0\1\307"+
    "\55\0\1\310\70\0\1\311\54\0\1\312\44\0\1\313"+
    "\41\0\1\242\1\0\1\242\1\0\1\266\103\0\1\314"+
    "\55\0\1\315\66\0\1\316\30\0\2\16\1\17\6\16"+
    "\1\317\44\16\1\0\1\275\1\0\1\247\1\16\1\320"+
    "\53\16\3\0\2\16\1\17\21\16\1\321\31\16\3\0"+
    "\2\16\1\17\34\16\1\322\16\16\3\0\2\16\1\17"+
    "\10\16\1\323\42\16\3\0\2\16\1\17\34\16\1\324"+
    "\16\16\1\0\1\302\1\0\1\254\1\16\1\325\53\16"+
    "\3\0\2\16\1\17\17\16\1\326\33\16\3\0\2\16"+
    "\1\17\20\16\1\327\32\16\3\0\2\16\1\17\25\16"+
    "\1\330\25\16\3\0\2\16\1\17\12\16\1\331\40\16"+
    "\3\0\2\16\1\17\12\16\1\332\40\16\3\0\2\16"+
    "\1\17\21\16\1\333\31\16\3\0\2\16\1\17\22\16"+
    "\1\334\30\16\3\0\2\16\1\17\27\16\1\335\23\16"+
    "\3\0\2\16\1\17\25\16\1\336\25\16\3\0\2\16"+
    "\1\17\34\16\1\337\16\16\3\0\2\16\1\17\22\16"+
    "\1\340\30\16\3\0\2\16\1\17\16\16\1\341\34\16"+
    "\51\0\1\342\52\0\1\343\31\0\1\344\45\0\1\275"+
    "\1\0\1\275\1\0\1\320\102\0\1\345\73\0\1\346"+
    "\34\0\1\347\104\0\1\350\17\0\1\302\1\0\1\302"+
    "\1\0\1\325\100\0\1\351\61\0\1\352\65\0\1\353"+
    "\45\0\1\354\60\0\1\355\67\0\1\356\61\0\1\357"+
    "\65\0\1\360\56\0\1\361\67\0\1\362\46\0\1\363"+
    "\54\0\1\364\37\0\2\16\1\17\10\16\1\365\42\16"+
    "\3\0\2\16\1\17\6\16\1\366\44\16\3\0\2\16"+
    "\1\17\25\16\1\367\25\16\3\0\2\16\1\17\27\16"+
    "\1\370\23\16\3\0\2\16\1\17\10\16\1\371\42\16"+
    "\3\0\2\16\1\17\6\16\1\372\44\16\3\0\2\16"+
    "\1\17\23\16\1\373\27\16\3\0\2\16\1\17\20\16"+
    "\1\374\32\16\1\0\1\354\1\0\1\331\1\16\1\375"+
    "\53\16\1\0\1\376\1\0\1\377\1\16\1\u0100\34\16"+
    "\1\u0101\16\16\3\0\2\16\1\17\12\16\1\u0102\40\16"+
    "\3\0\2\16\1\17\25\16\1\u0103\25\16\3\0\2\16"+
    "\1\17\25\16\1\u0104\25\16\3\0\2\16\1\17\16\16"+
    "\1\u0105\34\16\3\0\2\16\1\17\31\16\1\u0106\21\16"+
    "\1\0\1\363\1\0\1\340\1\16\1\u0107\53\16\3\0"+
    "\2\16\1\17\22\16\1\u0108\30\16\55\0\1\u0109\56\0"+
    "\1\u010a\23\0\1\u010b\56\0\1\u010c\77\0\1\u010d\62\0"+
    "\1\u010e\41\0\1\u010f\56\0\1\u0110\75\0\1\u0111\55\0"+
    "\1\u0112\33\0\1\354\1\0\1\354\1\0\1\375\54\0"+
    "\1\376\1\0\1\376\1\0\1\u0100\34\0\1\u0113\36\0"+
    "\1\u0114\73\0\1\u0115\60\0\1\u0116\51\0\1\u0117\73\0"+
    "\1\u0118\22\0\1\363\1\0\1\363\1\0\1\u0107\103\0"+
    "\1\u0119\33\0\2\16\1\17\16\16\1\u011a\34\16\3\0"+
    "\2\16\1\17\26\16\1\u011b\24\16\3\0\2\16\1\17"+
    "\12\16\1\u011c\40\16\3\0\2\16\1\17\30\16\1\u011d"+
    "\22\16\3\0\2\16\1\17\25\16\1\u011e\25\16\3\0"+
    "\2\16\1\17\25\16\1\u011f\25\16\3\0\2\16\1\17"+
    "\22\16\1\u0120\30\16\3\0\2\16\1\17\30\16\1\u0121"+
    "\22\16\1\0\1\376\1\0\1\376\1\0\1\u0100\54\0"+
    "\1\376\1\0\1\377\1\16\1\u0100\53\16\3\0\2\16"+
    "\1\17\10\16\1\u0122\42\16\3\0\2\16\1\17\26\16"+
    "\1\u0123\24\16\3\0\2\16\1\17\11\16\1\u0124\41\16"+
    "\3\0\2\16\1\17\22\16\1\u0125\30\16\3\0\2\16"+
    "\1\17\11\16\1\u0126\41\16\3\0\2\16\1\17\16\16"+
    "\1\u0127\34\16\1\0\1\u0128\1\0\1\u0129\1\16\1\u012a"+
    "\34\16\1\u012b\16\16\50\0\1\u012c\57\0\1\u012d\35\0"+
    "\1\u012e\70\0\1\u012f\44\0\1\u0130\76\0\1\u0131\55\0"+
    "\1\u0132\60\0\1\u0133\55\0\1\u0134\66\0\1\u0135\40\0"+
    "\1\u0136\76\0\1\u0137\43\0\1\u0138\71\0\1\u0139\47\0"+
    "\1\u013a\65\0\1\u013b\35\0\1\u0128\1\0\1\u0128\1\0"+
    "\1\u012a\34\0\1\u013c\21\0\2\16\1\17\22\16\1\u013d"+
    "\30\16\1\0\1\u012f\1\0\1\u011b\1\16\1\u013e\53\16"+
    "\3\0\2\16\1\17\10\16\1\u013f\42\16\3\0\2\16"+
    "\1\17\25\16\1\u0140\25\16\3\0\2\16\1\17\12\16"+
    "\1\u0141\40\16\3\0\2\16\1\17\16\16\1\u0142\34\16"+
    "\3\0\2\16\1\17\21\16\1\u0143\31\16\3\0\2\16"+
    "\1\17\17\16\1\u0144\33\16\3\0\2\16\1\17\6\16"+
    "\1\u0145\44\16\1\0\1\u0137\1\0\1\u0123\1\16\1\u0146"+
    "\53\16\1\0\1\u0138\1\0\1\u0124\1\16\1\u0147\53\16"+
    "\3\0\2\16\1\17\34\16\1\u0148\16\16\3\0\2\16"+
    "\1\17\22\16\1\u0149\30\16\3\0\2\16\1\17\26\16"+
    "\1\u014a\24\16\1\0\1\u0128\1\0\1\u0128\1\0\1\u012a"+
    "\54\0\1\u0128\1\0\1\u0129\1\16\1\u012a\53\16\3\0"+
    "\2\16\1\17\10\16\1\u014b\42\16\43\0\1\u014c\67\0"+
    "\1\u014d\36\0\1\u014e\31\0\1\u012f\1\0\1\u012f\1\0"+
    "\1\u013e\71\0\1\u014f\75\0\1\u0150\45\0\1\u0151\64\0"+
    "\1\u0152\63\0\1\u0153\56\0\1\u0154\47\0\1\u0155\45\0"+
    "\1\u0137\1\0\1\u0137\1\0\1\u0146\54\0\1\u0138\1\0"+
    "\1\u0138\1\0\1\u0147\115\0\1\u0156\46\0\1\u0157\64\0"+
    "\1\u0158\42\0\1\u0159\45\0\2\16\1\17\21\16\1\u015a"+
    "\31\16\3\0\2\16\1\17\22\16\1\u015b\30\16\3\0"+
    "\2\16\1\17\6\16\1\u015c\44\16\3\0\2\16\1\17"+
    "\6\16\1\u015d\44\16\3\0\2\16\1\17\22\16\1\u015e"+
    "\30\16\3\0\2\16\1\17\12\16\1\u015f\40\16\3\0"+
    "\2\16\1\17\6\16\1\u0160\44\16\3\0\2\16\1\17"+
    "\20\16\1\u0161\32\16\3\0\2\16\1\17\4\16\1\u0162"+
    "\46\16\1\0\1\u0157\1\0\1\u0149\1\16\1\u0163\53\16"+
    "\3\0\2\16\1\17\16\16\1\u0164\34\16\3\0\2\16"+
    "\1\17\25\16\1\u0165\25\16\53\0\1\u0166\61\0\1\u0167"+
    "\33\0\1\u0168\61\0\1\u0169\44\0\1\u016a\60\0\1\u016b"+
    "\74\0\1\u016c\50\0\1\u016d\54\0\1\u016e\72\0\1\u016f"+
    "\44\0\1\u0170\47\0\1\u0157\1\0\1\u0157\1\0\1\u0163"+
    "\77\0\1\u0171\67\0\1\u0172\26\0\1\u0168\1\0\1\u015a"+
    "\1\16\1\u0173\53\16\3\0\2\16\1\17\23\16\1\u0174"+
    "\27\16\1\0\1\u016a\1\0\1\u015c\1\16\1\u0175\53\16"+
    "\3\0\2\16\1\17\10\16\1\u0176\42\16\1\0\1\u016c"+
    "\1\0\1\u015e\1\16\1\u0177\53\16\3\0\2\16\1\17"+
    "\21\16\1\u0178\31\16\3\0\2\16\1\17\25\16\1\u0179"+
    "\25\16\3\0\2\16\1\17\23\16\1\u017a\27\16\1\0"+
    "\1\u017b\1\0\1\u017c\1\16\1\u017d\4\16\1\u0162\46\16"+
    "\3\0\2\16\1\17\7\16\1\u017e\43\16\3\0\2\16"+
    "\1\17\12\16\1\u017f\40\16\47\0\1\u0180\12\0\1\u0168"+
    "\1\0\1\u0168\1\0\1\u0173\104\0\1\u0181\30\0\1\u016a"+
    "\1\0\1\u016a\1\0\1\u0175\71\0\1\u0182\43\0\1\u016c"+
    "\1\0\1\u016c\1\0\1\u0177\102\0\1\u0183\64\0\1\u0184"+
    "\56\0\1\u0185\30\0\1\u017b\1\0\1\u017b\1\0\1\u017d"+
    "\4\0\1\u0170\63\0\1\u0186\63\0\1\u0187\43\0\2\16"+
    "\1\17\16\16\1\u0188\34\16\3\0\2\16\1\17\16\16"+
    "\1\u0189\34\16\3\0\2\16\1\17\27\16\1\u018a\23\16"+
    "\3\0\2\16\1\17\16\16\1\u018b\34\16\3\0\2\16"+
    "\1\17\22\16\1\u018c\30\16\1\0\1\u017b\1\0\1\u017b"+
    "\1\0\1\u017d\54\0\1\u017b\1\0\1\u017c\1\16\1\u017d"+
    "\53\16\3\0\2\16\1\17\17\16\1\u018d\33\16\3\0"+
    "\2\16\1\17\6\16\1\u018e\44\16\52\0\1\u018f\32\0"+
    "\1\u0190\60\0\1\u0191\71\0\1\u0192\47\0\1\u0193\64\0"+
    "\1\u0194\55\0\1\u0195\47\0\1\u0196\47\0\2\16\1\17"+
    "\17\16\1\u0197\33\16\3\0\2\16\1\17\22\16\1\u0198"+
    "\30\16\3\0\2\16\1\17\12\16\1\u0199\40\16\3\0"+
    "\2\16\1\17\22\16\1\u019a\30\16\1\0\1\u019b\1\0"+
    "\1\u019c\1\16\1\u019d\34\16\1\u019e\16\16\3\0\2\16"+
    "\1\17\12\16\1\u019f\40\16\3\0\2\16\1\17\10\16"+
    "\1\u01a0\42\16\54\0\1\u01a1\31\0\1\u01a2\63\0\1\u01a3"+
    "\50\0\1\u01a4\70\0\1\u01a5\31\0\1\u019b\1\0\1\u019b"+
    "\1\0\1\u019d\34\0\1\u01a6\36\0\1\u01a7\56\0\1\u01a8"+
    "\45\0\2\16\1\17\6\16\1\u01a9\44\16\3\0\2\16"+
    "\1\17\21\16\1\u01aa\31\16\3\0\2\16\1\17\34\16"+
    "\1\u01ab\16\16\1\0\1\u01a5\1\0\1\u019a\1\16\1\u01ac"+
    "\53\16\1\0\1\u019b\1\0\1\u019b\1\0\1\u019d\54\0"+
    "\1\u019b\1\0\1\u019c\1\16\1\u019d\53\16\3\0\2\16"+
    "\1\17\4\16\1\u01ad\46\16\1\0\1\u01a7\1\0\1\u019f"+
    "\1\16\1\u01ae\53\16\3\0\2\16\1\17\16\16\1\u01af"+
    "\34\16\14\0\1\u01b0\73\0\1\u01b1\73\0\1\u01b2\17\0"+
    "\1\u01a5\1\0\1\u01a5\1\0\1\u01ac\65\0\1\u01b3\47\0"+
    "\1\u01a7\1\0\1\u01a7\1\0\1\u01ae\77\0\1\u01b4\37\0"+
    "\2\16\1\17\11\16\1\u01b5\41\16\1\0\1\u01b1\1\0"+
    "\1\u01aa\1\16\1\u01b6\53\16\3\0\2\16\1\17\4\16"+
    "\1\u01b7\46\16\1\0\1\u01b8\1\0\1\u01b9\1\16\1\u01ba"+
    "\4\16\1\u01ad\46\16\3\0\2\16\1\17\22\16\1\u01bb"+
    "\30\16\17\0\1\u01bc\42\0\1\u01b1\1\0\1\u01b1\1\0"+
    "\1\u01b6\65\0\1\u01bd\47\0\1\u01b8\1\0\1\u01b8\1\0"+
    "\1\u01ba\4\0\1\u01b3\76\0\1\u01be\33\0\2\16\1\17"+
    "\22\16\1\u01bf\30\16\1\0\1\u01c0\1\0\1\u01c1\1\16"+
    "\1\u01c2\4\16\1\u01b7\46\16\1\0\1\u01b8\1\0\1\u01b8"+
    "\1\0\1\u01ba\54\0\1\u01b8\1\0\1\u01b9\1\16\1\u01ba"+
    "\53\16\3\0\2\16\1\17\21\16\1\u01c3\31\16\30\0"+
    "\1\u01c4\31\0\1\u01c0\1\0\1\u01c0\1\0\1\u01c2\4\0"+
    "\1\u01bd\75\0\1\u01c5\34\0\2\16\1\17\26\16\1\u01c6"+
    "\24\16\1\0\1\u01c0\1\0\1\u01c0\1\0\1\u01c2\54\0"+
    "\1\u01c0\1\0\1\u01c1\1\16\1\u01c2\53\16\1\0\1\u01c5"+
    "\1\0\1\u01c3\1\16\1\u01c7\53\16\34\0\1\u01c8\25\0"+
    "\1\u01c5\1\0\1\u01c5\1\0\1\u01c7\54\0\1\u01c8\1\0"+
    "\1\u01c6\1\16\1\u01c9\53\16\1\0\1\u01c8\1\0\1\u01c8"+
    "\1\0\1\u01c9\53\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20629];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\4\11\1\1\2\11\3\0\1\11"+
    "\110\0\1\11\65\0\1\11\47\0\1\11\31\0\1\11"+
    "\4\0\1\11\47\0\1\11\2\0\1\11\6\0\1\11"+
    "\42\0\1\11\23\0\1\11\7\0\2\11\33\0\1\11"+
    "\3\0\1\11\13\0\1\11\1\0\1\11\1\0\1\11"+
    "\5\0\1\11\37\0\1\11\3\0\1\11\12\0\1\11"+
    "\1\0\1\11\7\0\1\11\3\0\1\11\7\0\1\11"+
    "\4\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[457];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public GuardadoLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Errores : " + yytext());
            }
            // fall through
          case 37: break;
          case 2:
            { /* Ignorar */
            }
            // fall through
          case 38: break;
          case 3:
            { System.out.println("PARENT_A: " + yytext()); return new Symbol(PARENT_A, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 39: break;
          case 4:
            { System.out.println("PARENT_C: " + yytext()); return new Symbol(PARENT_C, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 40: break;
          case 5:
            { System.out.println("COMA: " + yytext()); return new Symbol(COMA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 41: break;
          case 6:
            { System.out.println("PUNTOS: " + yytext()); return new Symbol(PUNTOS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 42: break;
          case 7:
            { System.out.println("LLAVE_A: " + yytext()); return new Symbol(LLAVE_A, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 43: break;
          case 8:
            { System.out.println("LLAVE_C: " + yytext()); return new Symbol(LLAVE_C, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 44: break;
          case 9:
            { System.out.println("ALLCHAR: " + yytext()); return new Symbol(ALLCHARACTERS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 45: break;
          case 10:
            { System.out.println("ID: " + yytext()); return new Symbol(ID, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 46: break;
          case 11:
            { System.out.println("URL: " + yytext()); return new Symbol(URL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 47: break;
          case 12:
            { System.out.println("TEMA: " + yytext()); return new Symbol(TEMA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 48: break;
          case 13:
            { System.out.println("CLASE: " + yytext()); return new Symbol(CLASE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 49: break;
          case 14:
            { System.out.println("FILAS: " + yytext()); return new Symbol(FILAS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 50: break;
          case 15:
            { System.out.println("INDICE: " + yytext()); return new Symbol(INDICE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 51: break;
          case 16:
            { System.out.println("NOMBRE: " + yytext()); return new Symbol(NOMBRE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 52: break;
          case 17:
            { System.out.println("TITULO: " + yytext()); return new Symbol(TITULO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 53: break;
          case 18:
            { System.out.println("USUARIO: " + yytext()); return new Symbol(USUARIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 54: break;
          case 19:
            { System.out.println("COLUMNAS: " + yytext()); return new Symbol(COLUMNAS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 55: break;
          case 20:
            { System.out.println("OPCIONES: " + yytext()); return new Symbol(OPCIONES, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 56: break;
          case 21:
            { System.out.println("PASSWORD: " + yytext()); return new Symbol(PASSWORD, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 57: break;
          case 22:
            { System.out.println("REQUERIDO: " + yytext()); return new Symbol(REQUERIDO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 58: break;
          case 23:
            { System.out.println("DB_USUARIOS: " + yytext()); return new Symbol(DB_USUARIOS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 59: break;
          case 24:
            { System.out.println("ALINEACION: " + yytext()); return new Symbol(ALINEACION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 60: break;
          case 25:
            { System.out.println("ESTRUCTURA: " + yytext()); return new Symbol(ESTRUCTURA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 61: break;
          case 26:
            { System.out.println("FORMULARIO: " + yytext()); return new Symbol(FORMULARIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 62: break;
          case 27:
            { System.out.println("REGISTRON: " + yytext()); return new Symbol(REGISTRO_N, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 63: break;
          case 28:
            { System.out.println("NOMBRECAMPO: " + yytext()); return new Symbol(NOMBRE_CAMPO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 64: break;
          case 29:
            { System.out.println("DB_FORMULARIOS: " + yytext()); return new Symbol(DB_FORMULARIOS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 65: break;
          case 30:
            { System.out.println("ID_FORMULARIO: " + yytext()); return new Symbol(ID_FORMULARIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 66: break;
          case 31:
            { System.out.println("TEXTOVISIBLE: " + yytext()); return new Symbol(TEXTO_VISIBLE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 67: break;
          case 32:
            { System.out.println("FECHACREACION: " + yytext()); return new Symbol(FECHA_CREACION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 68: break;
          case 33:
            { System.out.println("NOMBRECAMPON: " + yytext()); return new Symbol(NOMBRE_CAMPO_N, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 69: break;
          case 34:
            { System.out.println("IDCOMPONENTE: " + yytext()); return new Symbol(ID_COMPONENTE_N, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 70: break;
          case 35:
            { System.out.println("USUARIOCREACION: " + yytext()); return new Symbol(USUARIO_CREACION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 71: break;
          case 36:
            { System.out.println("DATOSRECOPILADOS: " + yytext()); return new Symbol(DATOS_RECOPILADOS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 72: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
