// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: LexemasImportacion.jflex




// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class ImportacionLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\u10df\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\2\22\0\1\3"+
    "\1\0\1\4\1\0\1\5\2\0\1\6\1\7\1\10"+
    "\2\0\1\11\1\12\1\13\1\0\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\20\2\21\1\22\1\23\6\0"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\4\0\1\56\1\0\1\57\3\54\1\60"+
    "\1\61\1\54\1\62\1\63\1\54\1\64\1\65\1\66"+
    "\1\67\1\70\2\54\1\71\1\54\1\72\1\73\1\54"+
    "\1\74\3\54\1\75\1\76\1\77\u0282\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[768];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\1\1\7\1\10\3\0\1\11\24\0\1\12\20\0"+
    "\1\13\1\14\122\0\1\15\4\0\1\16\7\0\1\17"+
    "\72\0\1\20\53\0\1\21\15\0\1\22\47\0\1\23"+
    "\3\0\1\24\1\0\1\25\3\0\1\26\10\0\1\27"+
    "\4\0\1\30\34\0\1\31\7\0\1\32\1\33\4\0"+
    "\1\34\4\0\1\35\36\0\1\36\1\0\1\37\31\0"+
    "\1\40\3\0\1\41\1\42\34\0\1\43\2\0\1\44"+
    "\15\0\1\45\1\46\1\0\1\47\1\50\1\0\1\51"+
    "\11\0\1\52\14\0\1\53\3\0\1\54\4\0\1\55"+
    "\1\0\1\56\5\0\1\57\4\0\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[540];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\100\0\200\0\100\0\100\0\100\0\100"+
    "\0\300\0\100\0\100\0\u0100\0\u0140\0\u0180\0\100\0\u01c0"+
    "\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0"+
    "\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580\0\u05c0"+
    "\0\u0600\0\u0640\0\u0680\0\100\0\u06c0\0\u0700\0\u0740\0\u0780"+
    "\0\u07c0\0\u0800\0\u0840\0\u0880\0\u08c0\0\u0900\0\u0940\0\u0980"+
    "\0\u09c0\0\u0a00\0\u0a40\0\u0a80\0\100\0\100\0\u0ac0\0\u0b00"+
    "\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\u0c40\0\u0c80\0\u0cc0\0\u0d00"+
    "\0\u0d40\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u0e80\0\u0ec0\0\u0f00"+
    "\0\u0f40\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100"+
    "\0\u1140\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300"+
    "\0\u1340\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480\0\u14c0\0\u1500"+
    "\0\u1540\0\u1580\0\u15c0\0\u1600\0\u1640\0\u1680\0\u16c0\0\u1700"+
    "\0\u1740\0\u1780\0\u17c0\0\u1800\0\u1840\0\u1880\0\u18c0\0\u1900"+
    "\0\u1940\0\u1980\0\u19c0\0\u1a00\0\u1a40\0\u1a80\0\u1ac0\0\u1b00"+
    "\0\u1b40\0\u1b80\0\u1bc0\0\u1c00\0\u1c40\0\u1c80\0\u1cc0\0\u1d00"+
    "\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u1e80\0\u1ec0\0\u1f00"+
    "\0\100\0\u1f40\0\u1f80\0\u1fc0\0\u2000\0\100\0\u2040\0\u2080"+
    "\0\u20c0\0\u2100\0\u2140\0\u2180\0\u21c0\0\100\0\u2200\0\u2240"+
    "\0\u2280\0\u22c0\0\u2300\0\u2340\0\u2380\0\u23c0\0\u2400\0\u2440"+
    "\0\u2480\0\u24c0\0\u2500\0\u2540\0\u2580\0\u25c0\0\u2600\0\u2640"+
    "\0\u2680\0\u26c0\0\u2700\0\u2740\0\u2780\0\u27c0\0\u2800\0\u2840"+
    "\0\u2880\0\u28c0\0\u2900\0\u2940\0\u2980\0\u29c0\0\u2a00\0\u2a40"+
    "\0\u2a80\0\u2ac0\0\u2b00\0\u2b40\0\u2b80\0\u2bc0\0\u2c00\0\u2c40"+
    "\0\u2c80\0\u2cc0\0\u2d00\0\u2d40\0\u2d80\0\u2dc0\0\u2e00\0\u2e40"+
    "\0\u2e80\0\u2ec0\0\u2f00\0\u2f40\0\u2f80\0\u2fc0\0\u3000\0\u3040"+
    "\0\100\0\u3080\0\u30c0\0\u3100\0\u3140\0\u3180\0\u31c0\0\u3200"+
    "\0\u3240\0\u3280\0\u32c0\0\u3300\0\u3340\0\u3380\0\u33c0\0\u3400"+
    "\0\u3440\0\u3480\0\u34c0\0\u3500\0\u3540\0\u3580\0\u35c0\0\u3600"+
    "\0\u3640\0\u3680\0\u36c0\0\u3700\0\u3740\0\u3780\0\u37c0\0\u3800"+
    "\0\u3840\0\u3880\0\u38c0\0\u3900\0\u3940\0\u3980\0\u39c0\0\u3a00"+
    "\0\u3a40\0\u3a80\0\u3ac0\0\u3b00\0\100\0\u3b40\0\u3b80\0\u3bc0"+
    "\0\u3c00\0\u3c40\0\u3c80\0\u3cc0\0\u3d00\0\u3d40\0\u3d80\0\u3dc0"+
    "\0\u3e00\0\u3e40\0\100\0\u3e80\0\u3ec0\0\u3f00\0\u3f40\0\u3f80"+
    "\0\u3fc0\0\u4000\0\u4040\0\u4080\0\u40c0\0\u4100\0\u4140\0\u4180"+
    "\0\u41c0\0\u4200\0\u4240\0\u4280\0\u42c0\0\u4300\0\u4340\0\u4380"+
    "\0\u43c0\0\u4400\0\u4440\0\u4480\0\u44c0\0\u4500\0\u4540\0\u4580"+
    "\0\u45c0\0\u4600\0\u4640\0\u4680\0\u46c0\0\u4700\0\u4740\0\u4780"+
    "\0\u47c0\0\u4800\0\100\0\u4840\0\u4880\0\u48c0\0\100\0\u4900"+
    "\0\100\0\u4940\0\u4980\0\u49c0\0\100\0\u4a00\0\u4a40\0\u4a80"+
    "\0\u4ac0\0\u4b00\0\u4b40\0\u4b80\0\u4bc0\0\100\0\u4c00\0\u4c40"+
    "\0\u4c80\0\u4cc0\0\100\0\u4d00\0\u4d40\0\u4d80\0\u4dc0\0\u4e00"+
    "\0\u4e40\0\u4e80\0\u4ec0\0\u4f00\0\u4f40\0\u4f80\0\u4fc0\0\u5000"+
    "\0\u5040\0\u5080\0\u50c0\0\u5100\0\u5140\0\u5180\0\u51c0\0\u5200"+
    "\0\u5240\0\u5280\0\u52c0\0\u5300\0\u5340\0\u5380\0\u53c0\0\100"+
    "\0\u5400\0\u5440\0\u5480\0\u54c0\0\u5500\0\u5540\0\u5580\0\100"+
    "\0\100\0\u55c0\0\u5600\0\u5640\0\u5680\0\100\0\u56c0\0\u5700"+
    "\0\u5740\0\u5780\0\100\0\u57c0\0\u5800\0\u5840\0\u5880\0\u58c0"+
    "\0\u5900\0\u5940\0\u5980\0\u59c0\0\u5a00\0\u5a40\0\u5a80\0\u5ac0"+
    "\0\u5b00\0\u5b40\0\u5b80\0\u5bc0\0\u5c00\0\u5c40\0\u5c80\0\u5cc0"+
    "\0\u5d00\0\u5d40\0\u5d80\0\u5dc0\0\u5e00\0\u5e40\0\u5e80\0\u5ec0"+
    "\0\u5f00\0\100\0\u5f40\0\100\0\u5f80\0\u5fc0\0\u6000\0\u6040"+
    "\0\u6080\0\u60c0\0\u6100\0\u6140\0\u6180\0\u61c0\0\u6200\0\u6240"+
    "\0\u6280\0\u62c0\0\u6300\0\u6340\0\u6380\0\u63c0\0\u6400\0\u6440"+
    "\0\u6480\0\u64c0\0\u6500\0\u6540\0\u6580\0\100\0\u65c0\0\u6600"+
    "\0\u6640\0\100\0\100\0\u6680\0\u66c0\0\u6700\0\u6740\0\u6780"+
    "\0\u67c0\0\u6800\0\u6840\0\u6880\0\u68c0\0\u6900\0\u6940\0\u6980"+
    "\0\u69c0\0\u6a00\0\u6a40\0\u6a80\0\u6ac0\0\u6b00\0\u6b40\0\u6b80"+
    "\0\u6bc0\0\u6c00\0\u6c40\0\u6c80\0\u6cc0\0\u6d00\0\u6d40\0\100"+
    "\0\u6d80\0\u6dc0\0\100\0\u6e00\0\u6e40\0\u6e80\0\u6ec0\0\u6f00"+
    "\0\u6f40\0\u6f80\0\u6fc0\0\u7000\0\u7040\0\u7080\0\u70c0\0\u7100"+
    "\0\100\0\100\0\u7140\0\100\0\100\0\u7180\0\100\0\u71c0"+
    "\0\u7200\0\u7240\0\u7280\0\u72c0\0\u7300\0\u7340\0\u7380\0\u73c0"+
    "\0\100\0\u7400\0\u7440\0\u7480\0\u74c0\0\u7500\0\u7540\0\u7580"+
    "\0\u75c0\0\u7600\0\u7640\0\u7680\0\u76c0\0\100\0\u7700\0\u7740"+
    "\0\u7780\0\100\0\u77c0\0\u7800\0\u7840\0\u7880\0\100\0\u78c0"+
    "\0\100\0\u7900\0\u7940\0\u7980\0\u79c0\0\u7a00\0\100\0\u7a40"+
    "\0\u7a80\0\u7ac0\0\u7b00\0\100";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[540];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\2\2\1\5\1\6\1\7\11\2"+
    "\1\10\43\2\1\11\5\2\1\12\1\3\1\13\100\0"+
    "\1\14\1\15\1\14\1\16\1\17\1\20\1\21\3\14"+
    "\1\20\2\14\1\22\5\23\1\14\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\2\14\1\32\1\33\3\14\1\34"+
    "\1\35\2\14\1\36\1\37\1\40\1\41\1\14\1\42"+
    "\3\14\1\20\17\14\1\0\1\14\60\0\1\43\17\0"+
    "\3\14\1\21\1\44\1\14\1\21\67\14\1\45\2\14"+
    "\1\15\1\14\1\16\1\44\1\14\1\21\15\14\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\2\14\1\32\1\33"+
    "\3\14\1\34\1\35\2\14\1\36\1\37\1\40\1\41"+
    "\1\14\1\42\23\14\1\45\1\14\1\21\1\16\1\21"+
    "\1\16\1\17\17\21\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\2\21\1\54\1\55\3\21\1\56\1\57\2\21"+
    "\1\60\1\61\1\62\1\63\1\21\1\64\23\21\1\45"+
    "\1\21\3\14\1\21\1\65\1\20\1\21\3\14\1\20"+
    "\1\14\7\20\1\14\51\20\1\14\1\45\1\14\4\21"+
    "\1\17\71\21\1\45\1\21\3\14\1\21\1\66\1\14"+
    "\1\21\5\14\7\22\53\14\1\45\4\14\1\21\1\66"+
    "\1\14\1\21\5\14\7\67\53\14\1\45\4\14\1\21"+
    "\1\44\1\14\1\21\30\14\1\70\5\14\1\71\30\14"+
    "\1\45\4\14\1\21\1\44\1\14\1\21\33\14\1\72"+
    "\33\14\1\45\4\14\1\21\1\44\1\14\1\21\15\14"+
    "\1\73\3\14\1\74\2\14\1\75\3\14\1\76\2\14"+
    "\1\77\33\14\1\45\4\14\1\21\1\44\1\14\1\21"+
    "\21\14\1\100\26\14\1\101\16\14\1\45\4\14\1\21"+
    "\1\44\1\14\1\21\37\14\1\102\27\14\1\45\4\14"+
    "\1\21\1\44\1\14\1\21\25\14\1\103\5\14\1\104"+
    "\33\14\1\45\4\14\1\21\1\44\1\14\1\21\20\14"+
    "\1\105\10\14\1\106\1\107\13\14\1\110\20\14\1\45"+
    "\4\14\1\21\1\44\1\14\1\21\41\14\1\111\25\14"+
    "\1\45\4\14\1\21\1\44\1\14\1\21\33\14\1\112"+
    "\33\14\1\45\4\14\1\21\1\44\1\14\1\21\34\14"+
    "\1\113\32\14\1\45\4\14\1\21\1\44\1\14\1\21"+
    "\15\14\1\114\3\14\1\115\45\14\1\45\4\14\1\21"+
    "\1\44\1\14\1\21\25\14\1\116\41\14\1\45\4\14"+
    "\1\21\1\44\1\14\1\21\21\14\1\117\3\14\1\120"+
    "\41\14\1\45\4\14\1\21\1\44\1\14\1\21\36\14"+
    "\1\121\1\122\27\14\1\45\4\14\1\21\1\44\1\14"+
    "\1\21\53\14\1\123\13\14\1\45\1\14\74\0\1\124"+
    "\3\0\4\125\1\0\71\125\1\0\1\125\4\21\1\17"+
    "\32\21\1\126\5\21\1\127\30\21\1\45\5\21\1\17"+
    "\35\21\1\130\33\21\1\45\5\21\1\17\17\21\1\131"+
    "\3\21\1\132\2\21\1\133\3\21\1\134\2\21\1\135"+
    "\33\21\1\45\5\21\1\17\23\21\1\136\26\21\1\137"+
    "\16\21\1\45\5\21\1\17\41\21\1\140\27\21\1\45"+
    "\5\21\1\17\27\21\1\141\5\21\1\142\33\21\1\45"+
    "\5\21\1\17\22\21\1\143\10\21\1\144\1\145\13\21"+
    "\1\146\20\21\1\45\5\21\1\17\43\21\1\147\25\21"+
    "\1\45\5\21\1\17\35\21\1\150\33\21\1\45\5\21"+
    "\1\17\36\21\1\151\32\21\1\45\5\21\1\17\17\21"+
    "\1\152\3\21\1\153\45\21\1\45\5\21\1\17\27\21"+
    "\1\154\41\21\1\45\5\21\1\17\23\21\1\155\3\21"+
    "\1\156\41\21\1\45\5\21\1\17\40\21\1\157\1\160"+
    "\27\21\1\45\5\21\1\17\55\21\1\161\13\21\1\45"+
    "\1\21\3\14\1\21\1\66\1\14\1\21\5\14\7\162"+
    "\53\14\1\45\4\14\1\21\1\44\1\14\1\21\25\14"+
    "\1\163\41\14\1\45\4\14\1\21\1\44\1\14\1\21"+
    "\21\14\1\164\45\14\1\45\4\14\1\21\1\44\1\14"+
    "\1\21\40\14\1\165\26\14\1\45\4\14\1\21\1\44"+
    "\1\14\1\21\31\14\1\166\35\14\1\45\4\14\1\21"+
    "\1\44\1\14\1\21\32\14\1\167\34\14\1\45\4\14"+
    "\1\21\1\44\1\14\1\21\21\14\1\170\45\14\1\45"+
    "\4\14\1\21\1\44\1\14\1\21\15\14\1\171\51\14"+
    "\1\45\4\14\1\21\1\44\1\14\1\21\30\14\1\172"+
    "\1\173\35\14\1\45\4\14\1\21\1\44\1\14\1\21"+
    "\36\14\1\174\30\14\1\45\4\14\1\21\1\44\1\14"+
    "\1\21\62\14\1\175\4\14\1\45\4\14\1\21\1\44"+
    "\1\14\1\21\40\14\1\176\26\14\1\45\4\14\1\21"+
    "\1\44\1\14\1\21\17\14\1\177\10\14\1\200\36\14"+
    "\1\45\4\14\1\21\1\44\1\14\1\21\36\14\1\201"+
    "\30\14\1\45\4\14\1\21\1\44\1\14\1\21\47\14"+
    "\1\202\17\14\1\45\4\14\1\21\1\44\1\14\1\21"+
    "\15\14\1\203\51\14\1\45\4\14\1\21\1\44\1\14"+
    "\1\21\20\14\1\204\46\14\1\45\4\14\1\21\1\44"+
    "\1\14\1\21\35\14\1\205\31\14\1\45\4\14\1\21"+
    "\1\44\1\14\1\21\37\14\1\206\27\14\1\45\2\14"+
    "\1\207\1\14\1\210\1\211\1\14\1\21\31\14\1\212"+
    "\35\14\1\45\4\14\1\21\1\44\1\14\1\21\17\14"+
    "\1\213\47\14\1\45\4\14\1\21\1\44\1\14\1\21"+
    "\20\14\1\214\46\14\1\45\4\14\1\21\1\44\1\14"+
    "\1\21\35\14\1\215\31\14\1\45\2\14\1\116\1\14"+
    "\1\154\1\216\1\14\1\21\67\14\1\45\4\14\1\21"+
    "\1\44\1\14\1\21\31\14\1\217\12\14\1\220\22\14"+
    "\1\45\4\14\1\21\1\44\1\14\1\21\40\14\1\221"+
    "\26\14\1\45\4\14\1\21\1\44\1\14\1\21\30\14"+
    "\1\222\36\14\1\45\4\14\1\21\1\44\1\14\1\21"+
    "\41\14\1\223\25\14\1\45\4\14\1\21\1\44\1\14"+
    "\1\21\54\14\1\224\12\14\1\45\1\14\13\0\1\225"+
    "\64\0\4\125\1\226\71\125\1\45\1\125\4\21\1\17"+
    "\27\21\1\227\41\21\1\45\5\21\1\17\23\21\1\230"+
    "\45\21\1\45\5\21\1\17\42\21\1\231\26\21\1\45"+
    "\5\21\1\17\33\21\1\232\35\21\1\45\5\21\1\17"+
    "\34\21\1\233\34\21\1\45\5\21\1\17\23\21\1\234"+
    "\45\21\1\45\5\21\1\17\17\21\1\235\51\21\1\45"+
    "\5\21\1\17\32\21\1\236\1\237\35\21\1\45\5\21"+
    "\1\17\40\21\1\240\30\21\1\45\5\21\1\17\64\21"+
    "\1\241\4\21\1\45\5\21\1\17\42\21\1\242\26\21"+
    "\1\45\5\21\1\17\21\21\1\243\10\21\1\244\36\21"+
    "\1\45\5\21\1\17\40\21\1\245\30\21\1\45\5\21"+
    "\1\17\51\21\1\246\17\21\1\45\5\21\1\17\17\21"+
    "\1\247\51\21\1\45\5\21\1\17\22\21\1\250\46\21"+
    "\1\45\5\21\1\17\37\21\1\251\31\21\1\45\5\21"+
    "\1\17\41\21\1\252\27\21\1\45\2\21\1\210\1\21"+
    "\1\210\1\211\33\21\1\253\35\21\1\45\5\21\1\17"+
    "\21\21\1\254\47\21\1\45\5\21\1\17\22\21\1\255"+
    "\46\21\1\45\5\21\1\17\37\21\1\256\31\21\1\45"+
    "\2\21\1\154\1\21\1\154\1\216\71\21\1\45\5\21"+
    "\1\17\33\21\1\257\12\21\1\260\22\21\1\45\5\21"+
    "\1\17\42\21\1\261\26\21\1\45\5\21\1\17\32\21"+
    "\1\262\36\21\1\45\5\21\1\17\43\21\1\263\25\21"+
    "\1\45\5\21\1\17\56\21\1\264\12\21\1\45\1\21"+
    "\3\14\1\21\1\66\1\14\1\21\5\14\7\265\53\14"+
    "\1\45\4\14\1\21\1\44\1\14\1\21\32\14\1\266"+
    "\34\14\1\45\4\14\1\21\1\44\1\14\1\21\15\14"+
    "\1\267\51\14\1\45\4\14\1\21\1\44\1\14\1\21"+
    "\33\14\1\270\33\14\1\45\4\14\1\21\1\44\1\14"+
    "\1\21\34\14\1\271\32\14\1\45\4\14\1\21\1\44"+
    "\1\14\1\21\40\14\1\272\26\14\1\45\4\14\1\21"+
    "\1\44\1\14\1\21\17\14\1\273\47\14\1\45\4\14"+
    "\1\21\1\44\1\14\1\21\37\14\1\274\27\14\1\45"+
    "\4\14\1\21\1\44\1\14\1\21\41\14\1\275\25\14"+
    "\1\45\4\14\1\21\1\44\1\14\1\21\16\14\1\276"+
    "\50\14\1\45\4\14\1\21\1\44\1\14\1\21\21\14"+
    "\1\277\45\14\1\45\4\14\1\21\1\44\1\14\1\21"+
    "\55\14\1\300\11\14\1\45\4\14\1\21\1\44\1\14"+
    "\1\21\36\14\1\301\30\14\1\45\4\14\1\21\1\44"+
    "\1\14\1\21\24\14\1\302\42\14\1\45\4\14\1\21"+
    "\1\44\1\14\1\21\15\14\1\303\51\14\1\45\4\14"+
    "\1\21\1\44\1\14\1\21\31\14\1\304\35\14\1\45"+
    "\4\14\1\21\1\44\1\14\1\21\22\14\1\305\44\14"+
    "\1\45\4\14\1\21\1\44\1\14\1\21\23\14\1\306"+
    "\43\14\1\45\4\14\1\21\1\44\1\14\1\21\25\14"+
    "\1\307\41\14\1\45\4\14\1\21\1\44\1\14\1\21"+
    "\41\14\1\310\25\14\1\45\4\14\1\21\1\44\1\14"+
    "\1\21\40\14\1\311\26\14\1\45\2\14\1\207\1\14"+
    "\1\210\1\211\1\14\1\21\67\14\1\45\1\14\1\21"+
    "\1\210\1\21\1\210\1\211\71\21\1\45\1\21\3\14"+
    "\1\21\1\44\1\14\1\21\16\14\1\312\50\14\1\45"+
    "\4\14\1\21\1\44\1\14\1\21\25\14\1\313\41\14"+
    "\1\45\4\14\1\21\1\44\1\14\1\21\25\14\1\314"+
    "\41\14\1\45\4\14\1\21\1\44\1\14\1\21\41\14"+
    "\1\315\25\14\1\45\4\14\1\21\1\44\1\14\1\21"+
    "\15\14\1\316\51\14\1\45\4\14\1\21\1\44\1\14"+
    "\1\21\40\14\1\317\26\14\1\45\4\14\1\21\1\44"+
    "\1\14\1\21\41\14\1\320\25\14\1\45\2\14\1\222"+
    "\1\14\1\262\1\321\1\14\1\21\67\14\1\45\4\14"+
    "\1\21\1\44\1\14\1\21\15\14\1\322\51\14\1\45"+
    "\4\14\1\21\1\44\1\14\1\21\63\14\1\323\3\14"+
    "\1\45\1\14\61\0\1\324\16\0\4\21\1\17\34\21"+
    "\1\325\34\21\1\45\5\21\1\17\17\21\1\326\51\21"+
    "\1\45\5\21\1\17\35\21\1\327\33\21\1\45\5\21"+
    "\1\17\36\21\1\330\32\21\1\45\5\21\1\17\42\21"+
    "\1\331\26\21\1\45\5\21\1\17\21\21\1\332\47\21"+
    "\1\45\5\21\1\17\41\21\1\333\27\21\1\45\5\21"+
    "\1\17\43\21\1\334\25\21\1\45\5\21\1\17\20\21"+
    "\1\335\50\21\1\45\5\21\1\17\23\21\1\336\45\21"+
    "\1\45\5\21\1\17\57\21\1\337\11\21\1\45\5\21"+
    "\1\17\40\21\1\340\30\21\1\45\5\21\1\17\26\21"+
    "\1\341\42\21\1\45\5\21\1\17\17\21\1\342\51\21"+
    "\1\45\5\21\1\17\33\21\1\343\35\21\1\45\5\21"+
    "\1\17\24\21\1\344\44\21\1\45\5\21\1\17\25\21"+
    "\1\345\43\21\1\45\5\21\1\17\27\21\1\346\41\21"+
    "\1\45\5\21\1\17\43\21\1\347\25\21\1\45\5\21"+
    "\1\17\42\21\1\350\26\21\1\45\5\21\1\17\20\21"+
    "\1\351\50\21\1\45\5\21\1\17\27\21\1\352\41\21"+
    "\1\45\5\21\1\17\27\21\1\353\41\21\1\45\5\21"+
    "\1\17\43\21\1\354\25\21\1\45\5\21\1\17\17\21"+
    "\1\355\51\21\1\45\5\21\1\17\42\21\1\356\26\21"+
    "\1\45\5\21\1\17\43\21\1\357\25\21\1\45\2\21"+
    "\1\262\1\21\1\262\1\321\71\21\1\45\5\21\1\17"+
    "\17\21\1\360\51\21\1\45\5\21\1\17\65\21\1\361"+
    "\3\21\1\45\1\21\3\14\1\21\1\66\1\14\1\21"+
    "\3\14\1\362\1\14\7\22\53\14\1\45\4\14\1\21"+
    "\1\44\1\14\1\21\21\14\1\363\45\14\1\45\4\14"+
    "\1\21\1\44\1\14\1\21\47\14\1\364\17\14\1\45"+
    "\4\14\1\21\1\44\1\14\1\21\32\14\1\365\34\14"+
    "\1\45\4\14\1\21\1\44\1\14\1\21\33\14\1\366"+
    "\33\14\1\45\4\14\1\21\1\44\1\14\1\21\36\14"+
    "\1\367\30\14\1\45\4\14\1\21\1\44\1\14\1\21"+
    "\27\14\1\370\37\14\1\45\4\14\1\21\1\44\1\14"+
    "\1\21\21\14\1\371\45\14\1\45\4\14\1\21\1\44"+
    "\1\14\1\21\31\14\1\372\35\14\1\45\4\14\1\21"+
    "\1\44\1\14\1\21\33\14\1\373\33\14\1\45\4\14"+
    "\1\21\1\44\1\14\1\21\17\14\1\374\47\14\1\45"+
    "\2\14\1\300\1\14\1\337\1\375\1\14\1\21\67\14"+
    "\1\45\4\14\1\21\1\44\1\14\1\21\41\14\1\376"+
    "\25\14\1\45\4\14\1\21\1\44\1\14\1\21\21\14"+
    "\1\377\45\14\1\45\4\14\1\21\1\44\1\14\1\21"+
    "\37\14\1\u0100\27\14\1\45\4\14\1\21\1\44\1\14"+
    "\1\21\41\14\1\u0101\25\14\1\45\4\14\1\21\1\44"+
    "\1\14\1\21\33\14\1\u0102\33\14\1\45\4\14\1\21"+
    "\1\44\1\14\1\21\21\14\1\u0103\45\14\1\45\4\14"+
    "\1\21\1\44\1\14\1\21\17\14\1\u0104\47\14\1\45"+
    "\4\14\1\21\1\44\1\14\1\21\25\14\1\u0105\41\14"+
    "\1\45\4\14\1\21\1\44\1\14\1\21\25\14\1\u0106"+
    "\41\14\1\45\4\14\1\21\1\44\1\14\1\21\36\14"+
    "\1\u0107\30\14\1\45\4\14\1\21\1\44\1\14\1\21"+
    "\33\14\1\u0108\33\14\1\45\4\14\1\21\1\44\1\14"+
    "\1\21\33\14\1\u0109\33\14\1\45\4\14\1\21\1\44"+
    "\1\14\1\21\21\14\1\u010a\45\14\1\45\2\14\1\316"+
    "\1\14\1\355\1\u010b\1\14\1\21\67\14\1\45\4\14"+
    "\1\21\1\44\1\14\1\21\33\14\1\u010c\33\14\1\45"+
    "\4\14\1\21\1\44\1\14\1\21\30\14\1\u010d\36\14"+
    "\1\45\4\14\1\21\1\44\1\14\1\21\36\14\1\u010e"+
    "\30\14\1\45\4\14\1\21\1\44\1\14\1\21\51\14"+
    "\1\u010f\15\14\1\45\1\14\70\0\1\u0110\7\0\4\21"+
    "\1\17\23\21\1\u0111\45\21\1\45\5\21\1\17\51\21"+
    "\1\u0112\17\21\1\45\5\21\1\17\34\21\1\u0113\34\21"+
    "\1\45\5\21\1\17\35\21\1\u0114\33\21\1\45\5\21"+
    "\1\17\40\21\1\u0115\30\21\1\45\5\21\1\17\31\21"+
    "\1\u0116\37\21\1\45\5\21\1\17\23\21\1\u0117\45\21"+
    "\1\45\5\21\1\17\33\21\1\u0118\35\21\1\45\5\21"+
    "\1\17\35\21\1\u0119\33\21\1\45\5\21\1\17\21\21"+
    "\1\u011a\47\21\1\45\2\21\1\337\1\21\1\337\1\375"+
    "\71\21\1\45\5\21\1\17\43\21\1\u011b\25\21\1\45"+
    "\5\21\1\17\23\21\1\u011c\45\21\1\45\5\21\1\17"+
    "\41\21\1\u011d\27\21\1\45\5\21\1\17\43\21\1\u011e"+
    "\25\21\1\45\5\21\1\17\35\21\1\u011f\33\21\1\45"+
    "\5\21\1\17\23\21\1\u0120\45\21\1\45\5\21\1\17"+
    "\21\21\1\u0121\47\21\1\45\5\21\1\17\27\21\1\u0122"+
    "\41\21\1\45\5\21\1\17\27\21\1\u0123\41\21\1\45"+
    "\5\21\1\17\40\21\1\u0124\30\21\1\45\5\21\1\17"+
    "\35\21\1\u0125\33\21\1\45\5\21\1\17\35\21\1\u0126"+
    "\33\21\1\45\5\21\1\17\23\21\1\u0127\45\21\1\45"+
    "\2\21\1\355\1\21\1\355\1\u010b\71\21\1\45\5\21"+
    "\1\17\35\21\1\u0128\33\21\1\45\5\21\1\17\32\21"+
    "\1\u0129\36\21\1\45\5\21\1\17\40\21\1\u012a\30\21"+
    "\1\45\5\21\1\17\53\21\1\u012b\15\21\1\45\1\21"+
    "\3\14\1\21\1\44\1\14\1\21\5\14\1\u012c\1\u012d"+
    "\1\u012e\1\u012f\1\u0130\1\u012f\1\u0130\53\14\1\45\4\14"+
    "\1\21\1\44\1\14\1\21\15\14\1\u0131\51\14\1\45"+
    "\4\14\1\21\1\44\1\14\1\21\40\14\1\u0132\26\14"+
    "\1\45\2\14\1\365\1\14\1\u0113\1\u0133\1\14\1\21"+
    "\67\14\1\45\4\14\1\21\1\44\1\14\1\21\47\14"+
    "\1\u0134\17\14\1\45\4\14\1\21\1\44\1\14\1\21"+
    "\33\14\1\u0135\33\14\1\45\4\14\1\21\1\44\1\14"+
    "\1\21\16\14\1\u0136\50\14\1\45\2\14\1\371\1\14"+
    "\1\u0117\1\u0137\1\14\1\21\67\14\1\45\4\14\1\21"+
    "\1\44\1\14\1\21\32\14\1\u0138\34\14\1\45\2\14"+
    "\1\373\1\14\1\u0119\1\u0139\1\14\1\21\67\14\1\45"+
    "\4\14\1\21\1\44\1\14\1\21\24\14\1\u013a\42\14"+
    "\1\45\4\14\1\21\1\44\1\14\1\21\17\14\1\u013b"+
    "\47\14\1\45\4\14\1\21\1\44\1\14\1\21\36\14"+
    "\1\u013c\30\14\1\45\2\14\1\u0100\1\14\1\u011d\1\u013d"+
    "\1\14\1\21\67\14\1\45\4\14\1\21\1\44\1\14"+
    "\1\21\30\14\1\u013e\36\14\1\45\4\14\1\21\1\44"+
    "\1\14\1\21\36\14\1\u013f\30\14\1\45\4\14\1\21"+
    "\1\44\1\14\1\21\32\14\1\u0140\34\14\1\45\4\14"+
    "\1\21\1\44\1\14\1\21\21\14\1\u0141\45\14\1\45"+
    "\4\14\1\21\1\44\1\14\1\21\21\14\1\u0142\45\14"+
    "\1\45\4\14\1\21\1\44\1\14\1\21\22\14\1\u0143"+
    "\44\14\1\45\4\14\1\21\1\44\1\14\1\21\21\14"+
    "\1\u0144\45\14\1\45\4\14\1\21\1\44\1\14\1\21"+
    "\32\14\1\u0145\34\14\1\45\2\14\1\u0109\1\14\1\u0126"+
    "\1\u0146\1\14\1\21\67\14\1\45\4\14\1\21\1\44"+
    "\1\14\1\21\36\14\1\u0147\30\14\1\45\4\14\1\21"+
    "\1\44\1\14\1\21\47\14\1\u0148\17\14\1\45\4\14"+
    "\1\21\1\44\1\14\1\21\33\14\1\u0149\33\14\1\45"+
    "\4\14\1\21\1\44\1\14\1\21\25\14\1\u014a\41\14"+
    "\1\45\2\14\1\u010f\1\14\1\u012b\1\u014b\1\14\1\21"+
    "\67\14\1\45\1\14\71\0\1\u014c\6\0\4\21\1\17"+
    "\17\21\1\u014d\51\21\1\45\5\21\1\17\42\21\1\u014e"+
    "\26\21\1\45\2\21\1\u0113\1\21\1\u0113\1\u0133\71\21"+
    "\1\45\5\21\1\17\51\21\1\u014f\17\21\1\45\5\21"+
    "\1\17\35\21\1\u0150\33\21\1\45\5\21\1\17\20\21"+
    "\1\u0151\50\21\1\45\2\21\1\u0117\1\21\1\u0117\1\u0137"+
    "\71\21\1\45\5\21\1\17\34\21\1\u0152\34\21\1\45"+
    "\2\21\1\u0119\1\21\1\u0119\1\u0139\71\21\1\45\5\21"+
    "\1\17\26\21\1\u0153\42\21\1\45\5\21\1\17\21\21"+
    "\1\u0154\47\21\1\45\5\21\1\17\40\21\1\u0155\30\21"+
    "\1\45\2\21\1\u011d\1\21\1\u011d\1\u013d\71\21\1\45"+
    "\5\21\1\17\32\21\1\u0156\36\21\1\45\5\21\1\17"+
    "\40\21\1\u0157\30\21\1\45\5\21\1\17\34\21\1\u0158"+
    "\34\21\1\45\5\21\1\17\23\21\1\u0159\45\21\1\45"+
    "\5\21\1\17\23\21\1\u015a\45\21\1\45\5\21\1\17"+
    "\24\21\1\u015b\44\21\1\45\5\21\1\17\23\21\1\u015c"+
    "\45\21\1\45\5\21\1\17\34\21\1\u015d\34\21\1\45"+
    "\2\21\1\u0126\1\21\1\u0126\1\u0146\71\21\1\45\5\21"+
    "\1\17\40\21\1\u015e\30\21\1\45\5\21\1\17\51\21"+
    "\1\u015f\17\21\1\45\5\21\1\17\35\21\1\u0160\33\21"+
    "\1\45\5\21\1\17\27\21\1\u0161\41\21\1\45\2\21"+
    "\1\u012b\1\21\1\u012b\1\u014b\71\21\1\45\1\21\3\14"+
    "\1\21\1\44\1\14\1\21\6\14\1\u012f\1\u012e\1\u012f"+
    "\1\u0130\1\u012f\1\u0130\53\14\1\45\4\14\1\21\1\44"+
    "\1\14\1\21\3\14\1\u0162\1\14\1\u012f\1\u0130\1\u012f"+
    "\57\14\1\45\4\14\1\21\1\44\1\14\1\21\3\14"+
    "\1\u0163\63\14\1\45\4\14\1\21\1\44\1\14\1\21"+
    "\3\14\1\u0162\63\14\1\45\4\14\1\21\1\44\1\14"+
    "\1\21\3\14\1\u0164\63\14\1\45\4\14\1\21\1\44"+
    "\1\14\1\21\17\14\1\u0165\47\14\1\45\4\14\1\21"+
    "\1\44\1\14\1\21\21\14\1\u0166\45\14\1\45\4\14"+
    "\1\21\1\44\1\14\1\21\40\14\1\u0167\26\14\1\45"+
    "\2\14\1\u0135\1\14\1\u0150\1\u0168\1\14\1\21\67\14"+
    "\1\45\4\14\1\21\1\44\1\14\1\21\33\14\1\u0169"+
    "\33\14\1\45\4\14\1\21\1\44\1\14\1\21\15\14"+
    "\1\u016a\51\14\1\45\4\14\1\21\1\44\1\14\1\21"+
    "\15\14\1\u016b\51\14\1\45\4\14\1\21\1\44\1\14"+
    "\1\21\40\14\1\u016c\26\14\1\45\4\14\1\21\1\44"+
    "\1\14\1\21\33\14\1\u016d\33\14\1\45\4\14\1\21"+
    "\1\44\1\14\1\21\15\14\1\u016e\51\14\1\45\4\14"+
    "\1\21\1\44\1\14\1\21\31\14\1\u016f\35\14\1\45"+
    "\2\14\1\u0140\1\14\1\u0158\1\u0170\1\14\1\21\67\14"+
    "\1\45\2\14\1\u0141\1\14\1\u0159\1\u0171\1\14\1\21"+
    "\67\14\1\45\4\14\1\21\1\44\1\14\1\21\36\14"+
    "\1\u0172\30\14\1\45\4\14\1\21\1\44\1\14\1\21"+
    "\25\14\1\u0173\41\14\1\45\2\14\1\u0174\1\14\1\u0175"+
    "\1\u0176\1\14\1\21\47\14\1\u0177\17\14\1\45\4\14"+
    "\1\21\1\44\1\14\1\21\21\14\1\u0178\45\14\1\45"+
    "\4\14\1\21\1\44\1\14\1\21\25\14\1\u0179\41\14"+
    "\1\45\4\14\1\21\1\44\1\14\1\21\42\14\1\u017a"+
    "\24\14\1\45\2\14\1\u0149\1\14\1\u0160\1\u017b\1\14"+
    "\1\21\67\14\1\45\4\14\1\21\1\44\1\14\1\21"+
    "\33\14\1\u017c\33\14\1\45\1\14\66\0\1\u017d\11\0"+
    "\4\21\1\17\21\21\1\u017e\47\21\1\45\5\21\1\17"+
    "\23\21\1\u017f\45\21\1\45\5\21\1\17\42\21\1\u0180"+
    "\26\21\1\45\2\21\1\u0150\1\21\1\u0150\1\u0168\71\21"+
    "\1\45\5\21\1\17\35\21\1\u0181\33\21\1\45\5\21"+
    "\1\17\17\21\1\u0182\51\21\1\45\5\21\1\17\17\21"+
    "\1\u0183\51\21\1\45\5\21\1\17\42\21\1\u0184\26\21"+
    "\1\45\5\21\1\17\35\21\1\u0185\33\21\1\45\5\21"+
    "\1\17\17\21\1\u0186\51\21\1\45\5\21\1\17\33\21"+
    "\1\u0187\35\21\1\45\2\21\1\u0158\1\21\1\u0158\1\u0170"+
    "\71\21\1\45\2\21\1\u0159\1\21\1\u0159\1\u0171\71\21"+
    "\1\45\5\21\1\17\40\21\1\u0188\30\21\1\45\5\21"+
    "\1\17\27\21\1\u0189\41\21\1\45\2\21\1\u0175\1\21"+
    "\1\u0175\1\u0176\51\21\1\u018a\17\21\1\45\5\21\1\17"+
    "\23\21\1\u018b\45\21\1\45\5\21\1\17\27\21\1\u018c"+
    "\41\21\1\45\5\21\1\17\44\21\1\u018d\24\21\1\45"+
    "\2\21\1\u0160\1\21\1\u0160\1\u017b\71\21\1\45\5\21"+
    "\1\17\35\21\1\u018e\33\21\1\45\1\21\3\14\1\21"+
    "\1\44\1\14\1\21\5\14\1\u018f\2\u0190\1\u0191\3\u0192"+
    "\53\14\1\45\4\14\1\21\1\44\1\14\1\21\5\14"+
    "\1\u018f\1\u0190\1\u0193\4\u0192\53\14\1\45\4\14\1\21"+
    "\1\44\1\14\1\21\5\14\1\u018f\2\u0190\1\u0194\3\u0192"+
    "\53\14\1\45\4\14\1\21\1\44\1\14\1\21\25\14"+
    "\1\u0195\41\14\1\45\4\14\1\21\1\44\1\14\1\21"+
    "\44\14\1\u0196\22\14\1\45\4\14\1\21\1\44\1\14"+
    "\1\21\21\14\1\u0197\45\14\1\45\4\14\1\21\1\44"+
    "\1\14\1\21\44\14\1\u0198\22\14\1\45\4\14\1\21"+
    "\1\44\1\14\1\21\37\14\1\u0199\27\14\1\45\2\14"+
    "\1\u016b\1\14\1\u0183\1\u019a\1\14\1\21\67\14\1\45"+
    "\4\14\1\21\1\44\1\14\1\21\41\14\1\u019b\25\14"+
    "\1\45\2\14\1\u016d\1\14\1\u0185\1\u019c\1\14\1\21"+
    "\67\14\1\45\4\14\1\21\1\44\1\14\1\21\36\14"+
    "\1\u019d\30\14\1\45\4\14\1\21\1\44\1\14\1\21"+
    "\41\14\1\u019e\25\14\1\45\4\14\1\21\1\44\1\14"+
    "\1\21\20\14\1\u019f\46\14\1\45\4\14\1\21\1\44"+
    "\1\14\1\21\17\14\1\u01a0\47\14\1\45\2\14\1\u0174"+
    "\1\14\1\u0175\1\u0176\1\14\1\21\67\14\1\45\1\14"+
    "\1\21\1\u0175\1\21\1\u0175\1\u0176\71\21\1\45\1\21"+
    "\3\14\1\21\1\44\1\14\1\21\17\14\1\u01a1\47\14"+
    "\1\45\4\14\1\21\1\44\1\14\1\21\37\14\1\u01a2"+
    "\27\14\1\45\4\14\1\21\1\44\1\14\1\21\20\14"+
    "\1\u01a3\46\14\1\45\4\14\1\21\1\44\1\14\1\21"+
    "\25\14\1\u01a4\41\14\1\45\4\14\1\21\1\44\1\14"+
    "\1\21\47\14\1\u01a5\17\14\1\45\1\14\73\0\1\u01a6"+
    "\4\0\4\21\1\17\27\21\1\u01a7\41\21\1\45\5\21"+
    "\1\17\46\21\1\u01a8\22\21\1\45\5\21\1\17\23\21"+
    "\1\u01a9\45\21\1\45\5\21\1\17\46\21\1\u01aa\22\21"+
    "\1\45\5\21\1\17\41\21\1\u01ab\27\21\1\45\2\21"+
    "\1\u0183\1\21\1\u0183\1\u019a\71\21\1\45\5\21\1\17"+
    "\43\21\1\u01ac\25\21\1\45\2\21\1\u0185\1\21\1\u0185"+
    "\1\u019c\71\21\1\45\5\21\1\17\40\21\1\u01ad\30\21"+
    "\1\45\5\21\1\17\43\21\1\u01ae\25\21\1\45\5\21"+
    "\1\17\22\21\1\u01af\46\21\1\45\5\21\1\17\21\21"+
    "\1\u01b0\47\21\1\45\5\21\1\17\21\21\1\u01b1\47\21"+
    "\1\45\5\21\1\17\41\21\1\u01b2\27\21\1\45\5\21"+
    "\1\17\22\21\1\u01b3\46\21\1\45\5\21\1\17\27\21"+
    "\1\u01b4\41\21\1\45\5\21\1\17\51\21\1\u01b5\17\21"+
    "\1\45\1\21\3\14\1\21\1\44\1\14\1\21\6\14"+
    "\6\u0192\53\14\1\45\4\14\1\21\1\u01b6\1\14\1\21"+
    "\5\14\7\u0192\53\14\1\45\4\14\1\21\1\u01b6\1\14"+
    "\1\21\5\14\2\u0192\60\14\1\45\4\14\1\21\1\u01b6"+
    "\1\14\1\21\67\14\1\45\4\14\1\21\1\u01b6\1\14"+
    "\1\21\5\14\6\u0192\54\14\1\45\4\14\1\21\1\u01b6"+
    "\1\14\1\21\5\14\1\u0192\61\14\1\45\4\14\1\21"+
    "\1\44\1\14\1\21\33\14\1\u01b7\33\14\1\45\4\14"+
    "\1\21\1\44\1\14\1\21\40\14\1\u01b8\26\14\1\45"+
    "\4\14\1\21\1\44\1\14\1\21\44\14\1\u01b9\22\14"+
    "\1\45\2\14\1\u0198\1\14\1\u01aa\1\u01ba\1\14\1\21"+
    "\67\14\1\45\2\14\1\u0199\1\14\1\u01ab\1\u01bb\1\14"+
    "\1\21\67\14\1\45\4\14\1\21\1\44\1\14\1\21"+
    "\36\14\1\u01bc\30\14\1\45\4\14\1\21\1\44\1\14"+
    "\1\21\25\14\1\u01bd\41\14\1\45\4\14\1\21\1\44"+
    "\1\14\1\21\30\14\1\u01be\36\14\1\45\4\14\1\21"+
    "\1\44\1\14\1\21\15\14\1\u01bf\51\14\1\45\4\14"+
    "\1\21\1\44\1\14\1\21\15\14\1\u01c0\51\14\1\45"+
    "\4\14\1\21\1\44\1\14\1\21\15\14\1\u01c1\51\14"+
    "\1\45\2\14\1\u01a2\1\14\1\u01b2\1\226\1\14\1\21"+
    "\67\14\1\45\4\14\1\21\1\44\1\14\1\21\33\14"+
    "\1\u01c2\33\14\1\45\4\14\1\21\1\44\1\14\1\21"+
    "\37\14\1\u01c3\27\14\1\45\4\14\1\21\1\44\1\14"+
    "\1\21\17\14\1\u01c4\47\14\1\45\1\14\65\0\1\u01c5"+
    "\12\0\4\21\1\17\35\21\1\u01c6\33\21\1\45\5\21"+
    "\1\17\42\21\1\u01c7\26\21\1\45\5\21\1\17\46\21"+
    "\1\u01c8\22\21\1\45\2\21\1\u01aa\1\21\1\u01aa\1\u01ba"+
    "\71\21\1\45\2\21\1\u01ab\1\21\1\u01ab\1\u01bb\71\21"+
    "\1\45\5\21\1\17\40\21\1\u01c9\30\21\1\45\5\21"+
    "\1\17\27\21\1\u01ca\41\21\1\45\5\21\1\17\32\21"+
    "\1\u01cb\36\21\1\45\5\21\1\17\17\21\1\u01cc\51\21"+
    "\1\45\5\21\1\17\17\21\1\u01cd\51\21\1\45\5\21"+
    "\1\17\17\21\1\u01ce\51\21\1\45\2\21\1\u01b2\1\21"+
    "\1\u01b2\1\226\71\21\1\45\5\21\1\17\35\21\1\u01cf"+
    "\33\21\1\45\5\21\1\17\41\21\1\u01d0\27\21\1\45"+
    "\5\21\1\17\21\21\1\u01d1\47\21\1\45\1\21\3\14"+
    "\1\21\1\44\1\14\1\21\32\14\1\u01d2\34\14\1\45"+
    "\4\14\1\21\1\44\1\14\1\21\33\14\1\u01d3\33\14"+
    "\1\45\4\14\1\21\1\44\1\14\1\21\40\14\1\u01d4"+
    "\26\14\1\45\4\14\1\21\1\44\1\14\1\21\15\14"+
    "\1\u01d5\51\14\1\45\4\14\1\21\1\44\1\14\1\21"+
    "\33\14\1\u01d6\33\14\1\45\4\14\1\21\1\44\1\14"+
    "\1\21\15\14\1\u01d7\51\14\1\45\2\14\1\u01bf\1\14"+
    "\1\u01cc\1\u01d8\1\14\1\21\67\14\1\45\4\14\1\21"+
    "\1\44\1\14\1\21\36\14\1\u01d9\30\14\1\45\4\14"+
    "\1\21\1\44\1\14\1\21\31\14\1\u01da\35\14\1\45"+
    "\2\14\1\u01c2\1\14\1\u01cf\1\u01db\1\14\1\21\67\14"+
    "\1\45\4\14\1\21\1\44\1\14\1\21\25\14\1\u01dc"+
    "\41\14\1\45\4\14\1\21\1\44\1\14\1\21\36\14"+
    "\1\u01dd\30\14\1\45\1\14\57\0\1\u01de\20\0\4\21"+
    "\1\17\34\21\1\u01df\34\21\1\45\5\21\1\17\35\21"+
    "\1\u01e0\33\21\1\45\5\21\1\17\42\21\1\u01e1\26\21"+
    "\1\45\5\21\1\17\17\21\1\u01e2\51\21\1\45\5\21"+
    "\1\17\35\21\1\u01e3\33\21\1\45\5\21\1\17\17\21"+
    "\1\u01e4\51\21\1\45\2\21\1\u01cc\1\21\1\u01cc\1\u01d8"+
    "\71\21\1\45\5\21\1\17\40\21\1\u01e5\30\21\1\45"+
    "\5\21\1\17\33\21\1\u01e6\35\21\1\45\2\21\1\u01cf"+
    "\1\21\1\u01cf\1\u01db\71\21\1\45\5\21\1\17\27\21"+
    "\1\u01e7\41\21\1\45\5\21\1\17\40\21\1\u01e8\30\21"+
    "\1\45\1\21\1\14\1\u01d2\1\14\1\u01df\1\u01e9\1\14"+
    "\1\21\67\14\1\45\2\14\1\u01d3\1\14\1\u01e0\1\u01ea"+
    "\1\14\1\21\67\14\1\45\4\14\1\21\1\44\1\14"+
    "\1\21\33\14\1\u01eb\33\14\1\45\2\14\1\u01d5\1\14"+
    "\1\u01e2\1\u01ec\1\14\1\21\67\14\1\45\2\14\1\u01d6"+
    "\1\14\1\u01e3\1\u01ed\1\14\1\21\67\14\1\45\4\14"+
    "\1\21\1\44\1\14\1\21\36\14\1\u01ee\30\14\1\45"+
    "\2\14\1\u01d9\1\14\1\u01e5\1\u01ef\1\14\1\21\67\14"+
    "\1\45\4\14\1\21\1\44\1\14\1\21\34\14\1\u01f0"+
    "\32\14\1\45\4\14\1\21\1\44\1\14\1\21\16\14"+
    "\1\u01f1\50\14\1\45\4\14\1\21\1\44\1\14\1\21"+
    "\21\14\1\u01f2\45\14\1\45\1\14\71\0\1\u01f3\6\0"+
    "\1\21\1\u01df\1\21\1\u01df\1\u01e9\71\21\1\45\2\21"+
    "\1\u01e0\1\21\1\u01e0\1\u01ea\71\21\1\45\5\21\1\17"+
    "\35\21\1\u01f4\33\21\1\45\2\21\1\u01e2\1\21\1\u01e2"+
    "\1\u01ec\71\21\1\45\2\21\1\u01e3\1\21\1\u01e3\1\u01ed"+
    "\71\21\1\45\5\21\1\17\40\21\1\u01f5\30\21\1\45"+
    "\2\21\1\u01e5\1\21\1\u01e5\1\u01ef\71\21\1\45\5\21"+
    "\1\17\36\21\1\u01f6\32\21\1\45\5\21\1\17\20\21"+
    "\1\u01f7\50\21\1\45\5\21\1\17\23\21\1\u01f8\45\21"+
    "\1\45\1\21\1\14\1\u01eb\1\14\1\u01f4\1\u01f9\1\14"+
    "\1\21\67\14\1\45\4\14\1\21\1\44\1\14\1\21"+
    "\25\14\1\u01fa\41\14\1\45\4\14\1\21\1\44\1\14"+
    "\1\21\33\14\1\u01fb\33\14\1\45\4\14\1\21\1\44"+
    "\1\14\1\21\30\14\1\u01fc\36\14\1\45\4\14\1\21"+
    "\1\44\1\14\1\21\15\14\1\u01fd\51\14\1\45\1\14"+
    "\63\0\1\u01fe\14\0\1\21\1\u01f4\1\21\1\u01f4\1\u01f9"+
    "\71\21\1\45\5\21\1\17\27\21\1\u01ff\41\21\1\45"+
    "\5\21\1\17\35\21\1\u0200\33\21\1\45\5\21\1\17"+
    "\32\21\1\u0201\36\21\1\45\5\21\1\17\17\21\1\u0202"+
    "\51\21\1\45\1\21\3\14\1\21\1\44\1\14\1\21"+
    "\33\14\1\u0203\33\14\1\45\2\14\1\u0204\1\14\1\u0205"+
    "\1\u0206\1\14\1\21\47\14\1\u0207\17\14\1\45\4\14"+
    "\1\21\1\44\1\14\1\21\21\14\1\u0208\45\14\1\45"+
    "\4\14\1\21\1\44\1\14\1\21\17\14\1\u0209\47\14"+
    "\1\45\1\14\70\0\1\u020a\7\0\4\21\1\17\35\21"+
    "\1\u020b\33\21\1\45\2\21\1\u0205\1\21\1\u0205\1\u0206"+
    "\51\21\1\u020c\17\21\1\45\5\21\1\17\23\21\1\u020d"+
    "\45\21\1\45\5\21\1\17\21\21\1\u020e\47\21\1\45"+
    "\1\21\1\14\1\u0203\1\14\1\u020b\1\u020f\1\14\1\21"+
    "\67\14\1\45\2\14\1\u0204\1\14\1\u0205\1\u0206\1\14"+
    "\1\21\67\14\1\45\1\14\1\21\1\u0205\1\21\1\u0205"+
    "\1\u0206\71\21\1\45\1\21\3\14\1\21\1\44\1\14"+
    "\1\21\5\14\7\u0210\53\14\1\45\2\14\1\u0208\1\14"+
    "\1\u020d\1\u0211\1\14\1\21\67\14\1\45\4\14\1\21"+
    "\1\44\1\14\1\21\25\14\1\u0212\41\14\1\45\1\14"+
    "\1\21\1\u020b\1\21\1\u020b\1\u020f\71\21\1\45\5\21"+
    "\1\17\7\21\7\u0213\53\21\1\45\2\21\1\u020d\1\21"+
    "\1\u020d\1\u0211\71\21\1\45\5\21\1\17\27\21\1\u0214"+
    "\41\21\1\45\1\21\1\14\1\u0215\1\14\1\u0216\1\u0217"+
    "\1\14\1\21\5\14\7\u0210\53\14\1\45\4\14\1\21"+
    "\1\44\1\14\1\21\33\14\1\u0218\33\14\1\45\1\14"+
    "\1\21\1\u0216\1\21\1\u0216\1\u0217\7\21\7\u0213\53\21"+
    "\1\45\5\21\1\17\35\21\1\u0219\33\21\1\45\1\21"+
    "\1\14\1\u0215\1\14\1\u0216\1\u0217\1\14\1\21\67\14"+
    "\1\45\1\14\1\21\1\u0216\1\21\1\u0216\1\u0217\71\21"+
    "\1\45\1\21\3\14\1\21\1\44\1\14\1\21\32\14"+
    "\1\u021a\34\14\1\45\1\14\4\21\1\17\34\21\1\u021b"+
    "\34\21\1\45\1\21\1\14\1\u021a\1\14\1\u021b\1\u021c"+
    "\1\14\1\21\67\14\1\45\1\14\1\21\1\u021b\1\21"+
    "\1\u021b\1\u021c\71\21\1\45\1\21";

  private static int [] zzUnpackTrans() {
    int [] result = new int[31552];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\4\11\1\1\2\11\3\0\1\11"+
    "\24\0\1\11\20\0\2\11\122\0\1\11\4\0\1\11"+
    "\7\0\1\11\72\0\1\11\53\0\1\11\15\0\1\11"+
    "\47\0\1\11\3\0\1\11\1\0\1\11\3\0\1\11"+
    "\10\0\1\11\4\0\1\11\34\0\1\11\7\0\2\11"+
    "\4\0\1\11\4\0\1\11\36\0\1\11\1\0\1\11"+
    "\31\0\1\11\3\0\2\11\34\0\1\11\2\0\1\11"+
    "\15\0\2\11\1\0\2\11\1\0\1\11\11\0\1\11"+
    "\14\0\1\11\3\0\1\11\4\0\1\11\1\0\1\11"+
    "\5\0\1\11\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[540];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ImportacionLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 49: break;
          case 2:
            { /*Ignorar*/
            }
            // fall through
          case 50: break;
          case 3:
            { return new Symbol(PARENT_A, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 51: break;
          case 4:
            { return new Symbol(PARENT_C, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 52: break;
          case 5:
            { return new Symbol(COMA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 53: break;
          case 6:
            { return new Symbol(PUNTOS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 54: break;
          case 7:
            { return new Symbol(LLAVE_A, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 55: break;
          case 8:
            { return new Symbol(LLAVE_C, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 56: break;
          case 9:
            { return new Symbol(ALLCHARACTERS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 57: break;
          case 10:
            { return new Symbol(ALLCHARACTERSNOSPACE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 58: break;
          case 11:
            { return new Symbol(IDENTIFICADOR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 59: break;
          case 12:
            { return new Symbol(NUMERO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 60: break;
          case 13:
            { return new Symbol(NO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 61: break;
          case 14:
            { return new Symbol(SI, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 62: break;
          case 15:
            { return new Symbol(OPCIONES, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 63: break;
          case 16:
            { return new Symbol(URL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 64: break;
          case 17:
            { return new Symbol(DARK, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 65: break;
          case 18:
            { return new Symbol(TEMA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 66: break;
          case 19:
            { return new Symbol(BOTON, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 67: break;
          case 20:
            { return new Symbol(CLASE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 68: break;
          case 21:
            { return new Symbol(COMBO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 69: break;
          case 22:
            { return new Symbol(FILAS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 70: break;
          case 23:
            { return new Symbol(RADIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 71: break;
          case 24:
            { return new Symbol(WHITE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 72: break;
          case 25:
            { return new Symbol(CENTRO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 73: break;
          case 26:
            { return new Symbol(IMAGEN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 74: break;
          case 27:
            { return new Symbol(INDICE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 75: break;
          case 28:
            { return new Symbol(NOMBRE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 76: break;
          case 29:
            { return new Symbol(TITULO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 77: break;
          case 30:
            { return new Symbol(DERECHA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 78: break;
          case 31:
            { return new Symbol(FICHERO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 79: break;
          case 32:
            { return new Symbol(FECHA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 80: break;
          case 33:
            { return new Symbol(CHECKBOX, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 81: break;
          case 34:
            { return new Symbol(COLUMNAS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 82: break;
          case 35:
            { return new Symbol(IZQUIERDA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 83: break;
          case 36:
            { return new Symbol(REQUERIDO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 84: break;
          case 37:
            { return new Symbol(ALINEACION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 85: break;
          case 38:
            { return new Symbol(AREA_TEXTO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 86: break;
          case 39:
            { return new Symbol(ESTRUCTURA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 87: break;
          case 40:
            { return new Symbol(FORMULARIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 88: break;
          case 41:
            { return new Symbol(JUSTIFICAR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 89: break;
          case 42:
            { return new Symbol(CAMPO_TEXTO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 90: break;
          case 43:
            { return new Symbol(NOMBRE_CAMPO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 91: break;
          case 44:
            { return new Symbol(NEW_FORMULARIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 92: break;
          case 45:
            { return new Symbol(ID_FORMULARIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 93: break;
          case 46:
            { return new Symbol(TEXTO_VISIBLE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 94: break;
          case 47:
            { return new Symbol(NOMBRE_CAMPO_N, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 95: break;
          case 48:
            { return new Symbol(USUARIO_CREACION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
