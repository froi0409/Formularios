package com.froi.formulariosweb.analizadores.importacion;

import com.froi.formulariosweb.entidades.Advertencia;
import com.froi.formulariosweb.entidadesfundamentales.Componente;
import com.froi.formulariosweb.entidadesfundamentales.Formulario;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import java_cup.runtime.*;

class ParserImportacion;

parser code{:

    private ArrayList<Advertencia> listaErrores;
    private ArrayList<Formulario> listaFormularios;
    private ArrayList<Componente> listaComponentes;
    private ArrayList<String> listaParametros;
    private ArrayList<String> listaParametrosComponentes;
    private String c1, c2, c3, c4, c5, c6;
    private String p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12;
    private int punteroErrores, linea=0, columna=0;
    private String clase;


    public ParserImportacion(ImportacionLexer lexer, ArrayList<Formulario> listaFormularios, ArrayList<Advertencia> listaErrores) {
        super(lexer);
        this.listaErrores = listaErrores;
        this.listaFormularios = listaFormularios;
        this.listaComponentes = new ArrayList<>();
        this.listaParametros = new ArrayList<>();
        this.listaParametrosComponentes = new ArrayList<>();
    }
    public void report_error(String message, Object info) {
        System.out.println("reporterror");
    }
    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal " + info);
    }
    @Override
    public void syntax_error(Symbol s) {
        System.out.println("linea: " + s.left + "   columna: " + s.right);
        Advertencia advert = new Advertencia((String)s.value, s.left, s.right, "Sintáctico", "error sintáctico");
        listaErrores.add(advert);
        punteroErrores = listaErrores.size()-1;
    }
    protected int error_sync_size() {
        return 1;
    }
    public boolean verificacionBloque(String[] listaObligatorios, ArrayList<String> listaParametros) {
        boolean comprobante = true;
        for(int i = 0; i < listaParametros.size(); i++) {
            String parametro = listaParametros.get(i).replace(" ","").replace("\n","").replace("\t","");
            System.out.println("VERIFICANDO: " + listaParametros.get(i));
            listaParametros.set(i, parametro);
        }
        for (String element: listaObligatorios) {
            if(!listaParametros.contains(element)) {
                Advertencia advert = new Advertencia("Elemento Faltante", linea, columna, element);
                System.out.println("Hace falta el parametro: " + element + " En el bloque de la linea " + linea);
                listaErrores.add(advert);
                comprobante = false;
            }
            
        }
        Set<String> datosSinDuplicar = new HashSet<String>(listaParametros); //Creamos un Set de la lista de parametros clonada
        for(String datoRevisado : datosSinDuplicar) {
            int repeticion = Collections.frequency(listaParametros, datoRevisado); //Contamos las veces que se repite un parametro
            System.out.println("Dato Revisado: " + datoRevisado + ", repeticion: " + repeticion);
            if(repeticion > 1) {
                Advertencia advert = new Advertencia("Elemento Repetido", linea, columna, datoRevisado + " " + repeticion + " " + "veces");
                listaErrores.add(advert);
                comprobante = false;
            }
        }
        return comprobante;
    }
    public boolean verificacionClase(ArrayList<String> listaParametrosC, String clase) {
        boolean comprobante = true;
        clase = clase.replace(" ","").replace("\n","").replace("\t","");
        for(String element: listaParametrosC) {
            element = element.replace(" ","").replace("\n","").replace("\t","");
            if(element.equals("\"OPCIONES\"")) {
                if(!clase.equals("\"CHECKBOX\"") && !clase.equals("\"RADIO\"") && !clase.equals("\"COMBO\"")) {
                    System.out.println("La instrucción \"OPCIONES\" del bloque de la linea "  + linea +  " no es valida para " + clase);
                    Advertencia advert = new Advertencia("Clase Invalida", linea, columna, "El parámetro " + element + " no es válido para la clase " + clase);
                    listaErrores.add(advert);
                    comprobante = false;
                }
            } else if(element.equals("\"FILAS\"")) {
                if(!clase.equals("\"AREA_TEXTO\"")) {
                    System.out.println("La instruccion \"FILAS\" del bloque de la linea "  + linea + " no es valida para " + clase);
                    Advertencia advert = new Advertencia("Clase Invalida", linea, columna, "El parámetro " + element + " no es válido para la clase " + clase);
                    listaErrores.add(advert);
                    comprobante = false;
                }
            } else if(element.equals("\"COLUMNAS\"")) {
                if(!clase.equals("\"AREA_TEXTO\"")) {
                    System.out.println("La instruccion \"COLUMNAS\" del bloque de la linea "  + linea + " no es valida para " + clase);
                    Advertencia advert = new Advertencia("Clase Invalida", linea, columna, "El parámetro " + element + " no es válido para la clase " + clase);
                    listaErrores.add(advert);
                    comprobante = false;
                }
            } else if(element.equals("\"URL\"")) {
                if(!clase.equals("\"IMAGEN\"")) {
                    System.out.println("La instruccion \"URL\" del bloque de la linea "  + linea + " no es valida para " + clase);
                    Advertencia advert = new Advertencia("Clase Invalida", linea, columna, "El parámetro " + element + " no es válido para la clase " + clase);
                    listaErrores.add(advert);
                    comprobante = false;
                }
            }
        }
        if(clase.equals("\"IMAGEN\"")) {
            if(!listaParametrosC.contains("\"URL\"")) {
                Advertencia advert = new Advertencia("Elemento Faltante", linea, columna, "URL");
                listaErrores.add(advert);
                comprobante = false;
            }
        } else if (!clase.equals("\"BOTON\"") && !clase.equals("\"IMAGEN\"")) {
            if(!listaParametrosC.contains("\"NOMBRE_CAMPO\"")) {
                Advertencia advert = new Advertencia("Elemento Faltante", linea, columna, "NOMBRE_CAMPO");
                listaErrores.add(advert);
                comprobante = false;
            }
        }
        if(clase.equals("\"COMBO\"") || clase.equals("\"RADIO\"") || clase.equals("\"CHECKBOX\"")) {
            if(!listaParametrosC.contains("\"OPCIONES\"")) {
                Advertencia advert = new Advertencia("Elemento Faltante", linea, columna, "OPCIONES");
                listaErrores.add(advert);
                comprobante = false;
            }
        }
        return comprobante;
    }
:}

terminal PARENT_A, PARENT_C, LLAVE_A, LLAVE_C, PUNTOS, COMA, NEW_FORMULARIO, ID_FORMULARIO, TITULO, NOMBRE, TEMA, USUARIO_CREACION, ESTRUCTURA, INDICE, FORMULARIO, CLASE, REQUERIDO, ALINEACION, NOMBRE_CAMPO, TEXTO_VISIBLE, OPCIONES, FILAS, COLUMNAS, URL, DARK, WHITE, SI, NO, CENTRO, IZQUIERDA, DERECHA, JUSTIFICAR, FECHA_CREACION;
terminal ID_COMPONENTE_N, IDENTIFICADOR, NUMERO, FECHA, ALLCHARACTERSNOSPACE, ALLCHARACTERS, OPTIONS;
terminal CAMPO_TEXTO, AREA_TEXTO, CHECKBOX, RADIO, FICHERO, IMAGEN, COMBO, BOTON;

non terminal inicio, instruccion_formulario, valores_formulario, accion_formulario, opciones_formulario;
non terminal estructura_formulario_p, estructura_formulario, instruccion_estructura_formulario, opciones_estructura_formulario;
non terminal tipos_entrada, tipos_entrada_complete, temas, clases, alineacion, required;


start with inicio;

inicio ::=  NEW_FORMULARIO PARENT_A instruccion_formulario PARENT_C
            | error PARENT_A instruccion_formulario PARENT_C
            | NEW_FORMULARIO error instruccion_formulario PARENT_C
            | NEW_FORMULARIO PARENT_A error PARENT_C
            | NEW_FORMULARIO PARENT_A instruccion_formulario error
            ;

instruccion_formulario ::=  valores_formulario COMA instruccion_formulario
                            | valores_formulario
                            ;

valores_formulario ::=      LLAVE_A accion_formulario LLAVE_C   {:
                                                                    System.out.println("Se detectó un formulario nuevo");
                                                                    String[] listaObligatorios = {"\"ID_FORMULARIO\"", "\"TITULO\"", "\"NOMBRE\"", "\"TEMA\""};
                                                                    if(verificacionBloque(listaObligatorios, listaParametros)) {
                                                                        c1 = (c1.substring(1, c1.length()-1));
                                                                        c2 = (c2.substring(1, c2.length()-1));
                                                                        c3 = (c3.substring(1, c3.length()-1));
                                                                        c4 = (c4.substring(1, c4.length()-1));
                                                                        Formulario form = new Formulario(c1, c2, c3, c4);
                                                                        form.setListaComponentes((ArrayList<Componente>) listaComponentes.clone());
                                                                        System.out.println("CATIDAD DE COMPONENTES EN GRAMATICA: " + listaComponentes.size());
                                                                        listaFormularios.add(form);
                                                                    }
                                                                    listaComponentes.clear();
                                                                    c1 = null; c2 = null; c3 = null; c4 = null; c5 = null; c6 = null;
                                                                :}
                            | LLAVE_A error LLAVE_C               {: listaComponentes.clear();
                                                                    c1 = null; c2 = null; c3 = null; c4 = null; c5 = null; c6 = null; :}
                            ;

accion_formulario ::=       opciones_formulario COMA accion_formulario
                            | opciones_formulario
                            ;

opciones_formulario ::=     ID_FORMULARIO:para PUNTOS IDENTIFICADOR:ent          {: listaParametros.add(para.toString()); c1 = ent.toString(); :}
                            | TITULO:para PUNTOS tipos_entrada_complete:ent      {: listaParametros.add(para.toString()); c2 = ent.toString(); :}
                            | NOMBRE:para PUNTOS tipos_entrada:ent               {: listaParametros.add(para.toString()); c3 = ent.toString(); :}
                            | TEMA:para PUNTOS temas:ent                         {: listaParametros.add(para.toString()); c4 = ent.toString(); :}
                            | ESTRUCTURA:para PUNTOS PARENT_A estructura_formulario_p PARENT_C
                            | error PUNTOS tipos_entrada_complete           {: listaErrores.get(punteroErrores).setDescripcion("No se reconoce el tipo de parámetro a asignar valor en la instrucción"); :}
                            | error tipos_entrada_complete                  {: listaErrores.get(punteroErrores).setDescripcion("Se esperaba un parametro valido para asignar valor seguido del símbolo ':' "); :}
                            | ID_FORMULARIO PUNTOS error                    {: listaErrores.get(punteroErrores).setDescripcion("Valor inválido para ser asignado a un id, revise si el valor a asignar contiene caracteres inválidos o si hace falta el simbolo ',' o '}' de fin de instrucción "); :}
                            | ID_FORMULARIO error IDENTIFICADOR             {: listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo ':' en la instrucción"); :}
                            | ID_FORMULARIO error                           {: listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo ':' y un valor válido para ser asignado a un identificador"); :}
                            | TITULO PUNTOS error                           {: listaErrores.get(punteroErrores).setDescripcion("Valor inválido para ser asignado a un titulo, revise si el valor a asignar contiene caracteres inválidos o si hace falta el simbolo ',' o '}' de fin de instrucción "); :}
                            | TITULO error tipos_entrada_complete           {: listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo ':' en la instrucción"); :}
                            | TITULO error                                   {: listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo ':' y un valor válido para ser asignado a un titulo"); :}
                            | NOMBRE PUNTOS error                           {: listaErrores.get(punteroErrores).setDescripcion("Valor inválido para ser asignado a un nombre, revise si el valor a asignar contiene caracteres inválidos o si hace falta el simbolo ',' o '}' de fin de instrucción "); :}
                            | NOMBRE error tipos_entrada                    {: listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo ':' en la instrucción"); :}
                            | NOMBRE error                                  {: listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo ':' y un valor válido para ser asignado a un titulo"); :}
                            | TEMA PUNTOS error                             {: listaErrores.get(punteroErrores).setDescripcion("Valor inválido para ser asignado a un tema, revise si el valor a asignar contiene caracteres inválidos o si hace falta el simbolo ',' o '}' de fin de instrucción "); :}
                            | TEMA error temas                              {: listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo ':' en la instrucción"); :}
                            | TEMA error                                    {: listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo ':' y un valor válido para ser asignado a un tema"); :}
                            | ESTRUCTURA PUNTOS error estructura_formulario_p PARENT_C      {: listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo '(' en la instruccion"); :}
                            ;

estructura_formulario_p ::=     estructura_formulario COMA estructura_formulario_p
                                | estructura_formulario
                                ;

estructura_formulario ::=       LLAVE_A:llaA instruccion_estructura_formulario LLAVE_C   {:
                                                                                            linea = llaAleft;
                                                                                            columna = llaAright;
                                                                                            String[] listaObligatorios = {"\"ID_COMPONENTE\"", "\"CLASE\"", "\"TEXTO_VISIBLE\""};
                                                                                            System.out.println("FILTRO1");
                                                                                            if(verificacionBloque(listaObligatorios, listaParametrosComponentes)) {
                                                                                                System.out.println("FILTRO2");
                                                                                                if(verificacionClase(listaParametrosComponentes, clase)) {
                                                                                                    System.out.println("FILTRO3");
                                                                                                    int pApoyo12 = Integer.parseInt(p12.substring(1, p12.length()-1));
                                                                                                    p1 = (p1.substring(1, p1.length()-1));
                                                                                                    p4 = (p4.substring(1, p4.length()-1));
                                                                                                    p5 = (p5.substring(1, p5.length()-1));
                                                                                                    System.out.println("Probando p1");
                                                                                                    System.out.println(p1);
                                                                                                    String idForm = c1.substring(1, c1.length()-1);
                                                                                                    System.out.println(idForm);
                                                                                                    Componente compo = new Componente(pApoyo12, p1, idForm, p4, p5);
                                                                                                    if(p2 != null) {
                                                                                                        compo.setNombreCampo(p2.substring(1, p2.length()-1));
                                                                                                    }
                                                                                                    if(p6 != null) {
                                                                                                        compo.setAlineacion(p6.substring(1, p6.length()-1));
                                                                                                    }
                                                                                                    if(p7 != null) {
                                                                                                        compo.setRequerido(p7.substring(1, p7.length()-1));
                                                                                                        }
                                                                                                    if(p8 != null) {
                                                                                                        compo.setOpciones(p8.substring(1, p8.length()-1));
                                                                                                    }
                                                                                                    if(p9 != null) {
                                                                                                        compo.setFilas(Integer.parseInt(p9.substring(1, p9.length()-1)));
                                                                                                    }
                                                                                                    if(p10 != null) {
                                                                                                        compo.setColumnas(Integer.parseInt(p10.substring(1, p10.length()-1)));
                                                                                                    }
                                                                                                    if(p11 != null) {
                                                                                                        compo.setUrl(p11.substring(1, p11.length()-1));
                                                                                                    }
                                                                                                    
                                                                                                    listaComponentes.add(compo);
                                                                                                }
                                                                                            } 
                                                                                            listaParametrosComponentes.clear();
                                                                                            p1 = null; p2 = null; p3 = null; p4 = null; p5 = null; p6 = null; p7 = null; p8 = null; p9 = null; p10 = null; p11 = null; p12 = null;
                                                                                    :}
                                | LLAVE_A error LLAVE_C                             {: p1 = null; p2 = null; p3 = null; p4 = null; p5 = null; p6 = null; p7 = null; p8 = null; p9 = null; p10 = null; p11 = null; p12 = null; :}
                                ;

instruccion_estructura_formulario ::=   opciones_estructura_formulario COMA instruccion_estructura_formulario
                                        | opciones_estructura_formulario
                                        ;

opciones_estructura_formulario  ::=     ID_COMPONENTE_N:para PUNTOS IDENTIFICADOR:ent        {: listaParametrosComponentes.add("\"ID_COMPONENTE\""); p1 = ent.toString(); :}
                                        | NOMBRE_CAMPO:para PUNTOS tipos_entrada:ent         {: listaParametrosComponentes.add(para.toString()); p2 = ent.toString(); :}
                                        | CLASE:para PUNTOS clases:ent                       {: listaParametrosComponentes.add(para.toString()); p4 = ent.toString(); clase = ent.toString(); :}
                                        | TEXTO_VISIBLE:para PUNTOS tipos_entrada_complete:ent      {: listaParametrosComponentes.add(para.toString()); p5 = ent.toString(); :}
                                        | INDICE:para PUNTOS NUMERO:ent                      {: listaParametrosComponentes.add(para.toString()); p12 = ent.toString(); :}
                                        | ALINEACION:para PUNTOS alineacion:ent              {: listaParametrosComponentes.add(para.toString()); p6 = ent.toString(); :}
                                        | REQUERIDO:para PUNTOS required:ent                 {: listaParametrosComponentes.add(para.toString()); p7 = ent.toString(); :}
                                        | OPCIONES:para PUNTOS OPTIONS:ent                   {: listaParametrosComponentes.add(para.toString()); p8 = ent.toString(); :}
                                        | FILAS:para PUNTOS NUMERO:ent                       {: listaParametrosComponentes.add(para.toString()); p9 = ent.toString(); :}
                                        | COLUMNAS:para PUNTOS NUMERO:ent                    {: listaParametrosComponentes.add(para.toString()); p10 = ent.toString(); :}
                                        | URL:para PUNTOS tipos_entrada:ent                  {: listaParametrosComponentes.add(para.toString()); p11 = ent.toString(); :}
                                        | error PUNTOS tipos_entrada_complete           {: listaErrores.get(punteroErrores).setDescripcion("No se reconoce el tipo de parámetro a asignar valor en la instrucción"); :}
                                        | error tipos_entrada_complete                  {: listaErrores.get(punteroErrores).setDescripcion("Se esperaba un parametro valido para asignar valor seguido del símbolo ':' "); :}
                                        | ID_COMPONENTE_N PUNTOS error                  {: listaErrores.get(punteroErrores).setDescripcion("Valor inválido para ser asignado a un id, revise si el valor a asignar contiene caracteres inválidos o si hace falta el simbolo ',' o '}' de fin de instrucción "); :}
                                        | ID_COMPONENTE_N error IDENTIFICADOR           {: listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo ':' en la instrucción"); :}
                                        | ID_COMPONENTE_N error                         {: listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo ':' y un valor válido para ser asignado a un identificador"); :}
                                        | NOMBRE_CAMPO PUNTOS error                     {: listaErrores.get(punteroErrores).setDescripcion("Valor inválido para ser asignado a un nombre de campo, revise si el valor a asignar contiene caracteres inválidos o si hace falta el simbolo ',' o '}' de fin de instrucción "); :}
                                        | NOMBRE_CAMPO error tipos_entrada              {: listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo ':' en la instrucción"); :}
                                        | NOMBRE_CAMPO error                            {: listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo ':' y un valor válido para ser asignado a un nombre de campo"); :}
                                        | CLASE PUNTOS error                            {: listaErrores.get(punteroErrores).setDescripcion("Valor inválido para ser asignado a una clase, revise si el valor a asignar contiene caracteres inválidos o si hace falta el simbolo ',' o '}' de fin de instrucción "); :}
                                        | CLASE error clases                            {: listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo ':' en la instrucción"); :}
                                        | CLASE error                                   {: listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo ':' y un valor válido para ser asignado a una clase"); :}
                                        | TEXTO_VISIBLE PUNTOS error                    {: listaErrores.get(punteroErrores).setDescripcion("Valor inválido para ser asignado a un texto visible, revise si el valor a asignar contiene caracteres inválidos o si hace falta el simbolo ',' o '}' de fin de instrucción "); :}
                                        | TEXTO_VISIBLE error tipos_entrada_complete    {: listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo ':' en la instrucción"); :}
                                        | TEXTO_VISIBLE error                           {: listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo ':' y un valor válido para ser asignado a texto visible"); :}
                                        | INDICE PUNTOS error                           {: listaErrores.get(punteroErrores).setDescripcion("Valor inválido para ser asignado a un indice, revise si el valor a asignar contiene caracteres inválidos o si hace falta el simbolo ',' o '}' de fin de instrucción "); :}
                                        | INDICE error NUMERO                           {: listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo ':' en la instrucción"); :}
                                        | INDICE error                                  {: listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo ':' y un valor válido para ser asignado a un indice"); :}
                                        | ALINEACION PUNTOS error                       {: listaErrores.get(punteroErrores).setDescripcion("Valor inválido para ser asignado a una alineacion, revise si el valor a asignar contiene caracteres inválidos o si hace falta el simbolo ',' o '}' de fin de instrucción "); :}
                                        | ALINEACION error alineacion                   {: listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo ':' en la instrucción"); :}
                                        | ALINEACION error                              {: listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo ':' y un valor válido para ser asignado a una alineacion"); :}
                                        | REQUERIDO PUNTOS error                        {: listaErrores.get(punteroErrores).setDescripcion("Valor inválido para ser asignado a un campo requerido, revise si el valor a asignar contiene caracteres inválidos o si hace falta el simbolo ',' o '}' de fin de instrucción "); :}
                                        | REQUERIDO error required                      {: listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo ':' en la instrucción"); :}
                                        | REQUERIDO error                               {: listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo ':' y un valor válido para ser asignado a un campo requerido"); :}
                                        | OPCIONES PUNTOS error                         {: listaErrores.get(punteroErrores).setDescripcion("Valor inválido para ser asignado a un parametro de opciones, revise si el valor a asignar contiene caracteres inválidos o si hace falta el simbolo ',' o '}' de fin de instrucción "); :}
                                        | OPCIONES error OPTIONS                        {: listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo ':' en la instrucción"); :}
                                        | OPCIONES error                                {: listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo ':' y un valor válido para ser asignado a un parametro de opciones"); :}
                                        | FILAS PUNTOS error                            {: listaErrores.get(punteroErrores).setDescripcion("Valor inválido para ser asignado a un parametro filas, revise si el valor a asignar contiene caracteres inválidos o si hace falta el simbolo ',' o '}' de fin de instrucción "); :}
                                        | FILAS error NUMERO                            {: listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo ':' en la instrucción"); :}
                                        | FILAS error                                   {: listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo ':' y un valor válido para ser asignado a un parametro filas"); :}
                                        | COLUMNAS PUNTOS error                         {: listaErrores.get(punteroErrores).setDescripcion("Valor inválido para ser asignado a un parametro collumnas, revise si el valor a asignar contiene caracteres inválidos o si hace falta el simbolo ',' o '}' de fin de instrucción "); :}
                                        | COLUMNAS error NUMERO                         {: listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo ':' en la instrucción"); :}
                                        | COLUMNAS error                                {: listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo ':' y un valor válido para ser asignado a un parametro columnas"); :}
                                        | URL PUNTOS error                              {: listaErrores.get(punteroErrores).setDescripcion("Valor inválido para ser asignado a un parametro URL, revise si el valor a asignar contiene caracteres inválidos o si hace falta el simbolo ',' o '}' de fin de instrucción "); :}
                                        | URL error tipos_entrada_complete              {: listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo ':' en la instrucción"); :}
                                        | URL error                                     {: listaErrores.get(punteroErrores).setDescripcion("Se esperaba un simbolo ':' y un valor válido para ser asignado a un parametro URL"); :}
                                        ;

tipos_entrada ::=   ALLCHARACTERSNOSPACE:para   {: RESULT=para; :}
                    | OPCIONES:para             {: RESULT=para; :}
                    | NUMERO:para               {: RESULT=para; :}
                    | FECHA:para                {: RESULT=para; :}
                    | IDENTIFICADOR:para        {: RESULT=para; :}
                    | temas:para                {: RESULT=para; :}
                    | clases:para               {: RESULT=para; :}
                    | alineacion:para           {: RESULT=para; :}
                    | required:para             {: RESULT=para; :}
                    ;

tipos_entrada_complete ::=  ALLCHARACTERS:para      {: RESULT=para; :}
                            | tipos_entrada:para    {: RESULT=para; :}
                            ;

temas ::=   DARK:para       {: RESULT=para; :}
            | WHITE:para    {: RESULT=para; :}
            ;

clases ::=  CAMPO_TEXTO:para    {: RESULT=para; :}
            | AREA_TEXTO:para   {: RESULT=para; :}
            | CHECKBOX:para     {: RESULT=para; :}
            | RADIO:para        {: RESULT=para; :}
            | FICHERO:para      {: RESULT=para; :}
            | IMAGEN:para       {: RESULT=para; :}
            | COMBO:para        {: RESULT=para; :}
            | BOTON:para        {: RESULT=para; :}
            ;

alineacion ::=  CENTRO:para         {: RESULT=para; :}
                | IZQUIERDA:para    {: RESULT=para; :}
                | DERECHA:para      {: RESULT=para; :}
                | JUSTIFICAR:para   {: RESULT=para; :}
                ;

required ::=    SI:para     {: RESULT=para; :}
                | NO:para   {: RESULT=para; :}
                ;