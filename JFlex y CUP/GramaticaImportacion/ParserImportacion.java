
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserImportacion extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserImportacionSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserImportacion() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserImportacion(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserImportacion(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\002\006\000\002\003" +
    "\005\000\002\003\003\000\002\004\005\000\002\005\005" +
    "\000\002\005\003\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\007\000\002\007\005\000\002\007" +
    "\003\000\002\010\005\000\002\011\005\000\002\011\002" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\004\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\014\003\000\002\014" +
    "\003\000\002\015\003\000\002\015\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\020\003\000\002\020\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\004\012\004\001\002\000\004\004\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\006\012\001\002\000\006\005\ufffe\011\157\001" +
    "\002\000\004\005\156\001\002\000\020\013\015\014\016" +
    "\015\023\016\021\017\013\020\017\044\022\001\002\000" +
    "\004\010\154\001\002\000\006\007\ufffb\011\152\001\002" +
    "\000\004\010\150\001\002\000\004\010\146\001\002\000" +
    "\004\010\064\001\002\000\004\007\063\001\002\000\004" +
    "\010\061\001\002\000\004\010\057\001\002\000\004\010" +
    "\024\001\002\000\054\030\055\034\031\035\053\036\044" +
    "\037\052\040\035\041\041\042\054\043\056\046\047\047" +
    "\046\050\043\051\051\053\036\054\027\055\042\056\025" +
    "\057\050\060\026\061\037\062\030\001\002\000\006\007" +
    "\uffd2\011\uffd2\001\002\000\006\007\uffd0\011\uffd0\001\002" +
    "\000\006\007\uffd4\011\uffd4\001\002\000\006\007\uffce\011" +
    "\uffce\001\002\000\006\007\uffd7\011\uffd7\001\002\000\006" +
    "\007\ufff8\011\ufff8\001\002\000\006\007\uffdb\011\uffdb\001" +
    "\002\000\006\007\uffda\011\uffda\001\002\000\006\007\uffcd" +
    "\011\uffcd\001\002\000\006\007\uffd5\011\uffd5\001\002\000" +
    "\006\007\uffcf\011\uffcf\001\002\000\006\007\uffdd\011\uffdd" +
    "\001\002\000\006\007\uffcc\011\uffcc\001\002\000\006\007" +
    "\uffd3\011\uffd3\001\002\000\006\007\uffdf\011\uffdf\001\002" +
    "\000\006\007\uffc9\011\uffc9\001\002\000\006\007\uffdc\011" +
    "\uffdc\001\002\000\006\007\uffe0\011\uffe0\001\002\000\006" +
    "\007\uffde\011\uffde\001\002\000\006\007\uffd1\011\uffd1\001" +
    "\002\000\006\007\uffe2\011\uffe2\001\002\000\006\007\uffc8" +
    "\011\uffc8\001\002\000\006\007\uffd6\011\uffd6\001\002\000" +
    "\006\007\uffcb\011\uffcb\001\002\000\006\007\uffe1\011\uffe1" +
    "\001\002\000\006\007\uffca\011\uffca\001\002\000\004\050" +
    "\060\001\002\000\006\007\ufff5\011\ufff5\001\002\000\006" +
    "\034\031\035\053\001\002\000\006\007\ufff7\011\ufff7\001" +
    "\002\000\006\005\ufffd\011\ufffd\001\002\000\004\004\065" +
    "\001\002\000\004\006\070\001\002\000\004\005\145\001" +
    "\002\000\006\005\ufff2\011\143\001\002\000\034\007\uffef" +
    "\021\102\022\077\023\104\024\076\025\106\026\071\027" +
    "\101\030\073\031\072\032\100\033\105\045\075\001\002" +
    "\000\004\010\141\001\002\000\004\010\137\001\002\000" +
    "\004\010\135\001\002\000\004\007\134\001\002\000\004" +
    "\010\132\001\002\000\004\010\130\001\002\000\004\010" +
    "\126\001\002\000\004\010\124\001\002\000\056\030\055" +
    "\034\031\035\053\036\044\037\052\040\035\041\041\042" +
    "\054\043\056\046\047\047\046\050\043\051\051\052\122" +
    "\053\036\054\027\055\042\056\025\057\050\060\026\061" +
    "\037\062\030\001\002\000\004\010\117\001\002\000\004" +
    "\011\115\001\002\000\004\010\113\001\002\000\004\010" +
    "\111\001\002\000\004\010\107\001\002\000\012\040\035" +
    "\041\041\042\054\043\056\001\002\000\004\011\uffe8\001" +
    "\002\000\054\030\055\034\031\035\053\036\044\037\052" +
    "\040\035\041\041\042\054\043\056\046\047\047\046\050" +
    "\043\051\051\053\036\054\027\055\042\056\025\057\050" +
    "\060\026\061\037\062\030\001\002\000\004\011\uffe3\001" +
    "\002\000\022\053\036\054\027\055\042\056\025\057\050" +
    "\060\026\061\037\062\030\001\002\000\004\011\uffeb\001" +
    "\002\000\034\007\uffef\021\102\022\077\023\104\024\076" +
    "\025\106\026\071\027\101\030\073\031\072\032\100\033" +
    "\105\045\075\001\002\000\004\007\ufff0\001\002\000\004" +
    "\047\120\001\002\000\004\011\uffe9\001\002\000\004\011" +
    "\uffea\001\002\000\006\007\uffd9\011\uffd9\001\002\000\006" +
    "\007\uffd8\011\uffd8\001\002\000\004\047\125\001\002\000" +
    "\004\011\uffe4\001\002\000\004\046\127\001\002\000\004" +
    "\011\uffec\001\002\000\006\036\044\037\052\001\002\000" +
    "\004\011\uffe7\001\002\000\004\046\133\001\002\000\004" +
    "\011\uffee\001\002\000\006\005\ufff1\011\ufff1\001\002\000" +
    "\004\030\136\001\002\000\004\011\uffe6\001\002\000\004" +
    "\047\140\001\002\000\004\011\uffe5\001\002\000\054\030" +
    "\055\034\031\035\053\036\044\037\052\040\035\041\041" +
    "\042\054\043\056\046\047\047\046\050\043\051\051\053" +
    "\036\054\027\055\042\056\025\057\050\060\026\061\037" +
    "\062\030\001\002\000\004\011\uffed\001\002\000\004\006" +
    "\070\001\002\000\004\005\ufff3\001\002\000\006\007\ufff4" +
    "\011\ufff4\001\002\000\056\030\055\034\031\035\053\036" +
    "\044\037\052\040\035\041\041\042\054\043\056\046\047" +
    "\047\046\050\043\051\051\052\122\053\036\054\027\055" +
    "\042\056\025\057\050\060\026\061\037\062\030\001\002" +
    "\000\006\007\ufff9\011\ufff9\001\002\000\004\046\151\001" +
    "\002\000\006\007\ufffa\011\ufffa\001\002\000\020\013\015" +
    "\014\016\015\023\016\021\017\013\020\017\044\022\001" +
    "\002\000\004\007\ufffc\001\002\000\054\030\055\034\031" +
    "\035\053\036\044\037\052\040\035\041\041\042\054\043" +
    "\056\046\047\047\046\050\043\051\051\053\036\054\027" +
    "\055\042\056\025\057\050\060\026\061\037\062\030\001" +
    "\002\000\006\007\ufff6\011\ufff6\001\002\000\004\002\000" +
    "\001\002\000\004\006\012\001\002\000\004\005\uffff\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\010\004\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\017\006\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\013\031\015\037\016\044\017\032\020" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\065\010\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\073\012\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\013\122\014\120" +
    "\015\037\016\044\017\032\020\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\107\001\001\000\002\001" +
    "\001\000\014\013\111\015\037\016\044\017\032\020\033" +
    "\001\001\000\002\001\001\000\004\016\113\001\001\000" +
    "\002\001\001\000\006\011\115\012\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\013\141\015\037\016\044\017\032\020\033\001\001\000" +
    "\002\001\001\000\006\007\143\010\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\013\122\014\146\015" +
    "\037\016\044\017\032\020\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\152\001" +
    "\001\000\002\001\001\000\014\013\154\015\037\016\044" +
    "\017\032\020\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\157\004\007\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserImportacion$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserImportacion$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserImportacion$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private ArrayList<Advertencia> listaErrores;
    private Formulario formulario;
    
    public ParserImportacion(ImportacionLexer lexer, ArrayList<Advertencia> listaErrores) {
        super(lexer);
        this.listaErrores = listaErrores;
        this.formulario = new Formulario();
    }
    public void report_error(String message, Object info) {
        System.out.println("reporterror");
    }
    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal " + info);
    }
    @Override
    public void syntax_error(Symbol s) {
        System.out.println("linea: " + s.left + "   columna: " + s.right);
    }
    protected int error_sync_size() {
        return 1;
    }
    public Formulario getFormulario() {
        return formulario;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserImportacion$actions {
  private final ParserImportacion parser;

  /** Constructor */
  CUP$ParserImportacion$actions(ParserImportacion parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserImportacion$do_action_part00000000(
    int                        CUP$ParserImportacion$act_num,
    java_cup.runtime.lr_parser CUP$ParserImportacion$parser,
    java.util.Stack            CUP$ParserImportacion$stack,
    int                        CUP$ParserImportacion$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserImportacion$result;

      /* select the action based on the action number */
      switch (CUP$ParserImportacion$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-1)).value;
		RESULT = start_val;
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-1)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserImportacion$parser.done_parsing();
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= NEW_FORMULARIO PARENT_A instruccion_formulario PARENT_C 
            {
              Object RESULT =null;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-3)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instruccion_formulario ::= valores_formulario COMA instruccion_formulario 
            {
              Object RESULT =null;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("instruccion_formulario",1, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruccion_formulario ::= valores_formulario 
            {
              Object RESULT =null;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("instruccion_formulario",1, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // valores_formulario ::= LLAVE_A accion_formulario LLAVE_C 
            {
              Object RESULT =null;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("valores_formulario",2, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // accion_formulario ::= opciones_formulario COMA opciones_formulario 
            {
              Object RESULT =null;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("accion_formulario",3, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // accion_formulario ::= opciones_formulario 
            {
              Object RESULT =null;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("accion_formulario",3, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // opciones_formulario ::= ID_FORMULARIO PUNTOS IDENTIFICADOR 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("opciones_formulario",4, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // opciones_formulario ::= TITULO PUNTOS tipos_entrada_complete 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("opciones_formulario",4, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // opciones_formulario ::= NOMBRE PUNTOS tipos_entrada 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("opciones_formulario",4, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // opciones_formulario ::= TEMA PUNTOS temas 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("opciones_formulario",4, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // opciones_formulario ::= USUARIO_CREACION PUNTOS tipos_entrada 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("opciones_formulario",4, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // opciones_formulario ::= FECHA_CREACION PUNTOS FECHA 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("opciones_formulario",4, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // opciones_formulario ::= ESTRUCTURA PUNTOS PARENT_A estructura_formulario_p PARENT_C 
            {
              Object RESULT =null;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("opciones_formulario",4, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-4)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // estructura_formulario_p ::= estructura_formulario COMA estructura_formulario_p 
            {
              Object RESULT =null;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("estructura_formulario_p",5, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // estructura_formulario_p ::= estructura_formulario 
            {
              Object RESULT =null;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("estructura_formulario_p",5, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // estructura_formulario ::= LLAVE_A instruccion_estructura_formulario LLAVE_C 
            {
              Object RESULT =null;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("estructura_formulario",6, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion_estructura_formulario ::= opciones_estructura_formulario COMA instruccion_estructura_formulario 
            {
              Object RESULT =null;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("instruccion_estructura_formulario",7, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion_estructura_formulario ::= 
            {
              Object RESULT =null;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("instruccion_estructura_formulario",7, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // opciones_estructura_formulario ::= ID_COMPONENTE_N PUNTOS IDENTIFICADOR 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("opciones_estructura_formulario",8, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // opciones_estructura_formulario ::= NOMBRE_CAMPO PUNTOS tipos_entrada 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("opciones_estructura_formulario",8, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // opciones_estructura_formulario ::= FORMULARIO PUNTOS IDENTIFICADOR 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("opciones_estructura_formulario",8, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // opciones_estructura_formulario ::= CLASE PUNTOS clases 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("opciones_estructura_formulario",8, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // opciones_estructura_formulario ::= TEXTO_VISIBLE tipos_entrada_complete 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("opciones_estructura_formulario",8, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-1)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // opciones_estructura_formulario ::= INDICE PUNTOS NUMERO 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("opciones_estructura_formulario",8, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // opciones_estructura_formulario ::= ALINEACION PUNTOS alineacion 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("opciones_estructura_formulario",8, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // opciones_estructura_formulario ::= REQUERIDO PUNTOS required 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("opciones_estructura_formulario",8, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // opciones_estructura_formulario ::= OPCIONES PUNTOS OPCIONES 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("opciones_estructura_formulario",8, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // opciones_estructura_formulario ::= FILAS PUNTOS NUMERO 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("opciones_estructura_formulario",8, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // opciones_estructura_formulario ::= COLUMNAS PUNTOS NUMERO 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("opciones_estructura_formulario",8, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // opciones_estructura_formulario ::= URL PUNTOS tipos_entrada 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;

              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("opciones_estructura_formulario",8, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.elementAt(CUP$ParserImportacion$top-2)), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipos_entrada ::= ALLCHARACTERSNOSPACE 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("tipos_entrada",9, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipos_entrada ::= OPCIONES 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("tipos_entrada",9, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipos_entrada ::= NUMERO 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("tipos_entrada",9, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipos_entrada ::= FECHA 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("tipos_entrada",9, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipos_entrada ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("tipos_entrada",9, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipos_entrada ::= temas 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("tipos_entrada",9, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipos_entrada ::= clases 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("tipos_entrada",9, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tipos_entrada ::= alineacion 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("tipos_entrada",9, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipos_entrada ::= required 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("tipos_entrada",9, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipos_entrada_complete ::= ALLCHARACTERS 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("tipos_entrada_complete",10, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipos_entrada_complete ::= tipos_entrada 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("tipos_entrada_complete",10, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // temas ::= DARK 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("temas",11, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // temas ::= WHITE 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("temas",11, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // clases ::= CAMPO_TEXTO 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("clases",12, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // clases ::= AREA_TEXTO 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("clases",12, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // clases ::= CHECKBOX 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("clases",12, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // clases ::= RADIO 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("clases",12, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // clases ::= FICHERO 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("clases",12, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // clases ::= IMAGEN 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("clases",12, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // clases ::= COMBO 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("clases",12, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // clases ::= BOTON 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("clases",12, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // alineacion ::= CENTRO 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("alineacion",13, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // alineacion ::= IZQUIERDA 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("alineacion",13, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // alineacion ::= DERECHA 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("alineacion",13, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // alineacion ::= JUSTIFICAR 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("alineacion",13, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // required ::= SI 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("required",14, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // required ::= NO 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$ParserImportacion$stack.peek()).value;
		 RESULT=para; 
              CUP$ParserImportacion$result = parser.getSymbolFactory().newSymbol("required",14, ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserImportacion$stack.peek()), RESULT);
            }
          return CUP$ParserImportacion$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserImportacion$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserImportacion$do_action(
    int                        CUP$ParserImportacion$act_num,
    java_cup.runtime.lr_parser CUP$ParserImportacion$parser,
    java.util.Stack            CUP$ParserImportacion$stack,
    int                        CUP$ParserImportacion$top)
    throws java.lang.Exception
    {
              return CUP$ParserImportacion$do_action_part00000000(
                               CUP$ParserImportacion$act_num,
                               CUP$ParserImportacion$parser,
                               CUP$ParserImportacion$stack,
                               CUP$ParserImportacion$top);
    }
}

}
